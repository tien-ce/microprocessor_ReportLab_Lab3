
lab3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002050  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800215c  0800215c  0001215c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002180  08002180  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002180  08002180  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002180  08002180  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002180  08002180  00012180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002184  08002184  00012184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000002c  080021b4  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080021b4  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009901  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cdb  00000000  00000000  00029956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002b638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002c0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017482  00000000  00000000  0002ca68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfde  00000000  00000000  00043eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008273d  00000000  00000000  00050ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3605  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002938  00000000  00000000  000d3658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002144 	.word	0x08002144

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08002144 	.word	0x08002144

0800014c <ex4_init>:
 *
 *  Created on: Sep 27, 2024
 *      Author: thuyh
 */
#include <ex4.h>
void ex4_init(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	SetTimerForTimerSet(0, 500,10);
 8000150:	220a      	movs	r2, #10
 8000152:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000156:	2000      	movs	r0, #0
 8000158:	f001 ff84 	bl	8002064 <SetTimerForTimerSet>
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}

08000160 <ex4_run>:
void ex4_run(){
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	if(timer1_flag[0] == 1){
 8000164:	4b07      	ldr	r3, [pc, #28]	; (8000184 <ex4_run+0x24>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	2b01      	cmp	r3, #1
 800016a:	d109      	bne.n	8000180 <ex4_run+0x20>
		HAL_GPIO_TogglePin(GPIOA, LED_RED_Pin);
 800016c:	2120      	movs	r1, #32
 800016e:	4806      	ldr	r0, [pc, #24]	; (8000188 <ex4_run+0x28>)
 8000170:	f000 fd1d 	bl	8000bae <HAL_GPIO_TogglePin>
		SetTimerForTimerSet(0, 500,10);
 8000174:	220a      	movs	r2, #10
 8000176:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800017a:	2000      	movs	r0, #0
 800017c:	f001 ff72 	bl	8002064 <SetTimerForTimerSet>
	}
}
 8000180:	bf00      	nop
 8000182:	bd80      	pop	{r7, pc}
 8000184:	200000ac 	.word	0x200000ac
 8000188:	40010800 	.word	0x40010800

0800018c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b086      	sub	sp, #24
 8000190:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000192:	f000 f9f3 	bl	800057c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000196:	f000 f82b 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019a:	f000 f8b1 	bl	8000300 <MX_GPIO_Init>
  MX_TIM2_Init();
 800019e:	f000 f863 	bl	8000268 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80001a2:	4810      	ldr	r0, [pc, #64]	; (80001e4 <main+0x58>)
 80001a4:	f001 f948 	bl	8001438 <HAL_TIM_Base_Start_IT>
  ex4_init();
 80001a8:	f7ff ffd0 	bl	800014c <ex4_init>
  ex5_init();
 80001ac:	f001 fe56 	bl	8001e5c <ex5_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ex4_run();
 80001b0:	f7ff ffd6 	bl	8000160 <ex4_run>
	  ex5_run();
 80001b4:	f001 fe58 	bl	8001e68 <ex5_run>
	  automatic_run();
 80001b8:	f001 fe1a 	bl	8001df0 <automatic_run>
	  traffic_double_display(GPIOA, RED_1_Pin, YELLOW_1_Pin, GREEN_1_Pin, GPIOA, RED_2_Pin, YELLOW_2_Pin, GREEN_2_Pin, status);
 80001bc:	4b0a      	ldr	r3, [pc, #40]	; (80001e8 <main+0x5c>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	9304      	str	r3, [sp, #16]
 80001c2:	2340      	movs	r3, #64	; 0x40
 80001c4:	9303      	str	r3, [sp, #12]
 80001c6:	2380      	movs	r3, #128	; 0x80
 80001c8:	9302      	str	r3, [sp, #8]
 80001ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001ce:	9301      	str	r3, [sp, #4]
 80001d0:	4b06      	ldr	r3, [pc, #24]	; (80001ec <main+0x60>)
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	2302      	movs	r3, #2
 80001d6:	2204      	movs	r2, #4
 80001d8:	2108      	movs	r1, #8
 80001da:	4804      	ldr	r0, [pc, #16]	; (80001ec <main+0x60>)
 80001dc:	f001 fcb8 	bl	8001b50 <traffic_double_display>
	  ex4_run();
 80001e0:	e7e6      	b.n	80001b0 <main+0x24>
 80001e2:	bf00      	nop
 80001e4:	20000060 	.word	0x20000060
 80001e8:	20000020 	.word	0x20000020
 80001ec:	40010800 	.word	0x40010800

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b090      	sub	sp, #64	; 0x40
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	2228      	movs	r2, #40	; 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 ff98 	bl	8002134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000212:	2302      	movs	r3, #2
 8000214:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021a:	2310      	movs	r3, #16
 800021c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800021e:	2300      	movs	r3, #0
 8000220:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000222:	f107 0318 	add.w	r3, r7, #24
 8000226:	4618      	mov	r0, r3
 8000228:	f000 fcda 	bl	8000be0 <HAL_RCC_OscConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000232:	f000 f8e9 	bl	8000408 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000236:	230f      	movs	r3, #15
 8000238:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800023a:	2300      	movs	r3, #0
 800023c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f000 ff46 	bl	80010e0 <HAL_RCC_ClockConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800025a:	f000 f8d5 	bl	8000408 <Error_Handler>
  }
}
 800025e:	bf00      	nop
 8000260:	3740      	adds	r7, #64	; 0x40
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
	...

08000268 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b086      	sub	sp, #24
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800026e:	f107 0308 	add.w	r3, r7, #8
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800027c:	463b      	mov	r3, r7
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000284:	4b1d      	ldr	r3, [pc, #116]	; (80002fc <MX_TIM2_Init+0x94>)
 8000286:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800028a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800028c:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <MX_TIM2_Init+0x94>)
 800028e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000292:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000294:	4b19      	ldr	r3, [pc, #100]	; (80002fc <MX_TIM2_Init+0x94>)
 8000296:	2200      	movs	r2, #0
 8000298:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800029a:	4b18      	ldr	r3, [pc, #96]	; (80002fc <MX_TIM2_Init+0x94>)
 800029c:	2209      	movs	r2, #9
 800029e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002a0:	4b16      	ldr	r3, [pc, #88]	; (80002fc <MX_TIM2_Init+0x94>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002a6:	4b15      	ldr	r3, [pc, #84]	; (80002fc <MX_TIM2_Init+0x94>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002ac:	4813      	ldr	r0, [pc, #76]	; (80002fc <MX_TIM2_Init+0x94>)
 80002ae:	f001 f873 	bl	8001398 <HAL_TIM_Base_Init>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002b8:	f000 f8a6 	bl	8000408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002c2:	f107 0308 	add.w	r3, r7, #8
 80002c6:	4619      	mov	r1, r3
 80002c8:	480c      	ldr	r0, [pc, #48]	; (80002fc <MX_TIM2_Init+0x94>)
 80002ca:	f001 f9f1 	bl	80016b0 <HAL_TIM_ConfigClockSource>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002d4:	f000 f898 	bl	8000408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002d8:	2300      	movs	r3, #0
 80002da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002dc:	2300      	movs	r3, #0
 80002de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002e0:	463b      	mov	r3, r7
 80002e2:	4619      	mov	r1, r3
 80002e4:	4805      	ldr	r0, [pc, #20]	; (80002fc <MX_TIM2_Init+0x94>)
 80002e6:	f001 fbc9 	bl	8001a7c <HAL_TIMEx_MasterConfigSynchronization>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002f0:	f000 f88a 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002f4:	bf00      	nop
 80002f6:	3718      	adds	r7, #24
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000060 	.word	0x20000060

08000300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b088      	sub	sp, #32
 8000304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000306:	f107 0310 	add.w	r3, r7, #16
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000314:	4b2f      	ldr	r3, [pc, #188]	; (80003d4 <MX_GPIO_Init+0xd4>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a2e      	ldr	r2, [pc, #184]	; (80003d4 <MX_GPIO_Init+0xd4>)
 800031a:	f043 0310 	orr.w	r3, r3, #16
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b2c      	ldr	r3, [pc, #176]	; (80003d4 <MX_GPIO_Init+0xd4>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0310 	and.w	r3, r3, #16
 8000328:	60fb      	str	r3, [r7, #12]
 800032a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	4b29      	ldr	r3, [pc, #164]	; (80003d4 <MX_GPIO_Init+0xd4>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a28      	ldr	r2, [pc, #160]	; (80003d4 <MX_GPIO_Init+0xd4>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b26      	ldr	r3, [pc, #152]	; (80003d4 <MX_GPIO_Init+0xd4>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0304 	and.w	r3, r3, #4
 8000340:	60bb      	str	r3, [r7, #8]
 8000342:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000344:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <MX_GPIO_Init+0xd4>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a22      	ldr	r2, [pc, #136]	; (80003d4 <MX_GPIO_Init+0xd4>)
 800034a:	f043 0308 	orr.w	r3, r3, #8
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b20      	ldr	r3, [pc, #128]	; (80003d4 <MX_GPIO_Init+0xd4>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0308 	and.w	r3, r3, #8
 8000358:	607b      	str	r3, [r7, #4]
 800035a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin|YELLOW_1_Pin|RED_1_Pin|LED_RED_Pin
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 8000362:	481d      	ldr	r0, [pc, #116]	; (80003d8 <MX_GPIO_Init+0xd8>)
 8000364:	f000 fc0b 	bl	8000b7e <HAL_GPIO_WritePin>
                          |GREEN_2_Pin|YELLOW_2_Pin|RED_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEGLED1_0_Pin|SEGLED1_1_Pin|SEGLED1_2_Pin|SEGLED2_3_Pin
 8000368:	2200      	movs	r2, #0
 800036a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800036e:	481b      	ldr	r0, [pc, #108]	; (80003dc <MX_GPIO_Init+0xdc>)
 8000370:	f000 fc05 	bl	8000b7e <HAL_GPIO_WritePin>
                          |SEGLED2_4_Pin|SEGLED2_5_Pin|SEGLED2_6_Pin|SEGLED1_3_Pin
                          |SEGLED1_4_Pin|SEGLED1_5_Pin|SEGLED1_6_Pin|SEGLED2_0_Pin
                          |SEGLED2_1_Pin|SEGLED2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000374:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800037e:	2301      	movs	r3, #1
 8000380:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	4619      	mov	r1, r3
 8000388:	4815      	ldr	r0, [pc, #84]	; (80003e0 <MX_GPIO_Init+0xe0>)
 800038a:	f000 fa67 	bl	800085c <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_1_Pin YELLOW_1_Pin RED_1_Pin LED_RED_Pin
                           GREEN_2_Pin YELLOW_2_Pin RED_2_Pin */
  GPIO_InitStruct.Pin = GREEN_1_Pin|YELLOW_1_Pin|RED_1_Pin|LED_RED_Pin
 800038e:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
 8000392:	613b      	str	r3, [r7, #16]
                          |GREEN_2_Pin|YELLOW_2_Pin|RED_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000394:	2301      	movs	r3, #1
 8000396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039c:	2302      	movs	r3, #2
 800039e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a0:	f107 0310 	add.w	r3, r7, #16
 80003a4:	4619      	mov	r1, r3
 80003a6:	480c      	ldr	r0, [pc, #48]	; (80003d8 <MX_GPIO_Init+0xd8>)
 80003a8:	f000 fa58 	bl	800085c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEGLED1_0_Pin SEGLED1_1_Pin SEGLED1_2_Pin SEGLED2_3_Pin
                           SEGLED2_4_Pin SEGLED2_5_Pin SEGLED2_6_Pin SEGLED1_3_Pin
                           SEGLED1_4_Pin SEGLED1_5_Pin SEGLED1_6_Pin SEGLED2_0_Pin
                           SEGLED2_1_Pin SEGLED2_2_Pin */
  GPIO_InitStruct.Pin = SEGLED1_0_Pin|SEGLED1_1_Pin|SEGLED1_2_Pin|SEGLED2_3_Pin
 80003ac:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80003b0:	613b      	str	r3, [r7, #16]
                          |SEGLED2_4_Pin|SEGLED2_5_Pin|SEGLED2_6_Pin|SEGLED1_3_Pin
                          |SEGLED1_4_Pin|SEGLED1_5_Pin|SEGLED1_6_Pin|SEGLED2_0_Pin
                          |SEGLED2_1_Pin|SEGLED2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b2:	2301      	movs	r3, #1
 80003b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ba:	2302      	movs	r3, #2
 80003bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003be:	f107 0310 	add.w	r3, r7, #16
 80003c2:	4619      	mov	r1, r3
 80003c4:	4805      	ldr	r0, [pc, #20]	; (80003dc <MX_GPIO_Init+0xdc>)
 80003c6:	f000 fa49 	bl	800085c <HAL_GPIO_Init>

}
 80003ca:	bf00      	nop
 80003cc:	3720      	adds	r7, #32
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40010800 	.word	0x40010800
 80003dc:	40010c00 	.word	0x40010c00
 80003e0:	40011000 	.word	0x40011000

080003e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	timerRun();
 80003ec:	f001 fe4e 	bl	800208c <timerRun>
	button_reading(GPIOx, GPIO_Pin);
 80003f0:	4903      	ldr	r1, [pc, #12]	; (8000400 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80003f2:	4804      	ldr	r0, [pc, #16]	; (8000404 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003f4:	f001 fd3e 	bl	8001e74 <button_reading>
}
 80003f8:	bf00      	nop
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	2000000c 	.word	0x2000000c
 8000404:	20000000 	.word	0x20000000

08000408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800040c:	b672      	cpsid	i
}
 800040e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000410:	e7fe      	b.n	8000410 <Error_Handler+0x8>
	...

08000414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800041a:	4b15      	ldr	r3, [pc, #84]	; (8000470 <HAL_MspInit+0x5c>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	4a14      	ldr	r2, [pc, #80]	; (8000470 <HAL_MspInit+0x5c>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6193      	str	r3, [r2, #24]
 8000426:	4b12      	ldr	r3, [pc, #72]	; (8000470 <HAL_MspInit+0x5c>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <HAL_MspInit+0x5c>)
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	4a0e      	ldr	r2, [pc, #56]	; (8000470 <HAL_MspInit+0x5c>)
 8000438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800043c:	61d3      	str	r3, [r2, #28]
 800043e:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <HAL_MspInit+0x5c>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800044a:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <HAL_MspInit+0x60>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	4a04      	ldr	r2, [pc, #16]	; (8000474 <HAL_MspInit+0x60>)
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000466:	bf00      	nop
 8000468:	3714      	adds	r7, #20
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	40021000 	.word	0x40021000
 8000474:	40010000 	.word	0x40010000

08000478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000488:	d113      	bne.n	80004b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <HAL_TIM_Base_MspInit+0x44>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a0b      	ldr	r2, [pc, #44]	; (80004bc <HAL_TIM_Base_MspInit+0x44>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <HAL_TIM_Base_MspInit+0x44>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2100      	movs	r1, #0
 80004a6:	201c      	movs	r0, #28
 80004a8:	f000 f9a1 	bl	80007ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004ac:	201c      	movs	r0, #28
 80004ae:	f000 f9ba 	bl	8000826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004b2:	bf00      	nop
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000

080004c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <NMI_Handler+0x4>

080004c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <HardFault_Handler+0x4>

080004cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <MemManage_Handler+0x4>

080004d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <BusFault_Handler+0x4>

080004d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <UsageFault_Handler+0x4>

080004de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr

080004f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr

08000502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000506:	f000 f87f 	bl	8000608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <TIM2_IRQHandler+0x10>)
 8000516:	f000 ffdb 	bl	80014d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000060 	.word	0x20000060

08000524 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000530:	f7ff fff8 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000534:	480b      	ldr	r0, [pc, #44]	; (8000564 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000536:	490c      	ldr	r1, [pc, #48]	; (8000568 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000538:	4a0c      	ldr	r2, [pc, #48]	; (800056c <LoopFillZerobss+0x16>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054a:	4a09      	ldr	r2, [pc, #36]	; (8000570 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800054c:	4c09      	ldr	r4, [pc, #36]	; (8000574 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800055a:	f001 fdc7 	bl	80020ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055e:	f7ff fe15 	bl	800018c <main>
  bx lr
 8000562:	4770      	bx	lr
  ldr r0, =_sdata
 8000564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000568:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 800056c:	08002188 	.word	0x08002188
  ldr r2, =_sbss
 8000570:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000574:	200000fc 	.word	0x200000fc

08000578 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000578:	e7fe      	b.n	8000578 <ADC1_2_IRQHandler>
	...

0800057c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <HAL_Init+0x28>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <HAL_Init+0x28>)
 8000586:	f043 0310 	orr.w	r3, r3, #16
 800058a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058c:	2003      	movs	r0, #3
 800058e:	f000 f923 	bl	80007d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000592:	200f      	movs	r0, #15
 8000594:	f000 f808 	bl	80005a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000598:	f7ff ff3c 	bl	8000414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40022000 	.word	0x40022000

080005a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_InitTick+0x54>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <HAL_InitTick+0x58>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005be:	fbb3 f3f1 	udiv	r3, r3, r1
 80005c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f93b 	bl	8000842 <HAL_SYSTICK_Config>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005d2:	2301      	movs	r3, #1
 80005d4:	e00e      	b.n	80005f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b0f      	cmp	r3, #15
 80005da:	d80a      	bhi.n	80005f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005dc:	2200      	movs	r2, #0
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	f04f 30ff 	mov.w	r0, #4294967295
 80005e4:	f000 f903 	bl	80007ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e8:	4a06      	ldr	r2, [pc, #24]	; (8000604 <HAL_InitTick+0x5c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ee:	2300      	movs	r3, #0
 80005f0:	e000      	b.n	80005f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000014 	.word	0x20000014
 8000600:	2000001c 	.word	0x2000001c
 8000604:	20000018 	.word	0x20000018

08000608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <HAL_IncTick+0x1c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <HAL_IncTick+0x20>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4413      	add	r3, r2
 8000618:	4a03      	ldr	r2, [pc, #12]	; (8000628 <HAL_IncTick+0x20>)
 800061a:	6013      	str	r3, [r2, #0]
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	2000001c 	.word	0x2000001c
 8000628:	200000a8 	.word	0x200000a8

0800062c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  return uwTick;
 8000630:	4b02      	ldr	r3, [pc, #8]	; (800063c <HAL_GetTick+0x10>)
 8000632:	681b      	ldr	r3, [r3, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	200000a8 	.word	0x200000a8

08000640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f003 0307 	and.w	r3, r3, #7
 800064e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <__NVIC_SetPriorityGrouping+0x44>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800065c:	4013      	ands	r3, r2
 800065e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800066c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000672:	4a04      	ldr	r2, [pc, #16]	; (8000684 <__NVIC_SetPriorityGrouping+0x44>)
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	60d3      	str	r3, [r2, #12]
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <__NVIC_GetPriorityGrouping+0x18>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	f003 0307 	and.w	r3, r3, #7
}
 8000696:	4618      	mov	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	db0b      	blt.n	80006ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f003 021f 	and.w	r2, r3, #31
 80006bc:	4906      	ldr	r1, [pc, #24]	; (80006d8 <__NVIC_EnableIRQ+0x34>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	095b      	lsrs	r3, r3, #5
 80006c4:	2001      	movs	r0, #1
 80006c6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	e000e100 	.word	0xe000e100

080006dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db0a      	blt.n	8000706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	490c      	ldr	r1, [pc, #48]	; (8000728 <__NVIC_SetPriority+0x4c>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	0112      	lsls	r2, r2, #4
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	440b      	add	r3, r1
 8000700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000704:	e00a      	b.n	800071c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4908      	ldr	r1, [pc, #32]	; (800072c <__NVIC_SetPriority+0x50>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f003 030f 	and.w	r3, r3, #15
 8000712:	3b04      	subs	r3, #4
 8000714:	0112      	lsls	r2, r2, #4
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	440b      	add	r3, r1
 800071a:	761a      	strb	r2, [r3, #24]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000e100 	.word	0xe000e100
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000730:	b480      	push	{r7}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	f1c3 0307 	rsb	r3, r3, #7
 800074a:	2b04      	cmp	r3, #4
 800074c:	bf28      	it	cs
 800074e:	2304      	movcs	r3, #4
 8000750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3304      	adds	r3, #4
 8000756:	2b06      	cmp	r3, #6
 8000758:	d902      	bls.n	8000760 <NVIC_EncodePriority+0x30>
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3b03      	subs	r3, #3
 800075e:	e000      	b.n	8000762 <NVIC_EncodePriority+0x32>
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	f04f 32ff 	mov.w	r2, #4294967295
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43da      	mvns	r2, r3
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	401a      	ands	r2, r3
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000778:	f04f 31ff 	mov.w	r1, #4294967295
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	43d9      	mvns	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	4313      	orrs	r3, r2
         );
}
 800078a:	4618      	mov	r0, r3
 800078c:	3724      	adds	r7, #36	; 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a4:	d301      	bcc.n	80007aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00f      	b.n	80007ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <SysTick_Config+0x40>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b2:	210f      	movs	r1, #15
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295
 80007b8:	f7ff ff90 	bl	80006dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <SysTick_Config+0x40>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <SysTick_Config+0x40>)
 80007c4:	2207      	movs	r2, #7
 80007c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	e000e010 	.word	0xe000e010

080007d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff2d 	bl	8000640 <__NVIC_SetPriorityGrouping>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b086      	sub	sp, #24
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000800:	f7ff ff42 	bl	8000688 <__NVIC_GetPriorityGrouping>
 8000804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	68b9      	ldr	r1, [r7, #8]
 800080a:	6978      	ldr	r0, [r7, #20]
 800080c:	f7ff ff90 	bl	8000730 <NVIC_EncodePriority>
 8000810:	4602      	mov	r2, r0
 8000812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff5f 	bl	80006dc <__NVIC_SetPriority>
}
 800081e:	bf00      	nop
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff35 	bl	80006a4 <__NVIC_EnableIRQ>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b082      	sub	sp, #8
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff ffa2 	bl	8000794 <SysTick_Config>
 8000850:	4603      	mov	r3, r0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800085c:	b480      	push	{r7}
 800085e:	b08b      	sub	sp, #44	; 0x2c
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800086e:	e148      	b.n	8000b02 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000870:	2201      	movs	r2, #1
 8000872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	69fa      	ldr	r2, [r7, #28]
 8000880:	4013      	ands	r3, r2
 8000882:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	429a      	cmp	r2, r3
 800088a:	f040 8137 	bne.w	8000afc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	4aa3      	ldr	r2, [pc, #652]	; (8000b20 <HAL_GPIO_Init+0x2c4>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d05e      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 8000898:	4aa1      	ldr	r2, [pc, #644]	; (8000b20 <HAL_GPIO_Init+0x2c4>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d875      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 800089e:	4aa1      	ldr	r2, [pc, #644]	; (8000b24 <HAL_GPIO_Init+0x2c8>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d058      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008a4:	4a9f      	ldr	r2, [pc, #636]	; (8000b24 <HAL_GPIO_Init+0x2c8>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d86f      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008aa:	4a9f      	ldr	r2, [pc, #636]	; (8000b28 <HAL_GPIO_Init+0x2cc>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d052      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008b0:	4a9d      	ldr	r2, [pc, #628]	; (8000b28 <HAL_GPIO_Init+0x2cc>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d869      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008b6:	4a9d      	ldr	r2, [pc, #628]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d04c      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008bc:	4a9b      	ldr	r2, [pc, #620]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d863      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008c2:	4a9b      	ldr	r2, [pc, #620]	; (8000b30 <HAL_GPIO_Init+0x2d4>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d046      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008c8:	4a99      	ldr	r2, [pc, #612]	; (8000b30 <HAL_GPIO_Init+0x2d4>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d85d      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008ce:	2b12      	cmp	r3, #18
 80008d0:	d82a      	bhi.n	8000928 <HAL_GPIO_Init+0xcc>
 80008d2:	2b12      	cmp	r3, #18
 80008d4:	d859      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008d6:	a201      	add	r2, pc, #4	; (adr r2, 80008dc <HAL_GPIO_Init+0x80>)
 80008d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008dc:	08000957 	.word	0x08000957
 80008e0:	08000931 	.word	0x08000931
 80008e4:	08000943 	.word	0x08000943
 80008e8:	08000985 	.word	0x08000985
 80008ec:	0800098b 	.word	0x0800098b
 80008f0:	0800098b 	.word	0x0800098b
 80008f4:	0800098b 	.word	0x0800098b
 80008f8:	0800098b 	.word	0x0800098b
 80008fc:	0800098b 	.word	0x0800098b
 8000900:	0800098b 	.word	0x0800098b
 8000904:	0800098b 	.word	0x0800098b
 8000908:	0800098b 	.word	0x0800098b
 800090c:	0800098b 	.word	0x0800098b
 8000910:	0800098b 	.word	0x0800098b
 8000914:	0800098b 	.word	0x0800098b
 8000918:	0800098b 	.word	0x0800098b
 800091c:	0800098b 	.word	0x0800098b
 8000920:	08000939 	.word	0x08000939
 8000924:	0800094d 	.word	0x0800094d
 8000928:	4a82      	ldr	r2, [pc, #520]	; (8000b34 <HAL_GPIO_Init+0x2d8>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d013      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800092e:	e02c      	b.n	800098a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	623b      	str	r3, [r7, #32]
          break;
 8000936:	e029      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	3304      	adds	r3, #4
 800093e:	623b      	str	r3, [r7, #32]
          break;
 8000940:	e024      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	3308      	adds	r3, #8
 8000948:	623b      	str	r3, [r7, #32]
          break;
 800094a:	e01f      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	330c      	adds	r3, #12
 8000952:	623b      	str	r3, [r7, #32]
          break;
 8000954:	e01a      	b.n	800098c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d102      	bne.n	8000964 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800095e:	2304      	movs	r3, #4
 8000960:	623b      	str	r3, [r7, #32]
          break;
 8000962:	e013      	b.n	800098c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d105      	bne.n	8000978 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800096c:	2308      	movs	r3, #8
 800096e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	611a      	str	r2, [r3, #16]
          break;
 8000976:	e009      	b.n	800098c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000978:	2308      	movs	r3, #8
 800097a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	69fa      	ldr	r2, [r7, #28]
 8000980:	615a      	str	r2, [r3, #20]
          break;
 8000982:	e003      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
          break;
 8000988:	e000      	b.n	800098c <HAL_GPIO_Init+0x130>
          break;
 800098a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	2bff      	cmp	r3, #255	; 0xff
 8000990:	d801      	bhi.n	8000996 <HAL_GPIO_Init+0x13a>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	e001      	b.n	800099a <HAL_GPIO_Init+0x13e>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3304      	adds	r3, #4
 800099a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	2bff      	cmp	r3, #255	; 0xff
 80009a0:	d802      	bhi.n	80009a8 <HAL_GPIO_Init+0x14c>
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	e002      	b.n	80009ae <HAL_GPIO_Init+0x152>
 80009a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009aa:	3b08      	subs	r3, #8
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	210f      	movs	r1, #15
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	fa01 f303 	lsl.w	r3, r1, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	401a      	ands	r2, r3
 80009c0:	6a39      	ldr	r1, [r7, #32]
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	fa01 f303 	lsl.w	r3, r1, r3
 80009c8:	431a      	orrs	r2, r3
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 8090 	beq.w	8000afc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009dc:	4b56      	ldr	r3, [pc, #344]	; (8000b38 <HAL_GPIO_Init+0x2dc>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a55      	ldr	r2, [pc, #340]	; (8000b38 <HAL_GPIO_Init+0x2dc>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b53      	ldr	r3, [pc, #332]	; (8000b38 <HAL_GPIO_Init+0x2dc>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009f4:	4a51      	ldr	r2, [pc, #324]	; (8000b3c <HAL_GPIO_Init+0x2e0>)
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	f003 0303 	and.w	r3, r3, #3
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	220f      	movs	r2, #15
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4013      	ands	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a49      	ldr	r2, [pc, #292]	; (8000b40 <HAL_GPIO_Init+0x2e4>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d00d      	beq.n	8000a3c <HAL_GPIO_Init+0x1e0>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a48      	ldr	r2, [pc, #288]	; (8000b44 <HAL_GPIO_Init+0x2e8>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d007      	beq.n	8000a38 <HAL_GPIO_Init+0x1dc>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a47      	ldr	r2, [pc, #284]	; (8000b48 <HAL_GPIO_Init+0x2ec>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d101      	bne.n	8000a34 <HAL_GPIO_Init+0x1d8>
 8000a30:	2302      	movs	r3, #2
 8000a32:	e004      	b.n	8000a3e <HAL_GPIO_Init+0x1e2>
 8000a34:	2303      	movs	r3, #3
 8000a36:	e002      	b.n	8000a3e <HAL_GPIO_Init+0x1e2>
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e000      	b.n	8000a3e <HAL_GPIO_Init+0x1e2>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a40:	f002 0203 	and.w	r2, r2, #3
 8000a44:	0092      	lsls	r2, r2, #2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a4e:	493b      	ldr	r1, [pc, #236]	; (8000b3c <HAL_GPIO_Init+0x2e0>)
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	089b      	lsrs	r3, r3, #2
 8000a54:	3302      	adds	r3, #2
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d006      	beq.n	8000a76 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a68:	4b38      	ldr	r3, [pc, #224]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000a6a:	689a      	ldr	r2, [r3, #8]
 8000a6c:	4937      	ldr	r1, [pc, #220]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	608b      	str	r3, [r1, #8]
 8000a74:	e006      	b.n	8000a84 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a76:	4b35      	ldr	r3, [pc, #212]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000a78:	689a      	ldr	r2, [r3, #8]
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	4933      	ldr	r1, [pc, #204]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000a80:	4013      	ands	r3, r2
 8000a82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d006      	beq.n	8000a9e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a90:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000a92:	68da      	ldr	r2, [r3, #12]
 8000a94:	492d      	ldr	r1, [pc, #180]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	60cb      	str	r3, [r1, #12]
 8000a9c:	e006      	b.n	8000aac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a9e:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000aa0:	68da      	ldr	r2, [r3, #12]
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	4929      	ldr	r1, [pc, #164]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d006      	beq.n	8000ac6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ab8:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000aba:	685a      	ldr	r2, [r3, #4]
 8000abc:	4923      	ldr	r1, [pc, #140]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	604b      	str	r3, [r1, #4]
 8000ac4:	e006      	b.n	8000ad4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ac6:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	43db      	mvns	r3, r3
 8000ace:	491f      	ldr	r1, [pc, #124]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d006      	beq.n	8000aee <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4919      	ldr	r1, [pc, #100]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	600b      	str	r3, [r1, #0]
 8000aec:	e006      	b.n	8000afc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	43db      	mvns	r3, r3
 8000af6:	4915      	ldr	r1, [pc, #84]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000af8:	4013      	ands	r3, r2
 8000afa:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	3301      	adds	r3, #1
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	fa22 f303 	lsr.w	r3, r2, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	f47f aeaf 	bne.w	8000870 <HAL_GPIO_Init+0x14>
  }
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	372c      	adds	r7, #44	; 0x2c
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	10320000 	.word	0x10320000
 8000b24:	10310000 	.word	0x10310000
 8000b28:	10220000 	.word	0x10220000
 8000b2c:	10210000 	.word	0x10210000
 8000b30:	10120000 	.word	0x10120000
 8000b34:	10110000 	.word	0x10110000
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010000 	.word	0x40010000
 8000b40:	40010800 	.word	0x40010800
 8000b44:	40010c00 	.word	0x40010c00
 8000b48:	40011000 	.word	0x40011000
 8000b4c:	40010400 	.word	0x40010400

08000b50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689a      	ldr	r2, [r3, #8]
 8000b60:	887b      	ldrh	r3, [r7, #2]
 8000b62:	4013      	ands	r3, r2
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d002      	beq.n	8000b6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	73fb      	strb	r3, [r7, #15]
 8000b6c:	e001      	b.n	8000b72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr

08000b7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	807b      	strh	r3, [r7, #2]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b8e:	787b      	ldrb	r3, [r7, #1]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d003      	beq.n	8000b9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b94:	887a      	ldrh	r2, [r7, #2]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b9a:	e003      	b.n	8000ba4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	041a      	lsls	r2, r3, #16
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	611a      	str	r2, [r3, #16]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b085      	sub	sp, #20
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bc0:	887a      	ldrh	r2, [r7, #2]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	041a      	lsls	r2, r3, #16
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	400b      	ands	r3, r1
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	611a      	str	r2, [r3, #16]
}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e26c      	b.n	80010cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f000 8087 	beq.w	8000d0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c00:	4b92      	ldr	r3, [pc, #584]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 030c 	and.w	r3, r3, #12
 8000c08:	2b04      	cmp	r3, #4
 8000c0a:	d00c      	beq.n	8000c26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c0c:	4b8f      	ldr	r3, [pc, #572]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f003 030c 	and.w	r3, r3, #12
 8000c14:	2b08      	cmp	r3, #8
 8000c16:	d112      	bne.n	8000c3e <HAL_RCC_OscConfig+0x5e>
 8000c18:	4b8c      	ldr	r3, [pc, #560]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c24:	d10b      	bne.n	8000c3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c26:	4b89      	ldr	r3, [pc, #548]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d06c      	beq.n	8000d0c <HAL_RCC_OscConfig+0x12c>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d168      	bne.n	8000d0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e246      	b.n	80010cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c46:	d106      	bne.n	8000c56 <HAL_RCC_OscConfig+0x76>
 8000c48:	4b80      	ldr	r3, [pc, #512]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a7f      	ldr	r2, [pc, #508]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c52:	6013      	str	r3, [r2, #0]
 8000c54:	e02e      	b.n	8000cb4 <HAL_RCC_OscConfig+0xd4>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d10c      	bne.n	8000c78 <HAL_RCC_OscConfig+0x98>
 8000c5e:	4b7b      	ldr	r3, [pc, #492]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a7a      	ldr	r2, [pc, #488]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	4b78      	ldr	r3, [pc, #480]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a77      	ldr	r2, [pc, #476]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	e01d      	b.n	8000cb4 <HAL_RCC_OscConfig+0xd4>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c80:	d10c      	bne.n	8000c9c <HAL_RCC_OscConfig+0xbc>
 8000c82:	4b72      	ldr	r3, [pc, #456]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a71      	ldr	r2, [pc, #452]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	4b6f      	ldr	r3, [pc, #444]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a6e      	ldr	r2, [pc, #440]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	e00b      	b.n	8000cb4 <HAL_RCC_OscConfig+0xd4>
 8000c9c:	4b6b      	ldr	r3, [pc, #428]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a6a      	ldr	r2, [pc, #424]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	4b68      	ldr	r3, [pc, #416]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a67      	ldr	r2, [pc, #412]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d013      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cbc:	f7ff fcb6 	bl	800062c <HAL_GetTick>
 8000cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc2:	e008      	b.n	8000cd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc4:	f7ff fcb2 	bl	800062c <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b64      	cmp	r3, #100	; 0x64
 8000cd0:	d901      	bls.n	8000cd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e1fa      	b.n	80010cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd6:	4b5d      	ldr	r3, [pc, #372]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0f0      	beq.n	8000cc4 <HAL_RCC_OscConfig+0xe4>
 8000ce2:	e014      	b.n	8000d0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce4:	f7ff fca2 	bl	800062c <HAL_GetTick>
 8000ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cea:	e008      	b.n	8000cfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cec:	f7ff fc9e 	bl	800062c <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b64      	cmp	r3, #100	; 0x64
 8000cf8:	d901      	bls.n	8000cfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e1e6      	b.n	80010cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cfe:	4b53      	ldr	r3, [pc, #332]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1f0      	bne.n	8000cec <HAL_RCC_OscConfig+0x10c>
 8000d0a:	e000      	b.n	8000d0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d063      	beq.n	8000de2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d1a:	4b4c      	ldr	r3, [pc, #304]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 030c 	and.w	r3, r3, #12
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d00b      	beq.n	8000d3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d26:	4b49      	ldr	r3, [pc, #292]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 030c 	and.w	r3, r3, #12
 8000d2e:	2b08      	cmp	r3, #8
 8000d30:	d11c      	bne.n	8000d6c <HAL_RCC_OscConfig+0x18c>
 8000d32:	4b46      	ldr	r3, [pc, #280]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d116      	bne.n	8000d6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d3e:	4b43      	ldr	r3, [pc, #268]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d005      	beq.n	8000d56 <HAL_RCC_OscConfig+0x176>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d001      	beq.n	8000d56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e1ba      	b.n	80010cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d56:	4b3d      	ldr	r3, [pc, #244]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	4939      	ldr	r1, [pc, #228]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000d66:	4313      	orrs	r3, r2
 8000d68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d6a:	e03a      	b.n	8000de2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	691b      	ldr	r3, [r3, #16]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d020      	beq.n	8000db6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <HAL_RCC_OscConfig+0x270>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d7a:	f7ff fc57 	bl	800062c <HAL_GetTick>
 8000d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d80:	e008      	b.n	8000d94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d82:	f7ff fc53 	bl	800062c <HAL_GetTick>
 8000d86:	4602      	mov	r2, r0
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d901      	bls.n	8000d94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d90:	2303      	movs	r3, #3
 8000d92:	e19b      	b.n	80010cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d94:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d0f0      	beq.n	8000d82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da0:	4b2a      	ldr	r3, [pc, #168]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	4927      	ldr	r1, [pc, #156]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000db0:	4313      	orrs	r3, r2
 8000db2:	600b      	str	r3, [r1, #0]
 8000db4:	e015      	b.n	8000de2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000db6:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <HAL_RCC_OscConfig+0x270>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbc:	f7ff fc36 	bl	800062c <HAL_GetTick>
 8000dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dc4:	f7ff fc32 	bl	800062c <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e17a      	b.n	80010cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f0      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d03a      	beq.n	8000e64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d019      	beq.n	8000e2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <HAL_RCC_OscConfig+0x274>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dfc:	f7ff fc16 	bl	800062c <HAL_GetTick>
 8000e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e02:	e008      	b.n	8000e16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e04:	f7ff fc12 	bl	800062c <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e15a      	b.n	80010cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <HAL_RCC_OscConfig+0x26c>)
 8000e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0f0      	beq.n	8000e04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e22:	2001      	movs	r0, #1
 8000e24:	f000 fa9a 	bl	800135c <RCC_Delay>
 8000e28:	e01c      	b.n	8000e64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_RCC_OscConfig+0x274>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e30:	f7ff fbfc 	bl	800062c <HAL_GetTick>
 8000e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e36:	e00f      	b.n	8000e58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e38:	f7ff fbf8 	bl	800062c <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d908      	bls.n	8000e58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e140      	b.n	80010cc <HAL_RCC_OscConfig+0x4ec>
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	42420000 	.word	0x42420000
 8000e54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e58:	4b9e      	ldr	r3, [pc, #632]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1e9      	bne.n	8000e38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f000 80a6 	beq.w	8000fbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e72:	2300      	movs	r3, #0
 8000e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e76:	4b97      	ldr	r3, [pc, #604]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10d      	bne.n	8000e9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	4b94      	ldr	r3, [pc, #592]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	4a93      	ldr	r2, [pc, #588]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	61d3      	str	r3, [r2, #28]
 8000e8e:	4b91      	ldr	r3, [pc, #580]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9e:	4b8e      	ldr	r3, [pc, #568]	; (80010d8 <HAL_RCC_OscConfig+0x4f8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d118      	bne.n	8000edc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eaa:	4b8b      	ldr	r3, [pc, #556]	; (80010d8 <HAL_RCC_OscConfig+0x4f8>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a8a      	ldr	r2, [pc, #552]	; (80010d8 <HAL_RCC_OscConfig+0x4f8>)
 8000eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eb6:	f7ff fbb9 	bl	800062c <HAL_GetTick>
 8000eba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ebc:	e008      	b.n	8000ed0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ebe:	f7ff fbb5 	bl	800062c <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b64      	cmp	r3, #100	; 0x64
 8000eca:	d901      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e0fd      	b.n	80010cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed0:	4b81      	ldr	r3, [pc, #516]	; (80010d8 <HAL_RCC_OscConfig+0x4f8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0f0      	beq.n	8000ebe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d106      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x312>
 8000ee4:	4b7b      	ldr	r3, [pc, #492]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	4a7a      	ldr	r2, [pc, #488]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6213      	str	r3, [r2, #32]
 8000ef0:	e02d      	b.n	8000f4e <HAL_RCC_OscConfig+0x36e>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10c      	bne.n	8000f14 <HAL_RCC_OscConfig+0x334>
 8000efa:	4b76      	ldr	r3, [pc, #472]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000efc:	6a1b      	ldr	r3, [r3, #32]
 8000efe:	4a75      	ldr	r2, [pc, #468]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f00:	f023 0301 	bic.w	r3, r3, #1
 8000f04:	6213      	str	r3, [r2, #32]
 8000f06:	4b73      	ldr	r3, [pc, #460]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f08:	6a1b      	ldr	r3, [r3, #32]
 8000f0a:	4a72      	ldr	r2, [pc, #456]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f0c:	f023 0304 	bic.w	r3, r3, #4
 8000f10:	6213      	str	r3, [r2, #32]
 8000f12:	e01c      	b.n	8000f4e <HAL_RCC_OscConfig+0x36e>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	2b05      	cmp	r3, #5
 8000f1a:	d10c      	bne.n	8000f36 <HAL_RCC_OscConfig+0x356>
 8000f1c:	4b6d      	ldr	r3, [pc, #436]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	4a6c      	ldr	r2, [pc, #432]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6213      	str	r3, [r2, #32]
 8000f28:	4b6a      	ldr	r3, [pc, #424]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	4a69      	ldr	r2, [pc, #420]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6213      	str	r3, [r2, #32]
 8000f34:	e00b      	b.n	8000f4e <HAL_RCC_OscConfig+0x36e>
 8000f36:	4b67      	ldr	r3, [pc, #412]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	4a66      	ldr	r2, [pc, #408]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f3c:	f023 0301 	bic.w	r3, r3, #1
 8000f40:	6213      	str	r3, [r2, #32]
 8000f42:	4b64      	ldr	r3, [pc, #400]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f44:	6a1b      	ldr	r3, [r3, #32]
 8000f46:	4a63      	ldr	r2, [pc, #396]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f48:	f023 0304 	bic.w	r3, r3, #4
 8000f4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d015      	beq.n	8000f82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f56:	f7ff fb69 	bl	800062c <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f5c:	e00a      	b.n	8000f74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f5e:	f7ff fb65 	bl	800062c <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e0ab      	b.n	80010cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f74:	4b57      	ldr	r3, [pc, #348]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0ee      	beq.n	8000f5e <HAL_RCC_OscConfig+0x37e>
 8000f80:	e014      	b.n	8000fac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f82:	f7ff fb53 	bl	800062c <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f88:	e00a      	b.n	8000fa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f8a:	f7ff fb4f 	bl	800062c <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e095      	b.n	80010cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa0:	4b4c      	ldr	r3, [pc, #304]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1ee      	bne.n	8000f8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d105      	bne.n	8000fbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fb2:	4b48      	ldr	r3, [pc, #288]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a47      	ldr	r2, [pc, #284]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 8081 	beq.w	80010ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fc8:	4b42      	ldr	r3, [pc, #264]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 030c 	and.w	r3, r3, #12
 8000fd0:	2b08      	cmp	r3, #8
 8000fd2:	d061      	beq.n	8001098 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d146      	bne.n	800106a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fdc:	4b3f      	ldr	r3, [pc, #252]	; (80010dc <HAL_RCC_OscConfig+0x4fc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe2:	f7ff fb23 	bl	800062c <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe8:	e008      	b.n	8000ffc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fea:	f7ff fb1f 	bl	800062c <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e067      	b.n	80010cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ffc:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1f0      	bne.n	8000fea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001010:	d108      	bne.n	8001024 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001012:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	492d      	ldr	r1, [pc, #180]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8001020:	4313      	orrs	r3, r2
 8001022:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001024:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a19      	ldr	r1, [r3, #32]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001034:	430b      	orrs	r3, r1
 8001036:	4927      	ldr	r1, [pc, #156]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8001038:	4313      	orrs	r3, r2
 800103a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800103c:	4b27      	ldr	r3, [pc, #156]	; (80010dc <HAL_RCC_OscConfig+0x4fc>)
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001042:	f7ff faf3 	bl	800062c <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800104a:	f7ff faef 	bl	800062c <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e037      	b.n	80010cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0f0      	beq.n	800104a <HAL_RCC_OscConfig+0x46a>
 8001068:	e02f      	b.n	80010ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_RCC_OscConfig+0x4fc>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001070:	f7ff fadc 	bl	800062c <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001078:	f7ff fad8 	bl	800062c <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e020      	b.n	80010cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f0      	bne.n	8001078 <HAL_RCC_OscConfig+0x498>
 8001096:	e018      	b.n	80010ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69db      	ldr	r3, [r3, #28]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d101      	bne.n	80010a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e013      	b.n	80010cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d106      	bne.n	80010c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d001      	beq.n	80010ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40007000 	.word	0x40007000
 80010dc:	42420060 	.word	0x42420060

080010e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e0d0      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010f4:	4b6a      	ldr	r3, [pc, #424]	; (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d910      	bls.n	8001124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001102:	4b67      	ldr	r3, [pc, #412]	; (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 0207 	bic.w	r2, r3, #7
 800110a:	4965      	ldr	r1, [pc, #404]	; (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	4313      	orrs	r3, r2
 8001110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001112:	4b63      	ldr	r3, [pc, #396]	; (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d001      	beq.n	8001124 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e0b8      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d020      	beq.n	8001172 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800113c:	4b59      	ldr	r3, [pc, #356]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a58      	ldr	r2, [pc, #352]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001146:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001154:	4b53      	ldr	r3, [pc, #332]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	4a52      	ldr	r2, [pc, #328]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800115e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001160:	4b50      	ldr	r3, [pc, #320]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	494d      	ldr	r1, [pc, #308]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800116e:	4313      	orrs	r3, r2
 8001170:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d040      	beq.n	8001200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d107      	bne.n	8001196 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d115      	bne.n	80011be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e07f      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d107      	bne.n	80011ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800119e:	4b41      	ldr	r3, [pc, #260]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d109      	bne.n	80011be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e073      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ae:	4b3d      	ldr	r3, [pc, #244]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e06b      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011be:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f023 0203 	bic.w	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	4936      	ldr	r1, [pc, #216]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011d0:	f7ff fa2c 	bl	800062c <HAL_GetTick>
 80011d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d6:	e00a      	b.n	80011ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d8:	f7ff fa28 	bl	800062c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e053      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ee:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 020c 	and.w	r2, r3, #12
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d1eb      	bne.n	80011d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001200:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d210      	bcs.n	8001230 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120e:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 0207 	bic.w	r2, r3, #7
 8001216:	4922      	ldr	r1, [pc, #136]	; (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	4313      	orrs	r3, r2
 800121c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d001      	beq.n	8001230 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e032      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	4916      	ldr	r1, [pc, #88]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	4313      	orrs	r3, r2
 800124c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d009      	beq.n	800126e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	490e      	ldr	r1, [pc, #56]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	4313      	orrs	r3, r2
 800126c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800126e:	f000 f821 	bl	80012b4 <HAL_RCC_GetSysClockFreq>
 8001272:	4602      	mov	r2, r0
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	490a      	ldr	r1, [pc, #40]	; (80012a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001280:	5ccb      	ldrb	r3, [r1, r3]
 8001282:	fa22 f303 	lsr.w	r3, r2, r3
 8001286:	4a09      	ldr	r2, [pc, #36]	; (80012ac <HAL_RCC_ClockConfig+0x1cc>)
 8001288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_RCC_ClockConfig+0x1d0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f98a 	bl	80005a8 <HAL_InitTick>

  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40022000 	.word	0x40022000
 80012a4:	40021000 	.word	0x40021000
 80012a8:	0800215c 	.word	0x0800215c
 80012ac:	20000014 	.word	0x20000014
 80012b0:	20000018 	.word	0x20000018

080012b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <HAL_RCC_GetSysClockFreq+0x94>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d002      	beq.n	80012e4 <HAL_RCC_GetSysClockFreq+0x30>
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d003      	beq.n	80012ea <HAL_RCC_GetSysClockFreq+0x36>
 80012e2:	e027      	b.n	8001334 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_RCC_GetSysClockFreq+0x98>)
 80012e6:	613b      	str	r3, [r7, #16]
      break;
 80012e8:	e027      	b.n	800133a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	0c9b      	lsrs	r3, r3, #18
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	4a17      	ldr	r2, [pc, #92]	; (8001350 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012f4:	5cd3      	ldrb	r3, [r2, r3]
 80012f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d010      	beq.n	8001324 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_RCC_GetSysClockFreq+0x94>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	0c5b      	lsrs	r3, r3, #17
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	4a11      	ldr	r2, [pc, #68]	; (8001354 <HAL_RCC_GetSysClockFreq+0xa0>)
 800130e:	5cd3      	ldrb	r3, [r2, r3]
 8001310:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <HAL_RCC_GetSysClockFreq+0x98>)
 8001316:	fb02 f203 	mul.w	r2, r2, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	e004      	b.n	800132e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	613b      	str	r3, [r7, #16]
      break;
 8001332:	e002      	b.n	800133a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_RCC_GetSysClockFreq+0x98>)
 8001336:	613b      	str	r3, [r7, #16]
      break;
 8001338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800133a:	693b      	ldr	r3, [r7, #16]
}
 800133c:	4618      	mov	r0, r3
 800133e:	371c      	adds	r7, #28
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	007a1200 	.word	0x007a1200
 8001350:	0800216c 	.word	0x0800216c
 8001354:	0800217c 	.word	0x0800217c
 8001358:	003d0900 	.word	0x003d0900

0800135c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <RCC_Delay+0x34>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <RCC_Delay+0x38>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001378:	bf00      	nop
  }
  while (Delay --);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1e5a      	subs	r2, r3, #1
 800137e:	60fa      	str	r2, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f9      	bne.n	8001378 <RCC_Delay+0x1c>
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20000014 	.word	0x20000014
 8001394:	10624dd3 	.word	0x10624dd3

08001398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e041      	b.n	800142e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d106      	bne.n	80013c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff f85a 	bl	8000478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2202      	movs	r2, #2
 80013c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3304      	adds	r3, #4
 80013d4:	4619      	mov	r1, r3
 80013d6:	4610      	mov	r0, r2
 80013d8:	f000 fa56 	bl	8001888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b01      	cmp	r3, #1
 800144a:	d001      	beq.n	8001450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e035      	b.n	80014bc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2202      	movs	r2, #2
 8001454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a16      	ldr	r2, [pc, #88]	; (80014c8 <HAL_TIM_Base_Start_IT+0x90>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d009      	beq.n	8001486 <HAL_TIM_Base_Start_IT+0x4e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800147a:	d004      	beq.n	8001486 <HAL_TIM_Base_Start_IT+0x4e>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a12      	ldr	r2, [pc, #72]	; (80014cc <HAL_TIM_Base_Start_IT+0x94>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d111      	bne.n	80014aa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2b06      	cmp	r3, #6
 8001496:	d010      	beq.n	80014ba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 0201 	orr.w	r2, r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014a8:	e007      	b.n	80014ba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f042 0201 	orr.w	r2, r2, #1
 80014b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40012c00 	.word	0x40012c00
 80014cc:	40000400 	.word	0x40000400

080014d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d020      	beq.n	8001534 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d01b      	beq.n	8001534 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f06f 0202 	mvn.w	r2, #2
 8001504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f998 	bl	8001850 <HAL_TIM_IC_CaptureCallback>
 8001520:	e005      	b.n	800152e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f98b 	bl	800183e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 f99a 	bl	8001862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	2b00      	cmp	r3, #0
 800153c:	d020      	beq.n	8001580 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d01b      	beq.n	8001580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f06f 0204 	mvn.w	r2, #4
 8001550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2202      	movs	r2, #2
 8001556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f972 	bl	8001850 <HAL_TIM_IC_CaptureCallback>
 800156c:	e005      	b.n	800157a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f965 	bl	800183e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f974 	bl	8001862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d020      	beq.n	80015cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d01b      	beq.n	80015cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f06f 0208 	mvn.w	r2, #8
 800159c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2204      	movs	r2, #4
 80015a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f94c 	bl	8001850 <HAL_TIM_IC_CaptureCallback>
 80015b8:	e005      	b.n	80015c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f93f 	bl	800183e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f94e 	bl	8001862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	f003 0310 	and.w	r3, r3, #16
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d020      	beq.n	8001618 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d01b      	beq.n	8001618 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f06f 0210 	mvn.w	r2, #16
 80015e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2208      	movs	r2, #8
 80015ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f926 	bl	8001850 <HAL_TIM_IC_CaptureCallback>
 8001604:	e005      	b.n	8001612 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f919 	bl	800183e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f928 	bl	8001862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00c      	beq.n	800163c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d007      	beq.n	800163c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f06f 0201 	mvn.w	r2, #1
 8001634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7fe fed4 	bl	80003e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00c      	beq.n	8001660 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164c:	2b00      	cmp	r3, #0
 800164e:	d007      	beq.n	8001660 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 fa6f 	bl	8001b3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00c      	beq.n	8001684 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001670:	2b00      	cmp	r3, #0
 8001672:	d007      	beq.n	8001684 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800167c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f8f8 	bl	8001874 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00c      	beq.n	80016a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f003 0320 	and.w	r3, r3, #32
 8001694:	2b00      	cmp	r3, #0
 8001696:	d007      	beq.n	80016a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f06f 0220 	mvn.w	r2, #32
 80016a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 fa42 	bl	8001b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016a8:	bf00      	nop
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d101      	bne.n	80016cc <HAL_TIM_ConfigClockSource+0x1c>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e0b4      	b.n	8001836 <HAL_TIM_ConfigClockSource+0x186>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2202      	movs	r2, #2
 80016d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80016ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001704:	d03e      	beq.n	8001784 <HAL_TIM_ConfigClockSource+0xd4>
 8001706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800170a:	f200 8087 	bhi.w	800181c <HAL_TIM_ConfigClockSource+0x16c>
 800170e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001712:	f000 8086 	beq.w	8001822 <HAL_TIM_ConfigClockSource+0x172>
 8001716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800171a:	d87f      	bhi.n	800181c <HAL_TIM_ConfigClockSource+0x16c>
 800171c:	2b70      	cmp	r3, #112	; 0x70
 800171e:	d01a      	beq.n	8001756 <HAL_TIM_ConfigClockSource+0xa6>
 8001720:	2b70      	cmp	r3, #112	; 0x70
 8001722:	d87b      	bhi.n	800181c <HAL_TIM_ConfigClockSource+0x16c>
 8001724:	2b60      	cmp	r3, #96	; 0x60
 8001726:	d050      	beq.n	80017ca <HAL_TIM_ConfigClockSource+0x11a>
 8001728:	2b60      	cmp	r3, #96	; 0x60
 800172a:	d877      	bhi.n	800181c <HAL_TIM_ConfigClockSource+0x16c>
 800172c:	2b50      	cmp	r3, #80	; 0x50
 800172e:	d03c      	beq.n	80017aa <HAL_TIM_ConfigClockSource+0xfa>
 8001730:	2b50      	cmp	r3, #80	; 0x50
 8001732:	d873      	bhi.n	800181c <HAL_TIM_ConfigClockSource+0x16c>
 8001734:	2b40      	cmp	r3, #64	; 0x40
 8001736:	d058      	beq.n	80017ea <HAL_TIM_ConfigClockSource+0x13a>
 8001738:	2b40      	cmp	r3, #64	; 0x40
 800173a:	d86f      	bhi.n	800181c <HAL_TIM_ConfigClockSource+0x16c>
 800173c:	2b30      	cmp	r3, #48	; 0x30
 800173e:	d064      	beq.n	800180a <HAL_TIM_ConfigClockSource+0x15a>
 8001740:	2b30      	cmp	r3, #48	; 0x30
 8001742:	d86b      	bhi.n	800181c <HAL_TIM_ConfigClockSource+0x16c>
 8001744:	2b20      	cmp	r3, #32
 8001746:	d060      	beq.n	800180a <HAL_TIM_ConfigClockSource+0x15a>
 8001748:	2b20      	cmp	r3, #32
 800174a:	d867      	bhi.n	800181c <HAL_TIM_ConfigClockSource+0x16c>
 800174c:	2b00      	cmp	r3, #0
 800174e:	d05c      	beq.n	800180a <HAL_TIM_ConfigClockSource+0x15a>
 8001750:	2b10      	cmp	r3, #16
 8001752:	d05a      	beq.n	800180a <HAL_TIM_ConfigClockSource+0x15a>
 8001754:	e062      	b.n	800181c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	6899      	ldr	r1, [r3, #8]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	f000 f96a 	bl	8001a3e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001778:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	609a      	str	r2, [r3, #8]
      break;
 8001782:	e04f      	b.n	8001824 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f000 f953 	bl	8001a3e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017a6:	609a      	str	r2, [r3, #8]
      break;
 80017a8:	e03c      	b.n	8001824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6818      	ldr	r0, [r3, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	6859      	ldr	r1, [r3, #4]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	461a      	mov	r2, r3
 80017b8:	f000 f8ca 	bl	8001950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2150      	movs	r1, #80	; 0x50
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f921 	bl	8001a0a <TIM_ITRx_SetConfig>
      break;
 80017c8:	e02c      	b.n	8001824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	6859      	ldr	r1, [r3, #4]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	461a      	mov	r2, r3
 80017d8:	f000 f8e8 	bl	80019ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2160      	movs	r1, #96	; 0x60
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f911 	bl	8001a0a <TIM_ITRx_SetConfig>
      break;
 80017e8:	e01c      	b.n	8001824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6818      	ldr	r0, [r3, #0]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	6859      	ldr	r1, [r3, #4]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	461a      	mov	r2, r3
 80017f8:	f000 f8aa 	bl	8001950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2140      	movs	r1, #64	; 0x40
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f901 	bl	8001a0a <TIM_ITRx_SetConfig>
      break;
 8001808:	e00c      	b.n	8001824 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4619      	mov	r1, r3
 8001814:	4610      	mov	r0, r2
 8001816:	f000 f8f8 	bl	8001a0a <TIM_ITRx_SetConfig>
      break;
 800181a:	e003      	b.n	8001824 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
      break;
 8001820:	e000      	b.n	8001824 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001822:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001834:	7bfb      	ldrb	r3, [r7, #15]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
	...

08001888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a2b      	ldr	r2, [pc, #172]	; (8001948 <TIM_Base_SetConfig+0xc0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d007      	beq.n	80018b0 <TIM_Base_SetConfig+0x28>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a6:	d003      	beq.n	80018b0 <TIM_Base_SetConfig+0x28>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a28      	ldr	r2, [pc, #160]	; (800194c <TIM_Base_SetConfig+0xc4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d108      	bne.n	80018c2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	4313      	orrs	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a20      	ldr	r2, [pc, #128]	; (8001948 <TIM_Base_SetConfig+0xc0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d007      	beq.n	80018da <TIM_Base_SetConfig+0x52>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d0:	d003      	beq.n	80018da <TIM_Base_SetConfig+0x52>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a1d      	ldr	r2, [pc, #116]	; (800194c <TIM_Base_SetConfig+0xc4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d108      	bne.n	80018ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <TIM_Base_SetConfig+0xc0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d103      	bne.n	8001920 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	691a      	ldr	r2, [r3, #16]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d005      	beq.n	800193e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	f023 0201 	bic.w	r2, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	611a      	str	r2, [r3, #16]
  }
}
 800193e:	bf00      	nop
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	40012c00 	.word	0x40012c00
 800194c:	40000400 	.word	0x40000400

08001950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001950:	b480      	push	{r7}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	f023 0201 	bic.w	r2, r3, #1
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800197a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f023 030a 	bic.w	r3, r3, #10
 800198c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	4313      	orrs	r3, r2
 8001994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	621a      	str	r2, [r3, #32]
}
 80019a2:	bf00      	nop
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	f023 0210 	bic.w	r2, r3, #16
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80019d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	031b      	lsls	r3, r3, #12
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80019e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	621a      	str	r2, [r3, #32]
}
 8001a00:	bf00      	nop
 8001a02:	371c      	adds	r7, #28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b085      	sub	sp, #20
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	f043 0307 	orr.w	r3, r3, #7
 8001a2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	609a      	str	r2, [r3, #8]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b087      	sub	sp, #28
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	021a      	lsls	r2, r3, #8
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	431a      	orrs	r2, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	609a      	str	r2, [r3, #8]
}
 8001a72:	bf00      	nop
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e041      	b.n	8001b18 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d009      	beq.n	8001aec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae0:	d004      	beq.n	8001aec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a10      	ldr	r2, [pc, #64]	; (8001b28 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d10c      	bne.n	8001b06 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001af2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40012c00 	.word	0x40012c00
 8001b28:	40000400 	.word	0x40000400

08001b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <traffic_double_display>:
 *      Author: thuyh
 */

#include "Traffic_light.h"
void traffic_double_display(GPIO_TypeDef * GPIOx1, uint16_t LED_RED1, uint16_t LED_YELLOW1, uint16_t LED_GREEN1,
                            GPIO_TypeDef * GPIOx2, uint16_t LED_RED2, uint16_t LED_YELLOW2, uint16_t LED_GREEN2, int status) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	4608      	mov	r0, r1
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4603      	mov	r3, r0
 8001b60:	817b      	strh	r3, [r7, #10]
 8001b62:	460b      	mov	r3, r1
 8001b64:	813b      	strh	r3, [r7, #8]
 8001b66:	4613      	mov	r3, r2
 8001b68:	80fb      	strh	r3, [r7, #6]
 8001b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	2b0e      	cmp	r3, #14
 8001b70:	f200 80be 	bhi.w	8001cf0 <traffic_double_display+0x1a0>
 8001b74:	a201      	add	r2, pc, #4	; (adr r2, 8001b7c <traffic_double_display+0x2c>)
 8001b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7a:	bf00      	nop
 8001b7c:	08001c41 	.word	0x08001c41
 8001b80:	08001bb9 	.word	0x08001bb9
 8001b84:	08001bdb 	.word	0x08001bdb
 8001b88:	08001bfd 	.word	0x08001bfd
 8001b8c:	08001c1f 	.word	0x08001c1f
 8001b90:	08001c8b 	.word	0x08001c8b
 8001b94:	08001cad 	.word	0x08001cad
 8001b98:	08001ccf 	.word	0x08001ccf
 8001b9c:	08001cf1 	.word	0x08001cf1
 8001ba0:	08001cf1 	.word	0x08001cf1
 8001ba4:	08001cf1 	.word	0x08001cf1
 8001ba8:	08001bb9 	.word	0x08001bb9
 8001bac:	08001bdb 	.word	0x08001bdb
 8001bb0:	08001bfd 	.word	0x08001bfd
 8001bb4:	08001c1f 	.word	0x08001c1f
    switch(status) {
        case GREEN_RED:
        case MAN_GREEN_RED:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, GREEN);
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	893a      	ldrh	r2, [r7, #8]
 8001bbc:	8979      	ldrh	r1, [r7, #10]
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	9000      	str	r0, [sp, #0]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f000 f8be 	bl	8001d44 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
 8001bc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bca:	8c3a      	ldrh	r2, [r7, #32]
 8001bcc:	8bb9      	ldrh	r1, [r7, #28]
 8001bce:	2000      	movs	r0, #0
 8001bd0:	9000      	str	r0, [sp, #0]
 8001bd2:	69b8      	ldr	r0, [r7, #24]
 8001bd4:	f000 f8b6 	bl	8001d44 <traffic_display>
            break;
 8001bd8:	e0af      	b.n	8001d3a <traffic_double_display+0x1ea>
        case YELLOW_RED:
        case MAN_YELLOW_RED:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, YELLOW);
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	893a      	ldrh	r2, [r7, #8]
 8001bde:	8979      	ldrh	r1, [r7, #10]
 8001be0:	2001      	movs	r0, #1
 8001be2:	9000      	str	r0, [sp, #0]
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 f8ad 	bl	8001d44 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
 8001bea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bec:	8c3a      	ldrh	r2, [r7, #32]
 8001bee:	8bb9      	ldrh	r1, [r7, #28]
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	9000      	str	r0, [sp, #0]
 8001bf4:	69b8      	ldr	r0, [r7, #24]
 8001bf6:	f000 f8a5 	bl	8001d44 <traffic_display>
            break;
 8001bfa:	e09e      	b.n	8001d3a <traffic_double_display+0x1ea>
        case RED_GREEN:
        case MAN_RED_GREEN:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	893a      	ldrh	r2, [r7, #8]
 8001c00:	8979      	ldrh	r1, [r7, #10]
 8001c02:	2000      	movs	r0, #0
 8001c04:	9000      	str	r0, [sp, #0]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f89c 	bl	8001d44 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, GREEN);
 8001c0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c0e:	8c3a      	ldrh	r2, [r7, #32]
 8001c10:	8bb9      	ldrh	r1, [r7, #28]
 8001c12:	2002      	movs	r0, #2
 8001c14:	9000      	str	r0, [sp, #0]
 8001c16:	69b8      	ldr	r0, [r7, #24]
 8001c18:	f000 f894 	bl	8001d44 <traffic_display>
            break;
 8001c1c:	e08d      	b.n	8001d3a <traffic_double_display+0x1ea>
        case RED_YELLOW:
        case MAN_RED_YELLOW:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	893a      	ldrh	r2, [r7, #8]
 8001c22:	8979      	ldrh	r1, [r7, #10]
 8001c24:	2000      	movs	r0, #0
 8001c26:	9000      	str	r0, [sp, #0]
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 f88b 	bl	8001d44 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, YELLOW);
 8001c2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c30:	8c3a      	ldrh	r2, [r7, #32]
 8001c32:	8bb9      	ldrh	r1, [r7, #28]
 8001c34:	2001      	movs	r0, #1
 8001c36:	9000      	str	r0, [sp, #0]
 8001c38:	69b8      	ldr	r0, [r7, #24]
 8001c3a:	f000 f883 	bl	8001d44 <traffic_display>
            break;
 8001c3e:	e07c      	b.n	8001d3a <traffic_double_display+0x1ea>
        case INIT:
            HAL_GPIO_WritePin(GPIOx1, LED_RED1, RESET);
 8001c40:	897b      	ldrh	r3, [r7, #10]
 8001c42:	2200      	movs	r2, #0
 8001c44:	4619      	mov	r1, r3
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f7fe ff99 	bl	8000b7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_YELLOW1, RESET);
 8001c4c:	893b      	ldrh	r3, [r7, #8]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	4619      	mov	r1, r3
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f7fe ff93 	bl	8000b7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_GREEN1, RESET);
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f7fe ff8d 	bl	8000b7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_RED2, RESET);
 8001c64:	8bbb      	ldrh	r3, [r7, #28]
 8001c66:	2200      	movs	r2, #0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	69b8      	ldr	r0, [r7, #24]
 8001c6c:	f7fe ff87 	bl	8000b7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_YELLOW2, RESET);
 8001c70:	8c3b      	ldrh	r3, [r7, #32]
 8001c72:	2200      	movs	r2, #0
 8001c74:	4619      	mov	r1, r3
 8001c76:	69b8      	ldr	r0, [r7, #24]
 8001c78:	f7fe ff81 	bl	8000b7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_GREEN2, RESET);
 8001c7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c7e:	2200      	movs	r2, #0
 8001c80:	4619      	mov	r1, r3
 8001c82:	69b8      	ldr	r0, [r7, #24]
 8001c84:	f7fe ff7b 	bl	8000b7e <HAL_GPIO_WritePin>
            break;
 8001c88:	e057      	b.n	8001d3a <traffic_double_display+0x1ea>
        case SET_TIME_RED:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	893a      	ldrh	r2, [r7, #8]
 8001c8e:	8979      	ldrh	r1, [r7, #10]
 8001c90:	2000      	movs	r0, #0
 8001c92:	9000      	str	r0, [sp, #0]
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 f855 	bl	8001d44 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
 8001c9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c9c:	8c3a      	ldrh	r2, [r7, #32]
 8001c9e:	8bb9      	ldrh	r1, [r7, #28]
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	9000      	str	r0, [sp, #0]
 8001ca4:	69b8      	ldr	r0, [r7, #24]
 8001ca6:	f000 f84d 	bl	8001d44 <traffic_display>
            break;
 8001caa:	e046      	b.n	8001d3a <traffic_double_display+0x1ea>

        case SET_TIME_YELLOW:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, YELLOW);
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	893a      	ldrh	r2, [r7, #8]
 8001cb0:	8979      	ldrh	r1, [r7, #10]
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	9000      	str	r0, [sp, #0]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f844 	bl	8001d44 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, YELLOW);
 8001cbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cbe:	8c3a      	ldrh	r2, [r7, #32]
 8001cc0:	8bb9      	ldrh	r1, [r7, #28]
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	9000      	str	r0, [sp, #0]
 8001cc6:	69b8      	ldr	r0, [r7, #24]
 8001cc8:	f000 f83c 	bl	8001d44 <traffic_display>
            break;
 8001ccc:	e035      	b.n	8001d3a <traffic_double_display+0x1ea>

        case SET_TIME_GREEN:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, GREEN);
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	893a      	ldrh	r2, [r7, #8]
 8001cd2:	8979      	ldrh	r1, [r7, #10]
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	9000      	str	r0, [sp, #0]
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 f833 	bl	8001d44 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, GREEN);
 8001cde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ce0:	8c3a      	ldrh	r2, [r7, #32]
 8001ce2:	8bb9      	ldrh	r1, [r7, #28]
 8001ce4:	2002      	movs	r0, #2
 8001ce6:	9000      	str	r0, [sp, #0]
 8001ce8:	69b8      	ldr	r0, [r7, #24]
 8001cea:	f000 f82b 	bl	8001d44 <traffic_display>
            break;
 8001cee:	e024      	b.n	8001d3a <traffic_double_display+0x1ea>

        default:
            HAL_GPIO_WritePin(GPIOx1, LED_RED1, GPIO_PIN_SET);
 8001cf0:	897b      	ldrh	r3, [r7, #10]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f7fe ff41 	bl	8000b7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_YELLOW1, GPIO_PIN_SET);
 8001cfc:	893b      	ldrh	r3, [r7, #8]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	4619      	mov	r1, r3
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f7fe ff3b 	bl	8000b7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_GREEN1, GPIO_PIN_SET);
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f7fe ff35 	bl	8000b7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_RED2, GPIO_PIN_SET);
 8001d14:	8bbb      	ldrh	r3, [r7, #28]
 8001d16:	2201      	movs	r2, #1
 8001d18:	4619      	mov	r1, r3
 8001d1a:	69b8      	ldr	r0, [r7, #24]
 8001d1c:	f7fe ff2f 	bl	8000b7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_YELLOW2, GPIO_PIN_SET);
 8001d20:	8c3b      	ldrh	r3, [r7, #32]
 8001d22:	2201      	movs	r2, #1
 8001d24:	4619      	mov	r1, r3
 8001d26:	69b8      	ldr	r0, [r7, #24]
 8001d28:	f7fe ff29 	bl	8000b7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_GREEN2, GPIO_PIN_SET);
 8001d2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4619      	mov	r1, r3
 8001d32:	69b8      	ldr	r0, [r7, #24]
 8001d34:	f7fe ff23 	bl	8000b7e <HAL_GPIO_WritePin>
        	break;
 8001d38:	bf00      	nop
    }
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop

08001d44 <traffic_display>:
void traffic_display(GPIO_TypeDef * GPIOx, uint16_t LED_RED, uint16_t LED_YELLOW, uint16_t LED_GREEN, State type) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	4608      	mov	r0, r1
 8001d4e:	4611      	mov	r1, r2
 8001d50:	461a      	mov	r2, r3
 8001d52:	4603      	mov	r3, r0
 8001d54:	817b      	strh	r3, [r7, #10]
 8001d56:	460b      	mov	r3, r1
 8001d58:	813b      	strh	r3, [r7, #8]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	80fb      	strh	r3, [r7, #6]
    switch(type) {
 8001d5e:	7e3b      	ldrb	r3, [r7, #24]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d02c      	beq.n	8001dbe <traffic_display+0x7a>
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	dc3d      	bgt.n	8001de4 <traffic_display+0xa0>
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <traffic_display+0x2e>
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d013      	beq.n	8001d98 <traffic_display+0x54>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_RESET);
            break;
        default:
            break;
 8001d70:	e038      	b.n	8001de4 <traffic_display+0xa0>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_RESET);
 8001d72:	897b      	ldrh	r3, [r7, #10]
 8001d74:	2200      	movs	r2, #0
 8001d76:	4619      	mov	r1, r3
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f7fe ff00 	bl	8000b7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_SET);
 8001d7e:	893b      	ldrh	r3, [r7, #8]
 8001d80:	2201      	movs	r2, #1
 8001d82:	4619      	mov	r1, r3
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f7fe fefa 	bl	8000b7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_SET);
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	4619      	mov	r1, r3
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f7fe fef4 	bl	8000b7e <HAL_GPIO_WritePin>
            break;
 8001d96:	e026      	b.n	8001de6 <traffic_display+0xa2>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_SET);
 8001d98:	897b      	ldrh	r3, [r7, #10]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f7fe feed 	bl	8000b7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_RESET);
 8001da4:	893b      	ldrh	r3, [r7, #8]
 8001da6:	2200      	movs	r2, #0
 8001da8:	4619      	mov	r1, r3
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f7fe fee7 	bl	8000b7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_SET);
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	2201      	movs	r2, #1
 8001db4:	4619      	mov	r1, r3
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f7fe fee1 	bl	8000b7e <HAL_GPIO_WritePin>
            break;
 8001dbc:	e013      	b.n	8001de6 <traffic_display+0xa2>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_SET);
 8001dbe:	897b      	ldrh	r3, [r7, #10]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f7fe feda 	bl	8000b7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_SET);
 8001dca:	893b      	ldrh	r3, [r7, #8]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4619      	mov	r1, r3
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f7fe fed4 	bl	8000b7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_RESET);
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f7fe fece 	bl	8000b7e <HAL_GPIO_WritePin>
            break;
 8001de2:	e000      	b.n	8001de6 <traffic_display+0xa2>
            break;
 8001de4:	bf00      	nop
    }
}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <automatic_run>:
 */
#include "automatic.h"
void automatic_init(){

}
void automatic_run(){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0

	if(is_button_pressed(0)){
 8001df4:	2000      	movs	r0, #0
 8001df6:	f000 f8d3 	bl	8001fa0 <is_button_pressed>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d025      	beq.n	8001e4c <automatic_run+0x5c>
		switch(status){
 8001e00:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <automatic_run+0x68>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d822      	bhi.n	8001e50 <automatic_run+0x60>
 8001e0a:	a201      	add	r2, pc, #4	; (adr r2, 8001e10 <automatic_run+0x20>)
 8001e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e10:	08001e25 	.word	0x08001e25
 8001e14:	08001e2d 	.word	0x08001e2d
 8001e18:	08001e35 	.word	0x08001e35
 8001e1c:	08001e3d 	.word	0x08001e3d
 8001e20:	08001e45 	.word	0x08001e45
			case INIT:
				status = SET_TIME_RED;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <automatic_run+0x68>)
 8001e26:	2206      	movs	r2, #6
 8001e28:	601a      	str	r2, [r3, #0]
				break;
 8001e2a:	e012      	b.n	8001e52 <automatic_run+0x62>
			case GREEN_RED:
				status = SET_TIME_RED;
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <automatic_run+0x68>)
 8001e2e:	2206      	movs	r2, #6
 8001e30:	601a      	str	r2, [r3, #0]
				break;
 8001e32:	e00e      	b.n	8001e52 <automatic_run+0x62>
			case YELLOW_RED:
				status = SET_TIME_RED;
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <automatic_run+0x68>)
 8001e36:	2206      	movs	r2, #6
 8001e38:	601a      	str	r2, [r3, #0]
				break;
 8001e3a:	e00a      	b.n	8001e52 <automatic_run+0x62>
			case RED_GREEN:
				status = SET_TIME_RED;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <automatic_run+0x68>)
 8001e3e:	2206      	movs	r2, #6
 8001e40:	601a      	str	r2, [r3, #0]
				break;
 8001e42:	e006      	b.n	8001e52 <automatic_run+0x62>
			case RED_YELLOW:
				status = SET_TIME_RED;
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <automatic_run+0x68>)
 8001e46:	2206      	movs	r2, #6
 8001e48:	601a      	str	r2, [r3, #0]
				break;
 8001e4a:	e002      	b.n	8001e52 <automatic_run+0x62>
			default:
				break;
		}
	}
 8001e4c:	bf00      	nop
 8001e4e:	e000      	b.n	8001e52 <automatic_run+0x62>
				break;
 8001e50:	bf00      	nop
			break;
	default:
		break;
	}
	*/
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000020 	.word	0x20000020

08001e5c <ex5_init>:
 *
 *  Created on: Sep 27, 2024
 *      Author: thuyh
 */
#include "ex5.h"
void ex5_init(){
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <ex5_run>:
void ex5_run(){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
	manual_run();
 8001e6c:	f000 f8b6 	bl	8001fdc <manual_run>
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <button_reading>:
static GPIO_PinState debounceButtonBuffer3[N0_OF_BUTTONS];
static GPIO_PinState debounceButtonBuffer4[N0_OF_BUTTONS];
static uint8_t flagForButtonPress[N0_OF_BUTTONS]; // flag for button pressed (AN) hon 1 giay
static uint8_t flagForButton_longPress[N0_OF_BUTTONS];
int time_out_input = 500;
void button_reading ( GPIO_TypeDef* GPIOx[] , uint16_t GPIO_Pin[] ) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	for (int i = 0 ; i< N0_OF_BUTTONS ; i ++ ){
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	e077      	b.n	8001f74 <button_reading+0x100>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8001e84:	4a3f      	ldr	r2, [pc, #252]	; (8001f84 <button_reading+0x110>)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4413      	add	r3, r2
 8001e8a:	7819      	ldrb	r1, [r3, #0]
 8001e8c:	4a3e      	ldr	r2, [pc, #248]	; (8001f88 <button_reading+0x114>)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4413      	add	r3, r2
 8001e92:	460a      	mov	r2, r1
 8001e94:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8001e96:	4a3d      	ldr	r2, [pc, #244]	; (8001f8c <button_reading+0x118>)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	7819      	ldrb	r1, [r3, #0]
 8001e9e:	4a39      	ldr	r2, [pc, #228]	; (8001f84 <button_reading+0x110>)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOx[i], GPIO_Pin[i]);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	4413      	add	r3, r2
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	4413      	add	r3, r2
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f7fe fe47 	bl	8000b50 <HAL_GPIO_ReadPin>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4a31      	ldr	r2, [pc, #196]	; (8001f8c <button_reading+0x118>)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4413      	add	r3, r2
 8001ecc:	460a      	mov	r2, r1
 8001ece:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer3[i] == debounceButtonBuffer2[i] && debounceButtonBuffer2[i] == debounceButtonBuffer1[i]){
 8001ed0:	4a2d      	ldr	r2, [pc, #180]	; (8001f88 <button_reading+0x114>)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	492a      	ldr	r1, [pc, #168]	; (8001f84 <button_reading+0x110>)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	440b      	add	r3, r1
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d144      	bne.n	8001f6e <button_reading+0xfa>
 8001ee4:	4a27      	ldr	r2, [pc, #156]	; (8001f84 <button_reading+0x110>)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4413      	add	r3, r2
 8001eea:	781a      	ldrb	r2, [r3, #0]
 8001eec:	4927      	ldr	r1, [pc, #156]	; (8001f8c <button_reading+0x118>)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	440b      	add	r3, r1
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d13a      	bne.n	8001f6e <button_reading+0xfa>
			// Het Rung
			if(debounceButtonBuffer4[i]!=debounceButtonBuffer1[i]){
 8001ef8:	4a25      	ldr	r2, [pc, #148]	; (8001f90 <button_reading+0x11c>)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4413      	add	r3, r2
 8001efe:	781a      	ldrb	r2, [r3, #0]
 8001f00:	4922      	ldr	r1, [pc, #136]	; (8001f8c <button_reading+0x118>)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	440b      	add	r3, r1
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d018      	beq.n	8001f3e <button_reading+0xca>
				// Dong bo lai tin hieu
				debounceButtonBuffer4[i]=debounceButtonBuffer1[i];
 8001f0c:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <button_reading+0x118>)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4413      	add	r3, r2
 8001f12:	7819      	ldrb	r1, [r3, #0]
 8001f14:	4a1e      	ldr	r2, [pc, #120]	; (8001f90 <button_reading+0x11c>)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4413      	add	r3, r2
 8001f1a:	460a      	mov	r2, r1
 8001f1c:	701a      	strb	r2, [r3, #0]
				if(debounceButtonBuffer4[i] == BUTTON_IS_PRESSED){
 8001f1e:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <button_reading+0x11c>)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d121      	bne.n	8001f6e <button_reading+0xfa>
					// Vua chuyen sang trang thai nhan
					time_out_input = 500;
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <button_reading+0x120>)
 8001f2c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f30:	601a      	str	r2, [r3, #0]
					flagForButtonPress[i] = 1;
 8001f32:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <button_reading+0x124>)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4413      	add	r3, r2
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	e017      	b.n	8001f6e <button_reading+0xfa>
				}
			}
			else{
				// Dang trong qua trinh nhan de hoac nha
				time_out_input -- ;
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <button_reading+0x120>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	4a13      	ldr	r2, [pc, #76]	; (8001f94 <button_reading+0x120>)
 8001f46:	6013      	str	r3, [r2, #0]
				if(time_out_input == 0 ){
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <button_reading+0x120>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10e      	bne.n	8001f6e <button_reading+0xfa>
					// Nhan du 5s hoac tha 5s
					time_out_input = 500;
 8001f50:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <button_reading+0x120>)
 8001f52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f56:	601a      	str	r2, [r3, #0]
					if(debounceButtonBuffer4[i] == BUTTON_IS_PRESSED){
 8001f58:	4a0d      	ldr	r2, [pc, #52]	; (8001f90 <button_reading+0x11c>)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d104      	bne.n	8001f6e <button_reading+0xfa>
						// Truong hop la nhan de
						flagForButton_longPress[i] = 1;
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <button_reading+0x128>)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4413      	add	r3, r2
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i< N0_OF_BUTTONS ; i ++ ){
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	3301      	adds	r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	dd84      	ble.n	8001e84 <button_reading+0x10>
					}
				}
			}
		}
	}
}
 8001f7a:	bf00      	nop
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	2000004c 	.word	0x2000004c
 8001f88:	20000050 	.word	0x20000050
 8001f8c:	20000048 	.word	0x20000048
 8001f90:	20000054 	.word	0x20000054
 8001f94:	20000024 	.word	0x20000024
 8001f98:	20000058 	.word	0x20000058
 8001f9c:	2000005c 	.word	0x2000005c

08001fa0 <is_button_pressed>:
unsigned int is_button_pressed ( unsigned int index ){
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	// Tra ve trang thai nut nhan co dang bat hay khong
	if(index>= N0_OF_BUTTONS){
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <is_button_pressed+0x12>
		return 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e00d      	b.n	8001fce <is_button_pressed+0x2e>
	}
	if(flagForButtonPress[index] == 1){
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <is_button_pressed+0x38>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d106      	bne.n	8001fcc <is_button_pressed+0x2c>
		flagForButtonPress[index] = 0;
 8001fbe:	4a06      	ldr	r2, [pc, #24]	; (8001fd8 <is_button_pressed+0x38>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
		return 1;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <is_button_pressed+0x2e>
	}
	return 0;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	20000058 	.word	0x20000058

08001fdc <manual_run>:
 */
#include "manual.h"
void manual_init(){

}
void manual_run(){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0

	if(is_button_pressed(0)){
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7ff ffdd 	bl	8001fa0 <is_button_pressed>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d016      	beq.n	800201a <manual_run+0x3e>
		switch(status){
 8001fec:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <manual_run+0x48>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d00e      	beq.n	8002012 <manual_run+0x36>
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	dc12      	bgt.n	800201e <manual_run+0x42>
 8001ff8:	2b06      	cmp	r3, #6
 8001ffa:	d002      	beq.n	8002002 <manual_run+0x26>
 8001ffc:	2b07      	cmp	r3, #7
 8001ffe:	d004      	beq.n	800200a <manual_run+0x2e>
			break;
		case SET_TIME_GREEN:
			status = INIT;
			break;
		default:
			break;
 8002000:	e00d      	b.n	800201e <manual_run+0x42>
			status = SET_TIME_YELLOW;
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <manual_run+0x48>)
 8002004:	2207      	movs	r2, #7
 8002006:	601a      	str	r2, [r3, #0]
			break;
 8002008:	e00a      	b.n	8002020 <manual_run+0x44>
			status = SET_TIME_GREEN;
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <manual_run+0x48>)
 800200c:	2208      	movs	r2, #8
 800200e:	601a      	str	r2, [r3, #0]
			break;
 8002010:	e006      	b.n	8002020 <manual_run+0x44>
			status = INIT;
 8002012:	4b04      	ldr	r3, [pc, #16]	; (8002024 <manual_run+0x48>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]
			break;
 8002018:	e002      	b.n	8002020 <manual_run+0x44>
		}
	}
 800201a:	bf00      	nop
 800201c:	e000      	b.n	8002020 <manual_run+0x44>
			break;
 800201e:	bf00      	nop
		traffic_mannual_red_yellow();
	default :
		break;
	}
*/
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000020 	.word	0x20000020

08002028 <setTimer1>:
#include "software_timer.h"
	int time_cycle = 10;
	int timer1_counter[10];
	int timer1_flag[10];

	void setTimer1(int index,int duration){
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
		timer1_counter[index]=duration / time_cycle;
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <setTimer1+0x30>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	fb92 f2f3 	sdiv	r2, r2, r3
 800203c:	4907      	ldr	r1, [pc, #28]	; (800205c <setTimer1+0x34>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		timer1_flag[index] = 0;
 8002044:	4a06      	ldr	r2, [pc, #24]	; (8002060 <setTimer1+0x38>)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2100      	movs	r1, #0
 800204a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	20000028 	.word	0x20000028
 800205c:	200000d4 	.word	0x200000d4
 8002060:	200000ac 	.word	0x200000ac

08002064 <SetTimerForTimerSet>:
	void SetTimerForTimerSet(int index,int duration,int timer_set){
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
		time_cycle = timer_set;
 8002070:	4a05      	ldr	r2, [pc, #20]	; (8002088 <SetTimerForTimerSet+0x24>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6013      	str	r3, [r2, #0]
		setTimer1(index, duration);
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f7ff ffd5 	bl	8002028 <setTimer1>
	}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000028 	.word	0x20000028

0800208c <timerRun>:
	void timerRun(){
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
		for (int i = 0 ; i <10 ; i++){
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	e01c      	b.n	80020d2 <timerRun+0x46>
			if(timer1_counter[i] >  0 ){
 8002098:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <timerRun+0x58>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	dd08      	ble.n	80020b6 <timerRun+0x2a>
					timer1_counter[i]--;
 80020a4:	4a0f      	ldr	r2, [pc, #60]	; (80020e4 <timerRun+0x58>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ac:	1e5a      	subs	r2, r3, #1
 80020ae:	490d      	ldr	r1, [pc, #52]	; (80020e4 <timerRun+0x58>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 }
			if(timer1_counter[i]<=0){
 80020b6:	4a0b      	ldr	r2, [pc, #44]	; (80020e4 <timerRun+0x58>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	dc04      	bgt.n	80020cc <timerRun+0x40>
					timer1_flag[i]=1;
 80020c2:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <timerRun+0x5c>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2101      	movs	r1, #1
 80020c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0 ; i <10 ; i++){
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3301      	adds	r3, #1
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b09      	cmp	r3, #9
 80020d6:	dddf      	ble.n	8002098 <timerRun+0xc>
			}
		}


	}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	200000d4 	.word	0x200000d4
 80020e8:	200000ac 	.word	0x200000ac

080020ec <__libc_init_array>:
 80020ec:	b570      	push	{r4, r5, r6, lr}
 80020ee:	2600      	movs	r6, #0
 80020f0:	4d0c      	ldr	r5, [pc, #48]	; (8002124 <__libc_init_array+0x38>)
 80020f2:	4c0d      	ldr	r4, [pc, #52]	; (8002128 <__libc_init_array+0x3c>)
 80020f4:	1b64      	subs	r4, r4, r5
 80020f6:	10a4      	asrs	r4, r4, #2
 80020f8:	42a6      	cmp	r6, r4
 80020fa:	d109      	bne.n	8002110 <__libc_init_array+0x24>
 80020fc:	f000 f822 	bl	8002144 <_init>
 8002100:	2600      	movs	r6, #0
 8002102:	4d0a      	ldr	r5, [pc, #40]	; (800212c <__libc_init_array+0x40>)
 8002104:	4c0a      	ldr	r4, [pc, #40]	; (8002130 <__libc_init_array+0x44>)
 8002106:	1b64      	subs	r4, r4, r5
 8002108:	10a4      	asrs	r4, r4, #2
 800210a:	42a6      	cmp	r6, r4
 800210c:	d105      	bne.n	800211a <__libc_init_array+0x2e>
 800210e:	bd70      	pop	{r4, r5, r6, pc}
 8002110:	f855 3b04 	ldr.w	r3, [r5], #4
 8002114:	4798      	blx	r3
 8002116:	3601      	adds	r6, #1
 8002118:	e7ee      	b.n	80020f8 <__libc_init_array+0xc>
 800211a:	f855 3b04 	ldr.w	r3, [r5], #4
 800211e:	4798      	blx	r3
 8002120:	3601      	adds	r6, #1
 8002122:	e7f2      	b.n	800210a <__libc_init_array+0x1e>
 8002124:	08002180 	.word	0x08002180
 8002128:	08002180 	.word	0x08002180
 800212c:	08002180 	.word	0x08002180
 8002130:	08002184 	.word	0x08002184

08002134 <memset>:
 8002134:	4603      	mov	r3, r0
 8002136:	4402      	add	r2, r0
 8002138:	4293      	cmp	r3, r2
 800213a:	d100      	bne.n	800213e <memset+0xa>
 800213c:	4770      	bx	lr
 800213e:	f803 1b01 	strb.w	r1, [r3], #1
 8002142:	e7f9      	b.n	8002138 <memset+0x4>

08002144 <_init>:
 8002144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002146:	bf00      	nop
 8002148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800214a:	bc08      	pop	{r3}
 800214c:	469e      	mov	lr, r3
 800214e:	4770      	bx	lr

08002150 <_fini>:
 8002150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002152:	bf00      	nop
 8002154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002156:	bc08      	pop	{r3}
 8002158:	469e      	mov	lr, r3
 800215a:	4770      	bx	lr


lab3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002894  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080029a0  080029a0  000129a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029c4  080029c4  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  080029c4  080029c4  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029c4  080029c4  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029c4  080029c4  000129c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029c8  080029c8  000129c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080029cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000040  08002a0c  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002a0c  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009cfa  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e36  00000000  00000000  00029d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  0002bba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002c6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001769b  00000000  00000000  0002d090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8b7  00000000  00000000  0004472b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082882  00000000  00000000  00051fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4864  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a78  00000000  00000000  000d48b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08002988 	.word	0x08002988

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08002988 	.word	0x08002988

0800014c <ex4_init>:
 *
 *  Created on: Sep 27, 2024
 *      Author: thuyh
 */
#include <ex4.h>
void ex4_init(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	SetTimerForTimerSet(0, 500,10);
 8000150:	220a      	movs	r2, #10
 8000152:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000156:	2000      	movs	r0, #0
 8000158:	f002 fba6 	bl	80028a8 <SetTimerForTimerSet>
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}

08000160 <ex5_init>:
 *      Author: thuyh
 */


#include "ex5.h"
void ex5_init(){
 8000160:	b480      	push	{r7}
 8000162:	af00      	add	r7, sp, #0

}
 8000164:	bf00      	nop
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr

0800016c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	b086      	sub	sp, #24
 8000170:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000172:	f000 f9f1 	bl	8000558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000176:	f000 f829 	bl	80001cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017a:	f000 f8af 	bl	80002dc <MX_GPIO_Init>
  MX_TIM2_Init();
 800017e:	f000 f861 	bl	8000244 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000182:	480f      	ldr	r0, [pc, #60]	; (80001c0 <main+0x54>)
 8000184:	f001 f92e 	bl	80013e4 <HAL_TIM_Base_Start_IT>
  ex4_init();
 8000188:	f7ff ffe0 	bl	800014c <ex4_init>
  ex5_init();
 800018c:	f7ff ffe8 	bl	8000160 <ex5_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  automatic_run();
 8000190:	f002 fa56 	bl	8002640 <automatic_run>
	  manual_run();
 8000194:	f002 fb3a 	bl	800280c <manual_run>
	  traffic_double_display(GPIOA, RED_1_Pin, YELLOW_1_Pin, GREEN_1_Pin, GPIOA, RED_2_Pin, YELLOW_2_Pin, GREEN_2_Pin, status);
 8000198:	4b0a      	ldr	r3, [pc, #40]	; (80001c4 <main+0x58>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	9304      	str	r3, [sp, #16]
 800019e:	2340      	movs	r3, #64	; 0x40
 80001a0:	9303      	str	r3, [sp, #12]
 80001a2:	2380      	movs	r3, #128	; 0x80
 80001a4:	9302      	str	r3, [sp, #8]
 80001a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001aa:	9301      	str	r3, [sp, #4]
 80001ac:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <main+0x5c>)
 80001ae:	9300      	str	r3, [sp, #0]
 80001b0:	2302      	movs	r3, #2
 80001b2:	2204      	movs	r2, #4
 80001b4:	2108      	movs	r1, #8
 80001b6:	4804      	ldr	r0, [pc, #16]	; (80001c8 <main+0x5c>)
 80001b8:	f001 fea8 	bl	8001f0c <traffic_double_display>
	  automatic_run();
 80001bc:	e7e8      	b.n	8000190 <main+0x24>
 80001be:	bf00      	nop
 80001c0:	20000074 	.word	0x20000074
 80001c4:	20000034 	.word	0x20000034
 80001c8:	40010800 	.word	0x40010800

080001cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b090      	sub	sp, #64	; 0x40
 80001d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d2:	f107 0318 	add.w	r3, r7, #24
 80001d6:	2228      	movs	r2, #40	; 0x28
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f002 fbcc 	bl	8002978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]
 80001ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ee:	2302      	movs	r3, #2
 80001f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f2:	2301      	movs	r3, #1
 80001f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f6:	2310      	movs	r3, #16
 80001f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001fa:	2300      	movs	r3, #0
 80001fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fe:	f107 0318 	add.w	r3, r7, #24
 8000202:	4618      	mov	r0, r3
 8000204:	f000 fcc2 	bl	8000b8c <HAL_RCC_OscConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800020e:	f000 f8e9 	bl	80003e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000212:	230f      	movs	r3, #15
 8000214:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000216:	2300      	movs	r3, #0
 8000218:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f000 ff2e 	bl	800108c <HAL_RCC_ClockConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000236:	f000 f8d5 	bl	80003e4 <Error_Handler>
  }
}
 800023a:	bf00      	nop
 800023c:	3740      	adds	r7, #64	; 0x40
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
	...

08000244 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b086      	sub	sp, #24
 8000248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800024a:	f107 0308 	add.w	r3, r7, #8
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000258:	463b      	mov	r3, r7
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000260:	4b1d      	ldr	r3, [pc, #116]	; (80002d8 <MX_TIM2_Init+0x94>)
 8000262:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000266:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000268:	4b1b      	ldr	r3, [pc, #108]	; (80002d8 <MX_TIM2_Init+0x94>)
 800026a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800026e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000270:	4b19      	ldr	r3, [pc, #100]	; (80002d8 <MX_TIM2_Init+0x94>)
 8000272:	2200      	movs	r2, #0
 8000274:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000276:	4b18      	ldr	r3, [pc, #96]	; (80002d8 <MX_TIM2_Init+0x94>)
 8000278:	2209      	movs	r2, #9
 800027a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800027c:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <MX_TIM2_Init+0x94>)
 800027e:	2200      	movs	r2, #0
 8000280:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000282:	4b15      	ldr	r3, [pc, #84]	; (80002d8 <MX_TIM2_Init+0x94>)
 8000284:	2200      	movs	r2, #0
 8000286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000288:	4813      	ldr	r0, [pc, #76]	; (80002d8 <MX_TIM2_Init+0x94>)
 800028a:	f001 f85b 	bl	8001344 <HAL_TIM_Base_Init>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000294:	f000 f8a6 	bl	80003e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800029c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800029e:	f107 0308 	add.w	r3, r7, #8
 80002a2:	4619      	mov	r1, r3
 80002a4:	480c      	ldr	r0, [pc, #48]	; (80002d8 <MX_TIM2_Init+0x94>)
 80002a6:	f001 f9d9 	bl	800165c <HAL_TIM_ConfigClockSource>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002b0:	f000 f898 	bl	80003e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002b4:	2300      	movs	r3, #0
 80002b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002b8:	2300      	movs	r3, #0
 80002ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002bc:	463b      	mov	r3, r7
 80002be:	4619      	mov	r1, r3
 80002c0:	4805      	ldr	r0, [pc, #20]	; (80002d8 <MX_TIM2_Init+0x94>)
 80002c2:	f001 fbb1 	bl	8001a28 <HAL_TIMEx_MasterConfigSynchronization>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002cc:	f000 f88a 	bl	80003e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002d0:	bf00      	nop
 80002d2:	3718      	adds	r7, #24
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000074 	.word	0x20000074

080002dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b088      	sub	sp, #32
 80002e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e2:	f107 0310 	add.w	r3, r7, #16
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f0:	4b2f      	ldr	r3, [pc, #188]	; (80003b0 <MX_GPIO_Init+0xd4>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a2e      	ldr	r2, [pc, #184]	; (80003b0 <MX_GPIO_Init+0xd4>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b2c      	ldr	r3, [pc, #176]	; (80003b0 <MX_GPIO_Init+0xd4>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0310 	and.w	r3, r3, #16
 8000304:	60fb      	str	r3, [r7, #12]
 8000306:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000308:	4b29      	ldr	r3, [pc, #164]	; (80003b0 <MX_GPIO_Init+0xd4>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a28      	ldr	r2, [pc, #160]	; (80003b0 <MX_GPIO_Init+0xd4>)
 800030e:	f043 0304 	orr.w	r3, r3, #4
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b26      	ldr	r3, [pc, #152]	; (80003b0 <MX_GPIO_Init+0xd4>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0304 	and.w	r3, r3, #4
 800031c:	60bb      	str	r3, [r7, #8]
 800031e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000320:	4b23      	ldr	r3, [pc, #140]	; (80003b0 <MX_GPIO_Init+0xd4>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a22      	ldr	r2, [pc, #136]	; (80003b0 <MX_GPIO_Init+0xd4>)
 8000326:	f043 0308 	orr.w	r3, r3, #8
 800032a:	6193      	str	r3, [r2, #24]
 800032c:	4b20      	ldr	r3, [pc, #128]	; (80003b0 <MX_GPIO_Init+0xd4>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	f003 0308 	and.w	r3, r3, #8
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin|YELLOW_1_Pin|RED_1_Pin|LED_RED_Pin
 8000338:	2200      	movs	r2, #0
 800033a:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 800033e:	481d      	ldr	r0, [pc, #116]	; (80003b4 <MX_GPIO_Init+0xd8>)
 8000340:	f000 fc0b 	bl	8000b5a <HAL_GPIO_WritePin>
                          |GREEN_2_Pin|YELLOW_2_Pin|RED_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEGLED1_0_Pin|SEGLED1_1_Pin|SEGLED1_2_Pin|SEGLED2_3_Pin
 8000344:	2200      	movs	r2, #0
 8000346:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800034a:	481b      	ldr	r0, [pc, #108]	; (80003b8 <MX_GPIO_Init+0xdc>)
 800034c:	f000 fc05 	bl	8000b5a <HAL_GPIO_WritePin>
                          |SEGLED2_4_Pin|SEGLED2_5_Pin|SEGLED2_6_Pin|SEGLED1_3_Pin
                          |SEGLED1_4_Pin|SEGLED1_5_Pin|SEGLED1_6_Pin|SEGLED2_0_Pin
                          |SEGLED2_1_Pin|SEGLED2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000350:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800035a:	2301      	movs	r3, #1
 800035c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	4619      	mov	r1, r3
 8000364:	4815      	ldr	r0, [pc, #84]	; (80003bc <MX_GPIO_Init+0xe0>)
 8000366:	f000 fa67 	bl	8000838 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_1_Pin YELLOW_1_Pin RED_1_Pin LED_RED_Pin
                           GREEN_2_Pin YELLOW_2_Pin RED_2_Pin */
  GPIO_InitStruct.Pin = GREEN_1_Pin|YELLOW_1_Pin|RED_1_Pin|LED_RED_Pin
 800036a:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
 800036e:	613b      	str	r3, [r7, #16]
                          |GREEN_2_Pin|YELLOW_2_Pin|RED_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000378:	2302      	movs	r3, #2
 800037a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037c:	f107 0310 	add.w	r3, r7, #16
 8000380:	4619      	mov	r1, r3
 8000382:	480c      	ldr	r0, [pc, #48]	; (80003b4 <MX_GPIO_Init+0xd8>)
 8000384:	f000 fa58 	bl	8000838 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEGLED1_0_Pin SEGLED1_1_Pin SEGLED1_2_Pin SEGLED2_3_Pin
                           SEGLED2_4_Pin SEGLED2_5_Pin SEGLED2_6_Pin SEGLED1_3_Pin
                           SEGLED1_4_Pin SEGLED1_5_Pin SEGLED1_6_Pin SEGLED2_0_Pin
                           SEGLED2_1_Pin SEGLED2_2_Pin */
  GPIO_InitStruct.Pin = SEGLED1_0_Pin|SEGLED1_1_Pin|SEGLED1_2_Pin|SEGLED2_3_Pin
 8000388:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800038c:	613b      	str	r3, [r7, #16]
                          |SEGLED2_4_Pin|SEGLED2_5_Pin|SEGLED2_6_Pin|SEGLED1_3_Pin
                          |SEGLED1_4_Pin|SEGLED1_5_Pin|SEGLED1_6_Pin|SEGLED2_0_Pin
                          |SEGLED2_1_Pin|SEGLED2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038e:	2301      	movs	r3, #1
 8000390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	2300      	movs	r3, #0
 8000394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000396:	2302      	movs	r3, #2
 8000398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800039a:	f107 0310 	add.w	r3, r7, #16
 800039e:	4619      	mov	r1, r3
 80003a0:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_GPIO_Init+0xdc>)
 80003a2:	f000 fa49 	bl	8000838 <HAL_GPIO_Init>

}
 80003a6:	bf00      	nop
 80003a8:	3720      	adds	r7, #32
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000
 80003b4:	40010800 	.word	0x40010800
 80003b8:	40010c00 	.word	0x40010c00
 80003bc:	40011000 	.word	0x40011000

080003c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	timerRun();
 80003c8:	f002 fa82 	bl	80028d0 <timerRun>
	button_reading(GPIOx, GPIO_Pin);
 80003cc:	4903      	ldr	r1, [pc, #12]	; (80003dc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80003ce:	4804      	ldr	r0, [pc, #16]	; (80003e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003d0:	f002 f968 	bl	80026a4 <button_reading>
}
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	2000000c 	.word	0x2000000c
 80003e0:	20000000 	.word	0x20000000

080003e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e8:	b672      	cpsid	i
}
 80003ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ec:	e7fe      	b.n	80003ec <Error_Handler+0x8>
	...

080003f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <HAL_MspInit+0x5c>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a14      	ldr	r2, [pc, #80]	; (800044c <HAL_MspInit+0x5c>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <HAL_MspInit+0x5c>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	4a0e      	ldr	r2, [pc, #56]	; (800044c <HAL_MspInit+0x5c>)
 8000414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000418:	61d3      	str	r3, [r2, #28]
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <HAL_MspInit+0x60>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <HAL_MspInit+0x60>)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	40021000 	.word	0x40021000
 8000450:	40010000 	.word	0x40010000

08000454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000464:	d113      	bne.n	800048e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <HAL_TIM_Base_MspInit+0x44>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a0b      	ldr	r2, [pc, #44]	; (8000498 <HAL_TIM_Base_MspInit+0x44>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <HAL_TIM_Base_MspInit+0x44>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	2100      	movs	r1, #0
 8000482:	201c      	movs	r0, #28
 8000484:	f000 f9a1 	bl	80007ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000488:	201c      	movs	r0, #28
 800048a:	f000 f9ba 	bl	8000802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800048e:	bf00      	nop
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000

0800049c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <NMI_Handler+0x4>

080004a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <MemManage_Handler+0x4>

080004ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <BusFault_Handler+0x4>

080004b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <UsageFault_Handler+0x4>

080004ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr

080004c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e2:	f000 f87f 	bl	80005e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80004f0:	4802      	ldr	r0, [pc, #8]	; (80004fc <TIM2_IRQHandler+0x10>)
 80004f2:	f000 ffc3 	bl	800147c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000074 	.word	0x20000074

08000500 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800050c:	f7ff fff8 	bl	8000500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000512:	490c      	ldr	r1, [pc, #48]	; (8000544 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000514:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000518:	e002      	b.n	8000520 <LoopCopyDataInit>

0800051a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800051c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051e:	3304      	adds	r3, #4

08000520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000524:	d3f9      	bcc.n	800051a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000526:	4a09      	ldr	r2, [pc, #36]	; (800054c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000528:	4c09      	ldr	r4, [pc, #36]	; (8000550 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800052c:	e001      	b.n	8000532 <LoopFillZerobss>

0800052e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000530:	3204      	adds	r2, #4

08000532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000534:	d3fb      	bcc.n	800052e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000536:	f002 f9fb 	bl	8002930 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800053a:	f7ff fe17 	bl	800016c <main>
  bx lr
 800053e:	4770      	bx	lr
  ldr r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000544:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000548:	080029cc 	.word	0x080029cc
  ldr r2, =_sbss
 800054c:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000550:	20000114 	.word	0x20000114

08000554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <ADC1_2_IRQHandler>
	...

08000558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <HAL_Init+0x28>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a07      	ldr	r2, [pc, #28]	; (8000580 <HAL_Init+0x28>)
 8000562:	f043 0310 	orr.w	r3, r3, #16
 8000566:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000568:	2003      	movs	r0, #3
 800056a:	f000 f923 	bl	80007b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800056e:	200f      	movs	r0, #15
 8000570:	f000 f808 	bl	8000584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000574:	f7ff ff3c 	bl	80003f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000578:	2300      	movs	r3, #0
}
 800057a:	4618      	mov	r0, r3
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40022000 	.word	0x40022000

08000584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <HAL_InitTick+0x54>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <HAL_InitTick+0x58>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059a:	fbb3 f3f1 	udiv	r3, r3, r1
 800059e:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f93b 	bl	800081e <HAL_SYSTICK_Config>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
 80005b0:	e00e      	b.n	80005d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b0f      	cmp	r3, #15
 80005b6:	d80a      	bhi.n	80005ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b8:	2200      	movs	r2, #0
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	f04f 30ff 	mov.w	r0, #4294967295
 80005c0:	f000 f903 	bl	80007ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <HAL_InitTick+0x5c>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ca:	2300      	movs	r3, #0
 80005cc:	e000      	b.n	80005d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000014 	.word	0x20000014
 80005dc:	2000001c 	.word	0x2000001c
 80005e0:	20000018 	.word	0x20000018

080005e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <HAL_IncTick+0x1c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <HAL_IncTick+0x20>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	4a03      	ldr	r2, [pc, #12]	; (8000604 <HAL_IncTick+0x20>)
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	2000001c 	.word	0x2000001c
 8000604:	200000bc 	.word	0x200000bc

08000608 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  return uwTick;
 800060c:	4b02      	ldr	r3, [pc, #8]	; (8000618 <HAL_GetTick+0x10>)
 800060e:	681b      	ldr	r3, [r3, #0]
}
 8000610:	4618      	mov	r0, r3
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	200000bc 	.word	0x200000bc

0800061c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000638:	4013      	ands	r3, r2
 800063a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064e:	4a04      	ldr	r2, [pc, #16]	; (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	60d3      	str	r3, [r2, #12]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <__NVIC_GetPriorityGrouping+0x18>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	0a1b      	lsrs	r3, r3, #8
 800066e:	f003 0307 	and.w	r3, r3, #7
}
 8000672:	4618      	mov	r0, r3
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	2b00      	cmp	r3, #0
 8000690:	db0b      	blt.n	80006aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f003 021f 	and.w	r2, r3, #31
 8000698:	4906      	ldr	r1, [pc, #24]	; (80006b4 <__NVIC_EnableIRQ+0x34>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	095b      	lsrs	r3, r3, #5
 80006a0:	2001      	movs	r0, #1
 80006a2:	fa00 f202 	lsl.w	r2, r0, r2
 80006a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	e000e100 	.word	0xe000e100

080006b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db0a      	blt.n	80006e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	490c      	ldr	r1, [pc, #48]	; (8000704 <__NVIC_SetPriority+0x4c>)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e0:	e00a      	b.n	80006f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4908      	ldr	r1, [pc, #32]	; (8000708 <__NVIC_SetPriority+0x50>)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	3b04      	subs	r3, #4
 80006f0:	0112      	lsls	r2, r2, #4
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	440b      	add	r3, r1
 80006f6:	761a      	strb	r2, [r3, #24]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000e100 	.word	0xe000e100
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800070c:	b480      	push	{r7}
 800070e:	b089      	sub	sp, #36	; 0x24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	f1c3 0307 	rsb	r3, r3, #7
 8000726:	2b04      	cmp	r3, #4
 8000728:	bf28      	it	cs
 800072a:	2304      	movcs	r3, #4
 800072c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3304      	adds	r3, #4
 8000732:	2b06      	cmp	r3, #6
 8000734:	d902      	bls.n	800073c <NVIC_EncodePriority+0x30>
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3b03      	subs	r3, #3
 800073a:	e000      	b.n	800073e <NVIC_EncodePriority+0x32>
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	f04f 32ff 	mov.w	r2, #4294967295
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	43da      	mvns	r2, r3
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	401a      	ands	r2, r3
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000754:	f04f 31ff 	mov.w	r1, #4294967295
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	43d9      	mvns	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	4313      	orrs	r3, r2
         );
}
 8000766:	4618      	mov	r0, r3
 8000768:	3724      	adds	r7, #36	; 0x24
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3b01      	subs	r3, #1
 800077c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000780:	d301      	bcc.n	8000786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000782:	2301      	movs	r3, #1
 8000784:	e00f      	b.n	80007a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <SysTick_Config+0x40>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3b01      	subs	r3, #1
 800078c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800078e:	210f      	movs	r1, #15
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	f7ff ff90 	bl	80006b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <SysTick_Config+0x40>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <SysTick_Config+0x40>)
 80007a0:	2207      	movs	r2, #7
 80007a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	e000e010 	.word	0xe000e010

080007b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff2d 	bl	800061c <__NVIC_SetPriorityGrouping>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b086      	sub	sp, #24
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007dc:	f7ff ff42 	bl	8000664 <__NVIC_GetPriorityGrouping>
 80007e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	68b9      	ldr	r1, [r7, #8]
 80007e6:	6978      	ldr	r0, [r7, #20]
 80007e8:	f7ff ff90 	bl	800070c <NVIC_EncodePriority>
 80007ec:	4602      	mov	r2, r0
 80007ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff5f 	bl	80006b8 <__NVIC_SetPriority>
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff35 	bl	8000680 <__NVIC_EnableIRQ>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff ffa2 	bl	8000770 <SysTick_Config>
 800082c:	4603      	mov	r3, r0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000838:	b480      	push	{r7}
 800083a:	b08b      	sub	sp, #44	; 0x2c
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800084a:	e148      	b.n	8000ade <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800084c:	2201      	movs	r2, #1
 800084e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	69fa      	ldr	r2, [r7, #28]
 800085c:	4013      	ands	r3, r2
 800085e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000860:	69ba      	ldr	r2, [r7, #24]
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	429a      	cmp	r2, r3
 8000866:	f040 8137 	bne.w	8000ad8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	4aa3      	ldr	r2, [pc, #652]	; (8000afc <HAL_GPIO_Init+0x2c4>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d05e      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 8000874:	4aa1      	ldr	r2, [pc, #644]	; (8000afc <HAL_GPIO_Init+0x2c4>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d875      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 800087a:	4aa1      	ldr	r2, [pc, #644]	; (8000b00 <HAL_GPIO_Init+0x2c8>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d058      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 8000880:	4a9f      	ldr	r2, [pc, #636]	; (8000b00 <HAL_GPIO_Init+0x2c8>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d86f      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 8000886:	4a9f      	ldr	r2, [pc, #636]	; (8000b04 <HAL_GPIO_Init+0x2cc>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d052      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 800088c:	4a9d      	ldr	r2, [pc, #628]	; (8000b04 <HAL_GPIO_Init+0x2cc>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d869      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 8000892:	4a9d      	ldr	r2, [pc, #628]	; (8000b08 <HAL_GPIO_Init+0x2d0>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d04c      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 8000898:	4a9b      	ldr	r2, [pc, #620]	; (8000b08 <HAL_GPIO_Init+0x2d0>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d863      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 800089e:	4a9b      	ldr	r2, [pc, #620]	; (8000b0c <HAL_GPIO_Init+0x2d4>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d046      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 80008a4:	4a99      	ldr	r2, [pc, #612]	; (8000b0c <HAL_GPIO_Init+0x2d4>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d85d      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 80008aa:	2b12      	cmp	r3, #18
 80008ac:	d82a      	bhi.n	8000904 <HAL_GPIO_Init+0xcc>
 80008ae:	2b12      	cmp	r3, #18
 80008b0:	d859      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 80008b2:	a201      	add	r2, pc, #4	; (adr r2, 80008b8 <HAL_GPIO_Init+0x80>)
 80008b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b8:	08000933 	.word	0x08000933
 80008bc:	0800090d 	.word	0x0800090d
 80008c0:	0800091f 	.word	0x0800091f
 80008c4:	08000961 	.word	0x08000961
 80008c8:	08000967 	.word	0x08000967
 80008cc:	08000967 	.word	0x08000967
 80008d0:	08000967 	.word	0x08000967
 80008d4:	08000967 	.word	0x08000967
 80008d8:	08000967 	.word	0x08000967
 80008dc:	08000967 	.word	0x08000967
 80008e0:	08000967 	.word	0x08000967
 80008e4:	08000967 	.word	0x08000967
 80008e8:	08000967 	.word	0x08000967
 80008ec:	08000967 	.word	0x08000967
 80008f0:	08000967 	.word	0x08000967
 80008f4:	08000967 	.word	0x08000967
 80008f8:	08000967 	.word	0x08000967
 80008fc:	08000915 	.word	0x08000915
 8000900:	08000929 	.word	0x08000929
 8000904:	4a82      	ldr	r2, [pc, #520]	; (8000b10 <HAL_GPIO_Init+0x2d8>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d013      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800090a:	e02c      	b.n	8000966 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	623b      	str	r3, [r7, #32]
          break;
 8000912:	e029      	b.n	8000968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	3304      	adds	r3, #4
 800091a:	623b      	str	r3, [r7, #32]
          break;
 800091c:	e024      	b.n	8000968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	3308      	adds	r3, #8
 8000924:	623b      	str	r3, [r7, #32]
          break;
 8000926:	e01f      	b.n	8000968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	330c      	adds	r3, #12
 800092e:	623b      	str	r3, [r7, #32]
          break;
 8000930:	e01a      	b.n	8000968 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d102      	bne.n	8000940 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800093a:	2304      	movs	r3, #4
 800093c:	623b      	str	r3, [r7, #32]
          break;
 800093e:	e013      	b.n	8000968 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d105      	bne.n	8000954 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000948:	2308      	movs	r3, #8
 800094a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	611a      	str	r2, [r3, #16]
          break;
 8000952:	e009      	b.n	8000968 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000954:	2308      	movs	r3, #8
 8000956:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	69fa      	ldr	r2, [r7, #28]
 800095c:	615a      	str	r2, [r3, #20]
          break;
 800095e:	e003      	b.n	8000968 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
          break;
 8000964:	e000      	b.n	8000968 <HAL_GPIO_Init+0x130>
          break;
 8000966:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	2bff      	cmp	r3, #255	; 0xff
 800096c:	d801      	bhi.n	8000972 <HAL_GPIO_Init+0x13a>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	e001      	b.n	8000976 <HAL_GPIO_Init+0x13e>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3304      	adds	r3, #4
 8000976:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	2bff      	cmp	r3, #255	; 0xff
 800097c:	d802      	bhi.n	8000984 <HAL_GPIO_Init+0x14c>
 800097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	e002      	b.n	800098a <HAL_GPIO_Init+0x152>
 8000984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000986:	3b08      	subs	r3, #8
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	210f      	movs	r1, #15
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	fa01 f303 	lsl.w	r3, r1, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	401a      	ands	r2, r3
 800099c:	6a39      	ldr	r1, [r7, #32]
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	fa01 f303 	lsl.w	r3, r1, r3
 80009a4:	431a      	orrs	r2, r3
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f000 8090 	beq.w	8000ad8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009b8:	4b56      	ldr	r3, [pc, #344]	; (8000b14 <HAL_GPIO_Init+0x2dc>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a55      	ldr	r2, [pc, #340]	; (8000b14 <HAL_GPIO_Init+0x2dc>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b53      	ldr	r3, [pc, #332]	; (8000b14 <HAL_GPIO_Init+0x2dc>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009d0:	4a51      	ldr	r2, [pc, #324]	; (8000b18 <HAL_GPIO_Init+0x2e0>)
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	089b      	lsrs	r3, r3, #2
 80009d6:	3302      	adds	r3, #2
 80009d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	220f      	movs	r2, #15
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	4013      	ands	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a49      	ldr	r2, [pc, #292]	; (8000b1c <HAL_GPIO_Init+0x2e4>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d00d      	beq.n	8000a18 <HAL_GPIO_Init+0x1e0>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a48      	ldr	r2, [pc, #288]	; (8000b20 <HAL_GPIO_Init+0x2e8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d007      	beq.n	8000a14 <HAL_GPIO_Init+0x1dc>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a47      	ldr	r2, [pc, #284]	; (8000b24 <HAL_GPIO_Init+0x2ec>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d101      	bne.n	8000a10 <HAL_GPIO_Init+0x1d8>
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	e004      	b.n	8000a1a <HAL_GPIO_Init+0x1e2>
 8000a10:	2303      	movs	r3, #3
 8000a12:	e002      	b.n	8000a1a <HAL_GPIO_Init+0x1e2>
 8000a14:	2301      	movs	r3, #1
 8000a16:	e000      	b.n	8000a1a <HAL_GPIO_Init+0x1e2>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a1c:	f002 0203 	and.w	r2, r2, #3
 8000a20:	0092      	lsls	r2, r2, #2
 8000a22:	4093      	lsls	r3, r2
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a2a:	493b      	ldr	r1, [pc, #236]	; (8000b18 <HAL_GPIO_Init+0x2e0>)
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	3302      	adds	r3, #2
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d006      	beq.n	8000a52 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a44:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a46:	689a      	ldr	r2, [r3, #8]
 8000a48:	4937      	ldr	r1, [pc, #220]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	608b      	str	r3, [r1, #8]
 8000a50:	e006      	b.n	8000a60 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a52:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	4933      	ldr	r1, [pc, #204]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d006      	beq.n	8000a7a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a6c:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	492d      	ldr	r1, [pc, #180]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	60cb      	str	r3, [r1, #12]
 8000a78:	e006      	b.n	8000a88 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a7a:	4b2b      	ldr	r3, [pc, #172]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a7c:	68da      	ldr	r2, [r3, #12]
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	43db      	mvns	r3, r3
 8000a82:	4929      	ldr	r1, [pc, #164]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a84:	4013      	ands	r3, r2
 8000a86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d006      	beq.n	8000aa2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a94:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	4923      	ldr	r1, [pc, #140]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	604b      	str	r3, [r1, #4]
 8000aa0:	e006      	b.n	8000ab0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	491f      	ldr	r1, [pc, #124]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000aac:	4013      	ands	r3, r2
 8000aae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d006      	beq.n	8000aca <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4919      	ldr	r1, [pc, #100]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	600b      	str	r3, [r1, #0]
 8000ac8:	e006      	b.n	8000ad8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	4915      	ldr	r1, [pc, #84]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ada:	3301      	adds	r3, #1
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f47f aeaf 	bne.w	800084c <HAL_GPIO_Init+0x14>
  }
}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	372c      	adds	r7, #44	; 0x2c
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	10320000 	.word	0x10320000
 8000b00:	10310000 	.word	0x10310000
 8000b04:	10220000 	.word	0x10220000
 8000b08:	10210000 	.word	0x10210000
 8000b0c:	10120000 	.word	0x10120000
 8000b10:	10110000 	.word	0x10110000
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	40011000 	.word	0x40011000
 8000b28:	40010400 	.word	0x40010400

08000b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689a      	ldr	r2, [r3, #8]
 8000b3c:	887b      	ldrh	r3, [r7, #2]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d002      	beq.n	8000b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
 8000b48:	e001      	b.n	8000b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr

08000b5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	460b      	mov	r3, r1
 8000b64:	807b      	strh	r3, [r7, #2]
 8000b66:	4613      	mov	r3, r2
 8000b68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b6a:	787b      	ldrb	r3, [r7, #1]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d003      	beq.n	8000b78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b70:	887a      	ldrh	r2, [r7, #2]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b76:	e003      	b.n	8000b80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b78:	887b      	ldrh	r3, [r7, #2]
 8000b7a:	041a      	lsls	r2, r3, #16
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	611a      	str	r2, [r3, #16]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
	...

08000b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d101      	bne.n	8000b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e26c      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f000 8087 	beq.w	8000cba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bac:	4b92      	ldr	r3, [pc, #584]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 030c 	and.w	r3, r3, #12
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	d00c      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bb8:	4b8f      	ldr	r3, [pc, #572]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 030c 	and.w	r3, r3, #12
 8000bc0:	2b08      	cmp	r3, #8
 8000bc2:	d112      	bne.n	8000bea <HAL_RCC_OscConfig+0x5e>
 8000bc4:	4b8c      	ldr	r3, [pc, #560]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd0:	d10b      	bne.n	8000bea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd2:	4b89      	ldr	r3, [pc, #548]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d06c      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x12c>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d168      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e246      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf2:	d106      	bne.n	8000c02 <HAL_RCC_OscConfig+0x76>
 8000bf4:	4b80      	ldr	r3, [pc, #512]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a7f      	ldr	r2, [pc, #508]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	e02e      	b.n	8000c60 <HAL_RCC_OscConfig+0xd4>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d10c      	bne.n	8000c24 <HAL_RCC_OscConfig+0x98>
 8000c0a:	4b7b      	ldr	r3, [pc, #492]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a7a      	ldr	r2, [pc, #488]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	4b78      	ldr	r3, [pc, #480]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a77      	ldr	r2, [pc, #476]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	e01d      	b.n	8000c60 <HAL_RCC_OscConfig+0xd4>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c2c:	d10c      	bne.n	8000c48 <HAL_RCC_OscConfig+0xbc>
 8000c2e:	4b72      	ldr	r3, [pc, #456]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a71      	ldr	r2, [pc, #452]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c38:	6013      	str	r3, [r2, #0]
 8000c3a:	4b6f      	ldr	r3, [pc, #444]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a6e      	ldr	r2, [pc, #440]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e00b      	b.n	8000c60 <HAL_RCC_OscConfig+0xd4>
 8000c48:	4b6b      	ldr	r3, [pc, #428]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a6a      	ldr	r2, [pc, #424]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c52:	6013      	str	r3, [r2, #0]
 8000c54:	4b68      	ldr	r3, [pc, #416]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a67      	ldr	r2, [pc, #412]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d013      	beq.n	8000c90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c68:	f7ff fcce 	bl	8000608 <HAL_GetTick>
 8000c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6e:	e008      	b.n	8000c82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c70:	f7ff fcca 	bl	8000608 <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	2b64      	cmp	r3, #100	; 0x64
 8000c7c:	d901      	bls.n	8000c82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e1fa      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c82:	4b5d      	ldr	r3, [pc, #372]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d0f0      	beq.n	8000c70 <HAL_RCC_OscConfig+0xe4>
 8000c8e:	e014      	b.n	8000cba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c90:	f7ff fcba 	bl	8000608 <HAL_GetTick>
 8000c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c96:	e008      	b.n	8000caa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c98:	f7ff fcb6 	bl	8000608 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	2b64      	cmp	r3, #100	; 0x64
 8000ca4:	d901      	bls.n	8000caa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e1e6      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000caa:	4b53      	ldr	r3, [pc, #332]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1f0      	bne.n	8000c98 <HAL_RCC_OscConfig+0x10c>
 8000cb6:	e000      	b.n	8000cba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d063      	beq.n	8000d8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cc6:	4b4c      	ldr	r3, [pc, #304]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 030c 	and.w	r3, r3, #12
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d00b      	beq.n	8000cea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cd2:	4b49      	ldr	r3, [pc, #292]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 030c 	and.w	r3, r3, #12
 8000cda:	2b08      	cmp	r3, #8
 8000cdc:	d11c      	bne.n	8000d18 <HAL_RCC_OscConfig+0x18c>
 8000cde:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d116      	bne.n	8000d18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cea:	4b43      	ldr	r3, [pc, #268]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d005      	beq.n	8000d02 <HAL_RCC_OscConfig+0x176>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d001      	beq.n	8000d02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e1ba      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d02:	4b3d      	ldr	r3, [pc, #244]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	4939      	ldr	r1, [pc, #228]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000d12:	4313      	orrs	r3, r2
 8000d14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d16:	e03a      	b.n	8000d8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d020      	beq.n	8000d62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d20:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <HAL_RCC_OscConfig+0x270>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d26:	f7ff fc6f 	bl	8000608 <HAL_GetTick>
 8000d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d2c:	e008      	b.n	8000d40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d2e:	f7ff fc6b 	bl	8000608 <HAL_GetTick>
 8000d32:	4602      	mov	r2, r0
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d901      	bls.n	8000d40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e19b      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d40:	4b2d      	ldr	r3, [pc, #180]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0f0      	beq.n	8000d2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	4927      	ldr	r1, [pc, #156]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	600b      	str	r3, [r1, #0]
 8000d60:	e015      	b.n	8000d8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d62:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <HAL_RCC_OscConfig+0x270>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d68:	f7ff fc4e 	bl	8000608 <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d6e:	e008      	b.n	8000d82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d70:	f7ff fc4a 	bl	8000608 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e17a      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d82:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1f0      	bne.n	8000d70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d03a      	beq.n	8000e10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d019      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_RCC_OscConfig+0x274>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da8:	f7ff fc2e 	bl	8000608 <HAL_GetTick>
 8000dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dae:	e008      	b.n	8000dc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db0:	f7ff fc2a 	bl	8000608 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d901      	bls.n	8000dc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e15a      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0f0      	beq.n	8000db0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f000 fa9a 	bl	8001308 <RCC_Delay>
 8000dd4:	e01c      	b.n	8000e10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_RCC_OscConfig+0x274>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ddc:	f7ff fc14 	bl	8000608 <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de2:	e00f      	b.n	8000e04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de4:	f7ff fc10 	bl	8000608 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d908      	bls.n	8000e04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e140      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	42420000 	.word	0x42420000
 8000e00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e04:	4b9e      	ldr	r3, [pc, #632]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1e9      	bne.n	8000de4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 80a6 	beq.w	8000f6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e22:	4b97      	ldr	r3, [pc, #604]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d10d      	bne.n	8000e4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4b94      	ldr	r3, [pc, #592]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	4a93      	ldr	r2, [pc, #588]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	61d3      	str	r3, [r2, #28]
 8000e3a:	4b91      	ldr	r3, [pc, #580]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e46:	2301      	movs	r3, #1
 8000e48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4a:	4b8e      	ldr	r3, [pc, #568]	; (8001084 <HAL_RCC_OscConfig+0x4f8>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d118      	bne.n	8000e88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e56:	4b8b      	ldr	r3, [pc, #556]	; (8001084 <HAL_RCC_OscConfig+0x4f8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a8a      	ldr	r2, [pc, #552]	; (8001084 <HAL_RCC_OscConfig+0x4f8>)
 8000e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e62:	f7ff fbd1 	bl	8000608 <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e68:	e008      	b.n	8000e7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e6a:	f7ff fbcd 	bl	8000608 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b64      	cmp	r3, #100	; 0x64
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e0fd      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e7c:	4b81      	ldr	r3, [pc, #516]	; (8001084 <HAL_RCC_OscConfig+0x4f8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f0      	beq.n	8000e6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d106      	bne.n	8000e9e <HAL_RCC_OscConfig+0x312>
 8000e90:	4b7b      	ldr	r3, [pc, #492]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	4a7a      	ldr	r2, [pc, #488]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6213      	str	r3, [r2, #32]
 8000e9c:	e02d      	b.n	8000efa <HAL_RCC_OscConfig+0x36e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10c      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x334>
 8000ea6:	4b76      	ldr	r3, [pc, #472]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	4a75      	ldr	r2, [pc, #468]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000eac:	f023 0301 	bic.w	r3, r3, #1
 8000eb0:	6213      	str	r3, [r2, #32]
 8000eb2:	4b73      	ldr	r3, [pc, #460]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000eb4:	6a1b      	ldr	r3, [r3, #32]
 8000eb6:	4a72      	ldr	r2, [pc, #456]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000eb8:	f023 0304 	bic.w	r3, r3, #4
 8000ebc:	6213      	str	r3, [r2, #32]
 8000ebe:	e01c      	b.n	8000efa <HAL_RCC_OscConfig+0x36e>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	2b05      	cmp	r3, #5
 8000ec6:	d10c      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x356>
 8000ec8:	4b6d      	ldr	r3, [pc, #436]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	4a6c      	ldr	r2, [pc, #432]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6213      	str	r3, [r2, #32]
 8000ed4:	4b6a      	ldr	r3, [pc, #424]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	4a69      	ldr	r2, [pc, #420]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6213      	str	r3, [r2, #32]
 8000ee0:	e00b      	b.n	8000efa <HAL_RCC_OscConfig+0x36e>
 8000ee2:	4b67      	ldr	r3, [pc, #412]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	4a66      	ldr	r2, [pc, #408]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000ee8:	f023 0301 	bic.w	r3, r3, #1
 8000eec:	6213      	str	r3, [r2, #32]
 8000eee:	4b64      	ldr	r3, [pc, #400]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	4a63      	ldr	r2, [pc, #396]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000ef4:	f023 0304 	bic.w	r3, r3, #4
 8000ef8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d015      	beq.n	8000f2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f02:	f7ff fb81 	bl	8000608 <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f08:	e00a      	b.n	8000f20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f0a:	f7ff fb7d 	bl	8000608 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e0ab      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f20:	4b57      	ldr	r3, [pc, #348]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0ee      	beq.n	8000f0a <HAL_RCC_OscConfig+0x37e>
 8000f2c:	e014      	b.n	8000f58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fb6b 	bl	8000608 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f34:	e00a      	b.n	8000f4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f36:	f7ff fb67 	bl	8000608 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e095      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f4c:	4b4c      	ldr	r3, [pc, #304]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1ee      	bne.n	8000f36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f58:	7dfb      	ldrb	r3, [r7, #23]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d105      	bne.n	8000f6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f5e:	4b48      	ldr	r3, [pc, #288]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	4a47      	ldr	r2, [pc, #284]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 8081 	beq.w	8001076 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f74:	4b42      	ldr	r3, [pc, #264]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 030c 	and.w	r3, r3, #12
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d061      	beq.n	8001044 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d146      	bne.n	8001016 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f88:	4b3f      	ldr	r3, [pc, #252]	; (8001088 <HAL_RCC_OscConfig+0x4fc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8e:	f7ff fb3b 	bl	8000608 <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f96:	f7ff fb37 	bl	8000608 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e067      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa8:	4b35      	ldr	r3, [pc, #212]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1f0      	bne.n	8000f96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fbc:	d108      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fbe:	4b30      	ldr	r3, [pc, #192]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	492d      	ldr	r1, [pc, #180]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fd0:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a19      	ldr	r1, [r3, #32]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	430b      	orrs	r3, r1
 8000fe2:	4927      	ldr	r1, [pc, #156]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fe8:	4b27      	ldr	r3, [pc, #156]	; (8001088 <HAL_RCC_OscConfig+0x4fc>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fee:	f7ff fb0b 	bl	8000608 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff6:	f7ff fb07 	bl	8000608 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e037      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0f0      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x46a>
 8001014:	e02f      	b.n	8001076 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001016:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <HAL_RCC_OscConfig+0x4fc>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff faf4 	bl	8000608 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001024:	f7ff faf0 	bl	8000608 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e020      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0x498>
 8001042:	e018      	b.n	8001076 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d101      	bne.n	8001050 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e013      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	429a      	cmp	r2, r3
 8001062:	d106      	bne.n	8001072 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800106e:	429a      	cmp	r2, r3
 8001070:	d001      	beq.n	8001076 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021000 	.word	0x40021000
 8001084:	40007000 	.word	0x40007000
 8001088:	42420060 	.word	0x42420060

0800108c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e0d0      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010a0:	4b6a      	ldr	r3, [pc, #424]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d910      	bls.n	80010d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ae:	4b67      	ldr	r3, [pc, #412]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f023 0207 	bic.w	r2, r3, #7
 80010b6:	4965      	ldr	r1, [pc, #404]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010be:	4b63      	ldr	r3, [pc, #396]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d001      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e0b8      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d020      	beq.n	800111e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d005      	beq.n	80010f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e8:	4b59      	ldr	r3, [pc, #356]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4a58      	ldr	r2, [pc, #352]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80010ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001100:	4b53      	ldr	r3, [pc, #332]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4a52      	ldr	r2, [pc, #328]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001106:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800110a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800110c:	4b50      	ldr	r3, [pc, #320]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	494d      	ldr	r1, [pc, #308]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	4313      	orrs	r3, r2
 800111c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d040      	beq.n	80011ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d107      	bne.n	8001142 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	4b47      	ldr	r3, [pc, #284]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d115      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e07f      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d107      	bne.n	800115a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800114a:	4b41      	ldr	r3, [pc, #260]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e073      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115a:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e06b      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800116a:	4b39      	ldr	r3, [pc, #228]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f023 0203 	bic.w	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4936      	ldr	r1, [pc, #216]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	4313      	orrs	r3, r2
 800117a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800117c:	f7ff fa44 	bl	8000608 <HAL_GetTick>
 8001180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001182:	e00a      	b.n	800119a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001184:	f7ff fa40 	bl	8000608 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001192:	4293      	cmp	r3, r2
 8001194:	d901      	bls.n	800119a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e053      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800119a:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 020c 	and.w	r2, r3, #12
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d1eb      	bne.n	8001184 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011ac:	4b27      	ldr	r3, [pc, #156]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d210      	bcs.n	80011dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ba:	4b24      	ldr	r3, [pc, #144]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 0207 	bic.w	r2, r3, #7
 80011c2:	4922      	ldr	r1, [pc, #136]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d001      	beq.n	80011dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e032      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d008      	beq.n	80011fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	4916      	ldr	r1, [pc, #88]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d009      	beq.n	800121a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	490e      	ldr	r1, [pc, #56]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	4313      	orrs	r3, r2
 8001218:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800121a:	f000 f821 	bl	8001260 <HAL_RCC_GetSysClockFreq>
 800121e:	4602      	mov	r2, r0
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	091b      	lsrs	r3, r3, #4
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	490a      	ldr	r1, [pc, #40]	; (8001254 <HAL_RCC_ClockConfig+0x1c8>)
 800122c:	5ccb      	ldrb	r3, [r1, r3]
 800122e:	fa22 f303 	lsr.w	r3, r2, r3
 8001232:	4a09      	ldr	r2, [pc, #36]	; (8001258 <HAL_RCC_ClockConfig+0x1cc>)
 8001234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_RCC_ClockConfig+0x1d0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f9a2 	bl	8000584 <HAL_InitTick>

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40022000 	.word	0x40022000
 8001250:	40021000 	.word	0x40021000
 8001254:	080029a0 	.word	0x080029a0
 8001258:	20000014 	.word	0x20000014
 800125c:	20000018 	.word	0x20000018

08001260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b04      	cmp	r3, #4
 8001288:	d002      	beq.n	8001290 <HAL_RCC_GetSysClockFreq+0x30>
 800128a:	2b08      	cmp	r3, #8
 800128c:	d003      	beq.n	8001296 <HAL_RCC_GetSysClockFreq+0x36>
 800128e:	e027      	b.n	80012e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001292:	613b      	str	r3, [r7, #16]
      break;
 8001294:	e027      	b.n	80012e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	0c9b      	lsrs	r3, r3, #18
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	4a17      	ldr	r2, [pc, #92]	; (80012fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80012a0:	5cd3      	ldrb	r3, [r2, r3]
 80012a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d010      	beq.n	80012d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	0c5b      	lsrs	r3, r3, #17
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	4a11      	ldr	r2, [pc, #68]	; (8001300 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012ba:	5cd3      	ldrb	r3, [r2, r3]
 80012bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80012c2:	fb02 f203 	mul.w	r2, r2, r3
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	e004      	b.n	80012da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a0c      	ldr	r2, [pc, #48]	; (8001304 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
 80012d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	613b      	str	r3, [r7, #16]
      break;
 80012de:	e002      	b.n	80012e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80012e2:	613b      	str	r3, [r7, #16]
      break;
 80012e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012e6:	693b      	ldr	r3, [r7, #16]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	371c      	adds	r7, #28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000
 80012f8:	007a1200 	.word	0x007a1200
 80012fc:	080029b0 	.word	0x080029b0
 8001300:	080029c0 	.word	0x080029c0
 8001304:	003d0900 	.word	0x003d0900

08001308 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <RCC_Delay+0x34>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <RCC_Delay+0x38>)
 8001316:	fba2 2303 	umull	r2, r3, r2, r3
 800131a:	0a5b      	lsrs	r3, r3, #9
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	fb02 f303 	mul.w	r3, r2, r3
 8001322:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001324:	bf00      	nop
  }
  while (Delay --);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	1e5a      	subs	r2, r3, #1
 800132a:	60fa      	str	r2, [r7, #12]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f9      	bne.n	8001324 <RCC_Delay+0x1c>
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	20000014 	.word	0x20000014
 8001340:	10624dd3 	.word	0x10624dd3

08001344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e041      	b.n	80013da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d106      	bne.n	8001370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff f872 	bl	8000454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2202      	movs	r2, #2
 8001374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3304      	adds	r3, #4
 8001380:	4619      	mov	r1, r3
 8001382:	4610      	mov	r0, r2
 8001384:	f000 fa56 	bl	8001834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d001      	beq.n	80013fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e035      	b.n	8001468 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2202      	movs	r2, #2
 8001400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0201 	orr.w	r2, r2, #1
 8001412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a16      	ldr	r2, [pc, #88]	; (8001474 <HAL_TIM_Base_Start_IT+0x90>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d009      	beq.n	8001432 <HAL_TIM_Base_Start_IT+0x4e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001426:	d004      	beq.n	8001432 <HAL_TIM_Base_Start_IT+0x4e>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a12      	ldr	r2, [pc, #72]	; (8001478 <HAL_TIM_Base_Start_IT+0x94>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d111      	bne.n	8001456 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2b06      	cmp	r3, #6
 8001442:	d010      	beq.n	8001466 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001454:	e007      	b.n	8001466 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f042 0201 	orr.w	r2, r2, #1
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40012c00 	.word	0x40012c00
 8001478:	40000400 	.word	0x40000400

0800147c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d020      	beq.n	80014e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d01b      	beq.n	80014e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f06f 0202 	mvn.w	r2, #2
 80014b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f998 	bl	80017fc <HAL_TIM_IC_CaptureCallback>
 80014cc:	e005      	b.n	80014da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 f98b 	bl	80017ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f99a 	bl	800180e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d020      	beq.n	800152c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d01b      	beq.n	800152c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f06f 0204 	mvn.w	r2, #4
 80014fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2202      	movs	r2, #2
 8001502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f972 	bl	80017fc <HAL_TIM_IC_CaptureCallback>
 8001518:	e005      	b.n	8001526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f965 	bl	80017ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f974 	bl	800180e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d020      	beq.n	8001578 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d01b      	beq.n	8001578 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f06f 0208 	mvn.w	r2, #8
 8001548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2204      	movs	r2, #4
 800154e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f94c 	bl	80017fc <HAL_TIM_IC_CaptureCallback>
 8001564:	e005      	b.n	8001572 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f93f 	bl	80017ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f94e 	bl	800180e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	2b00      	cmp	r3, #0
 8001580:	d020      	beq.n	80015c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	2b00      	cmp	r3, #0
 800158a:	d01b      	beq.n	80015c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f06f 0210 	mvn.w	r2, #16
 8001594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2208      	movs	r2, #8
 800159a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f926 	bl	80017fc <HAL_TIM_IC_CaptureCallback>
 80015b0:	e005      	b.n	80015be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f919 	bl	80017ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 f928 	bl	800180e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00c      	beq.n	80015e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d007      	beq.n	80015e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f06f 0201 	mvn.w	r2, #1
 80015e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7fe feec 	bl	80003c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00c      	beq.n	800160c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d007      	beq.n	800160c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 fa6f 	bl	8001aea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00c      	beq.n	8001630 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161c:	2b00      	cmp	r3, #0
 800161e:	d007      	beq.n	8001630 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f8f8 	bl	8001820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	f003 0320 	and.w	r3, r3, #32
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00c      	beq.n	8001654 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f003 0320 	and.w	r3, r3, #32
 8001640:	2b00      	cmp	r3, #0
 8001642:	d007      	beq.n	8001654 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f06f 0220 	mvn.w	r2, #32
 800164c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fa42 	bl	8001ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_TIM_ConfigClockSource+0x1c>
 8001674:	2302      	movs	r3, #2
 8001676:	e0b4      	b.n	80017e2 <HAL_TIM_ConfigClockSource+0x186>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2202      	movs	r2, #2
 8001684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800169e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016b0:	d03e      	beq.n	8001730 <HAL_TIM_ConfigClockSource+0xd4>
 80016b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016b6:	f200 8087 	bhi.w	80017c8 <HAL_TIM_ConfigClockSource+0x16c>
 80016ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016be:	f000 8086 	beq.w	80017ce <HAL_TIM_ConfigClockSource+0x172>
 80016c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016c6:	d87f      	bhi.n	80017c8 <HAL_TIM_ConfigClockSource+0x16c>
 80016c8:	2b70      	cmp	r3, #112	; 0x70
 80016ca:	d01a      	beq.n	8001702 <HAL_TIM_ConfigClockSource+0xa6>
 80016cc:	2b70      	cmp	r3, #112	; 0x70
 80016ce:	d87b      	bhi.n	80017c8 <HAL_TIM_ConfigClockSource+0x16c>
 80016d0:	2b60      	cmp	r3, #96	; 0x60
 80016d2:	d050      	beq.n	8001776 <HAL_TIM_ConfigClockSource+0x11a>
 80016d4:	2b60      	cmp	r3, #96	; 0x60
 80016d6:	d877      	bhi.n	80017c8 <HAL_TIM_ConfigClockSource+0x16c>
 80016d8:	2b50      	cmp	r3, #80	; 0x50
 80016da:	d03c      	beq.n	8001756 <HAL_TIM_ConfigClockSource+0xfa>
 80016dc:	2b50      	cmp	r3, #80	; 0x50
 80016de:	d873      	bhi.n	80017c8 <HAL_TIM_ConfigClockSource+0x16c>
 80016e0:	2b40      	cmp	r3, #64	; 0x40
 80016e2:	d058      	beq.n	8001796 <HAL_TIM_ConfigClockSource+0x13a>
 80016e4:	2b40      	cmp	r3, #64	; 0x40
 80016e6:	d86f      	bhi.n	80017c8 <HAL_TIM_ConfigClockSource+0x16c>
 80016e8:	2b30      	cmp	r3, #48	; 0x30
 80016ea:	d064      	beq.n	80017b6 <HAL_TIM_ConfigClockSource+0x15a>
 80016ec:	2b30      	cmp	r3, #48	; 0x30
 80016ee:	d86b      	bhi.n	80017c8 <HAL_TIM_ConfigClockSource+0x16c>
 80016f0:	2b20      	cmp	r3, #32
 80016f2:	d060      	beq.n	80017b6 <HAL_TIM_ConfigClockSource+0x15a>
 80016f4:	2b20      	cmp	r3, #32
 80016f6:	d867      	bhi.n	80017c8 <HAL_TIM_ConfigClockSource+0x16c>
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d05c      	beq.n	80017b6 <HAL_TIM_ConfigClockSource+0x15a>
 80016fc:	2b10      	cmp	r3, #16
 80016fe:	d05a      	beq.n	80017b6 <HAL_TIM_ConfigClockSource+0x15a>
 8001700:	e062      	b.n	80017c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6818      	ldr	r0, [r3, #0]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	6899      	ldr	r1, [r3, #8]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	f000 f96a 	bl	80019ea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001724:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	609a      	str	r2, [r3, #8]
      break;
 800172e:	e04f      	b.n	80017d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6818      	ldr	r0, [r3, #0]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	6899      	ldr	r1, [r3, #8]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f000 f953 	bl	80019ea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001752:	609a      	str	r2, [r3, #8]
      break;
 8001754:	e03c      	b.n	80017d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	6859      	ldr	r1, [r3, #4]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	461a      	mov	r2, r3
 8001764:	f000 f8ca 	bl	80018fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2150      	movs	r1, #80	; 0x50
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f921 	bl	80019b6 <TIM_ITRx_SetConfig>
      break;
 8001774:	e02c      	b.n	80017d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	6859      	ldr	r1, [r3, #4]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	461a      	mov	r2, r3
 8001784:	f000 f8e8 	bl	8001958 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2160      	movs	r1, #96	; 0x60
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f911 	bl	80019b6 <TIM_ITRx_SetConfig>
      break;
 8001794:	e01c      	b.n	80017d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	6859      	ldr	r1, [r3, #4]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	461a      	mov	r2, r3
 80017a4:	f000 f8aa 	bl	80018fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2140      	movs	r1, #64	; 0x40
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f901 	bl	80019b6 <TIM_ITRx_SetConfig>
      break;
 80017b4:	e00c      	b.n	80017d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4619      	mov	r1, r3
 80017c0:	4610      	mov	r0, r2
 80017c2:	f000 f8f8 	bl	80019b6 <TIM_ITRx_SetConfig>
      break;
 80017c6:	e003      	b.n	80017d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
      break;
 80017cc:	e000      	b.n	80017d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80017ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
	...

08001834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a2b      	ldr	r2, [pc, #172]	; (80018f4 <TIM_Base_SetConfig+0xc0>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d007      	beq.n	800185c <TIM_Base_SetConfig+0x28>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001852:	d003      	beq.n	800185c <TIM_Base_SetConfig+0x28>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a28      	ldr	r2, [pc, #160]	; (80018f8 <TIM_Base_SetConfig+0xc4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d108      	bne.n	800186e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a20      	ldr	r2, [pc, #128]	; (80018f4 <TIM_Base_SetConfig+0xc0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <TIM_Base_SetConfig+0x52>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800187c:	d003      	beq.n	8001886 <TIM_Base_SetConfig+0x52>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <TIM_Base_SetConfig+0xc4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d108      	bne.n	8001898 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800188c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4313      	orrs	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a0d      	ldr	r2, [pc, #52]	; (80018f4 <TIM_Base_SetConfig+0xc0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d103      	bne.n	80018cc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	691a      	ldr	r2, [r3, #16]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	f023 0201 	bic.w	r2, r3, #1
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	611a      	str	r2, [r3, #16]
  }
}
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	40012c00 	.word	0x40012c00
 80018f8:	40000400 	.word	0x40000400

080018fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	f023 0201 	bic.w	r2, r3, #1
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f023 030a 	bic.w	r3, r3, #10
 8001938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4313      	orrs	r3, r2
 8001940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	621a      	str	r2, [r3, #32]
}
 800194e:	bf00      	nop
 8001950:	371c      	adds	r7, #28
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	f023 0210 	bic.w	r2, r3, #16
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	031b      	lsls	r3, r3, #12
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001994:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4313      	orrs	r3, r2
 800199e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	621a      	str	r2, [r3, #32]
}
 80019ac:	bf00      	nop
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	f043 0307 	orr.w	r3, r3, #7
 80019d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	609a      	str	r2, [r3, #8]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b087      	sub	sp, #28
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	609a      	str	r2, [r3, #8]
}
 8001a1e:	bf00      	nop
 8001a20:	371c      	adds	r7, #28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e041      	b.n	8001ac4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a14      	ldr	r2, [pc, #80]	; (8001ad0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d009      	beq.n	8001a98 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a8c:	d004      	beq.n	8001a98 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a10      	ldr	r2, [pc, #64]	; (8001ad4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d10c      	bne.n	8001ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40012c00 	.word	0x40012c00
 8001ad4:	40000400 	.word	0x40000400

08001ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <DISPLAY_LED_7_SEGMENT>:
 *  Created on: Sep 2, 2024
 *      Author: thuyh
 */
#include "LED7_SEGMENT.h"
void DISPLAY_LED_7_SEGMENT(GPIO_TypeDef* GPIOx,uint16_t LED_7_0,uint16_t LED_7_1,uint16_t LED_7_2,uint16_t LED_7_3,uint16_t LED_7_4
		,uint16_t LED_7_5,uint16_t LED_7_6 ,uint8_t digit){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	4608      	mov	r0, r1
 8001b06:	4611      	mov	r1, r2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	817b      	strh	r3, [r7, #10]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	813b      	strh	r3, [r7, #8]
 8001b12:	4613      	mov	r3, r2
 8001b14:	80fb      	strh	r3, [r7, #6]
		switch(digit){
 8001b16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b1a:	2b09      	cmp	r3, #9
 8001b1c:	f200 81c6 	bhi.w	8001eac <DISPLAY_LED_7_SEGMENT+0x3b0>
 8001b20:	a201      	add	r2, pc, #4	; (adr r2, 8001b28 <DISPLAY_LED_7_SEGMENT+0x2c>)
 8001b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b26:	bf00      	nop
 8001b28:	08001b51 	.word	0x08001b51
 8001b2c:	08001ba7 	.word	0x08001ba7
 8001b30:	08001bfd 	.word	0x08001bfd
 8001b34:	08001c53 	.word	0x08001c53
 8001b38:	08001ca9 	.word	0x08001ca9
 8001b3c:	08001cff 	.word	0x08001cff
 8001b40:	08001d55 	.word	0x08001d55
 8001b44:	08001dab 	.word	0x08001dab
 8001b48:	08001e01 	.word	0x08001e01
 8001b4c:	08001e57 	.word	0x08001e57
			case 0:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001b50:	897b      	ldrh	r3, [r7, #10]
 8001b52:	2200      	movs	r2, #0
 8001b54:	4619      	mov	r1, r3
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f7fe ffff 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001b5c:	893b      	ldrh	r3, [r7, #8]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	4619      	mov	r1, r3
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f7fe fff9 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f7fe fff3 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001b74:	8b3b      	ldrh	r3, [r7, #24]
 8001b76:	2200      	movs	r2, #0
 8001b78:	4619      	mov	r1, r3
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f7fe ffed 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, RESET);
 8001b80:	8bbb      	ldrh	r3, [r7, #28]
 8001b82:	2200      	movs	r2, #0
 8001b84:	4619      	mov	r1, r3
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f7fe ffe7 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8001b8c:	8c3b      	ldrh	r3, [r7, #32]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	4619      	mov	r1, r3
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f7fe ffe1 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, SET);
 8001b98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f7fe ffdb 	bl	8000b5a <HAL_GPIO_WritePin>
					break;
 8001ba4:	e1ad      	b.n	8001f02 <DISPLAY_LED_7_SEGMENT+0x406>
			case 1:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, SET);
 8001ba6:	897b      	ldrh	r3, [r7, #10]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4619      	mov	r1, r3
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f7fe ffd4 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001bb2:	893b      	ldrh	r3, [r7, #8]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f7fe ffce 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f7fe ffc8 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, SET);
 8001bca:	8b3b      	ldrh	r3, [r7, #24]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4619      	mov	r1, r3
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f7fe ffc2 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001bd6:	8bbb      	ldrh	r3, [r7, #28]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4619      	mov	r1, r3
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f7fe ffbc 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 8001be2:	8c3b      	ldrh	r3, [r7, #32]
 8001be4:	2201      	movs	r2, #1
 8001be6:	4619      	mov	r1, r3
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f7fe ffb6 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, SET);
 8001bee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f7fe ffb0 	bl	8000b5a <HAL_GPIO_WritePin>
					break;
 8001bfa:	e182      	b.n	8001f02 <DISPLAY_LED_7_SEGMENT+0x406>
			case 2:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001bfc:	897b      	ldrh	r3, [r7, #10]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	4619      	mov	r1, r3
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f7fe ffa9 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001c08:	893b      	ldrh	r3, [r7, #8]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f7fe ffa3 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, SET);
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	2201      	movs	r2, #1
 8001c18:	4619      	mov	r1, r3
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f7fe ff9d 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001c20:	8b3b      	ldrh	r3, [r7, #24]
 8001c22:	2200      	movs	r2, #0
 8001c24:	4619      	mov	r1, r3
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f7fe ff97 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, RESET);
 8001c2c:	8bbb      	ldrh	r3, [r7, #28]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	4619      	mov	r1, r3
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f7fe ff91 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 8001c38:	8c3b      	ldrh	r3, [r7, #32]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f7fe ff8b 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001c44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c46:	2200      	movs	r2, #0
 8001c48:	4619      	mov	r1, r3
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f7fe ff85 	bl	8000b5a <HAL_GPIO_WritePin>
				    break;
 8001c50:	e157      	b.n	8001f02 <DISPLAY_LED_7_SEGMENT+0x406>
			case 3:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001c52:	897b      	ldrh	r3, [r7, #10]
 8001c54:	2200      	movs	r2, #0
 8001c56:	4619      	mov	r1, r3
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f7fe ff7e 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001c5e:	893b      	ldrh	r3, [r7, #8]
 8001c60:	2200      	movs	r2, #0
 8001c62:	4619      	mov	r1, r3
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f7fe ff78 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f7fe ff72 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001c76:	8b3b      	ldrh	r3, [r7, #24]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f7fe ff6c 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001c82:	8bbb      	ldrh	r3, [r7, #28]
 8001c84:	2201      	movs	r2, #1
 8001c86:	4619      	mov	r1, r3
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f7fe ff66 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 8001c8e:	8c3b      	ldrh	r3, [r7, #32]
 8001c90:	2201      	movs	r2, #1
 8001c92:	4619      	mov	r1, r3
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7fe ff60 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001c9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f7fe ff5a 	bl	8000b5a <HAL_GPIO_WritePin>
					break;
 8001ca6:	e12c      	b.n	8001f02 <DISPLAY_LED_7_SEGMENT+0x406>
			case 4:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, SET);
 8001ca8:	897b      	ldrh	r3, [r7, #10]
 8001caa:	2201      	movs	r2, #1
 8001cac:	4619      	mov	r1, r3
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f7fe ff53 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001cb4:	893b      	ldrh	r3, [r7, #8]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	4619      	mov	r1, r3
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f7fe ff4d 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f7fe ff47 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, SET);
 8001ccc:	8b3b      	ldrh	r3, [r7, #24]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f7fe ff41 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001cd8:	8bbb      	ldrh	r3, [r7, #28]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4619      	mov	r1, r3
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f7fe ff3b 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8001ce4:	8c3b      	ldrh	r3, [r7, #32]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f7fe ff35 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001cf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f7fe ff2f 	bl	8000b5a <HAL_GPIO_WritePin>
					break;
 8001cfc:	e101      	b.n	8001f02 <DISPLAY_LED_7_SEGMENT+0x406>
			case 5:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001cfe:	897b      	ldrh	r3, [r7, #10]
 8001d00:	2200      	movs	r2, #0
 8001d02:	4619      	mov	r1, r3
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f7fe ff28 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, SET);
 8001d0a:	893b      	ldrh	r3, [r7, #8]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4619      	mov	r1, r3
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f7fe ff22 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f7fe ff1c 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001d22:	8b3b      	ldrh	r3, [r7, #24]
 8001d24:	2200      	movs	r2, #0
 8001d26:	4619      	mov	r1, r3
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f7fe ff16 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001d2e:	8bbb      	ldrh	r3, [r7, #28]
 8001d30:	2201      	movs	r2, #1
 8001d32:	4619      	mov	r1, r3
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f7fe ff10 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8001d3a:	8c3b      	ldrh	r3, [r7, #32]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	4619      	mov	r1, r3
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f7fe ff0a 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d48:	2200      	movs	r2, #0
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f7fe ff04 	bl	8000b5a <HAL_GPIO_WritePin>
					break;
 8001d52:	e0d6      	b.n	8001f02 <DISPLAY_LED_7_SEGMENT+0x406>
			case 6:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001d54:	897b      	ldrh	r3, [r7, #10]
 8001d56:	2200      	movs	r2, #0
 8001d58:	4619      	mov	r1, r3
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f7fe fefd 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, SET);
 8001d60:	893b      	ldrh	r3, [r7, #8]
 8001d62:	2201      	movs	r2, #1
 8001d64:	4619      	mov	r1, r3
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f7fe fef7 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	4619      	mov	r1, r3
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f7fe fef1 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001d78:	8b3b      	ldrh	r3, [r7, #24]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f7fe feeb 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, RESET);
 8001d84:	8bbb      	ldrh	r3, [r7, #28]
 8001d86:	2200      	movs	r2, #0
 8001d88:	4619      	mov	r1, r3
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f7fe fee5 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8001d90:	8c3b      	ldrh	r3, [r7, #32]
 8001d92:	2200      	movs	r2, #0
 8001d94:	4619      	mov	r1, r3
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f7fe fedf 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001d9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d9e:	2200      	movs	r2, #0
 8001da0:	4619      	mov	r1, r3
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7fe fed9 	bl	8000b5a <HAL_GPIO_WritePin>
					break;
 8001da8:	e0ab      	b.n	8001f02 <DISPLAY_LED_7_SEGMENT+0x406>
			case 7:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001daa:	897b      	ldrh	r3, [r7, #10]
 8001dac:	2200      	movs	r2, #0
 8001dae:	4619      	mov	r1, r3
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f7fe fed2 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001db6:	893b      	ldrh	r3, [r7, #8]
 8001db8:	2200      	movs	r2, #0
 8001dba:	4619      	mov	r1, r3
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f7fe fecc 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f7fe fec6 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, SET);
 8001dce:	8b3b      	ldrh	r3, [r7, #24]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f7fe fec0 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001dda:	8bbb      	ldrh	r3, [r7, #28]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	4619      	mov	r1, r3
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f7fe feba 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 8001de6:	8c3b      	ldrh	r3, [r7, #32]
 8001de8:	2201      	movs	r2, #1
 8001dea:	4619      	mov	r1, r3
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f7fe feb4 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, SET);
 8001df2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001df4:	2201      	movs	r2, #1
 8001df6:	4619      	mov	r1, r3
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f7fe feae 	bl	8000b5a <HAL_GPIO_WritePin>
					break;
 8001dfe:	e080      	b.n	8001f02 <DISPLAY_LED_7_SEGMENT+0x406>
			case 8:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001e00:	897b      	ldrh	r3, [r7, #10]
 8001e02:	2200      	movs	r2, #0
 8001e04:	4619      	mov	r1, r3
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f7fe fea7 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001e0c:	893b      	ldrh	r3, [r7, #8]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	4619      	mov	r1, r3
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7fe fea1 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f7fe fe9b 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001e24:	8b3b      	ldrh	r3, [r7, #24]
 8001e26:	2200      	movs	r2, #0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f7fe fe95 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, RESET);
 8001e30:	8bbb      	ldrh	r3, [r7, #28]
 8001e32:	2200      	movs	r2, #0
 8001e34:	4619      	mov	r1, r3
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7fe fe8f 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8001e3c:	8c3b      	ldrh	r3, [r7, #32]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	4619      	mov	r1, r3
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f7fe fe89 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001e48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f7fe fe83 	bl	8000b5a <HAL_GPIO_WritePin>
					break;
 8001e54:	e055      	b.n	8001f02 <DISPLAY_LED_7_SEGMENT+0x406>
			case 9:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001e56:	897b      	ldrh	r3, [r7, #10]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f7fe fe7c 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001e62:	893b      	ldrh	r3, [r7, #8]
 8001e64:	2200      	movs	r2, #0
 8001e66:	4619      	mov	r1, r3
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f7fe fe76 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	2200      	movs	r2, #0
 8001e72:	4619      	mov	r1, r3
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f7fe fe70 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001e7a:	8b3b      	ldrh	r3, [r7, #24]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4619      	mov	r1, r3
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f7fe fe6a 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001e86:	8bbb      	ldrh	r3, [r7, #28]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f7fe fe64 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8001e92:	8c3b      	ldrh	r3, [r7, #32]
 8001e94:	2200      	movs	r2, #0
 8001e96:	4619      	mov	r1, r3
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f7fe fe5e 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001e9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f7fe fe58 	bl	8000b5a <HAL_GPIO_WritePin>
					break;
 8001eaa:	e02a      	b.n	8001f02 <DISPLAY_LED_7_SEGMENT+0x406>
			default:
								HAL_GPIO_WritePin(GPIOx, LED_7_0, SET);
 8001eac:	897b      	ldrh	r3, [r7, #10]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f7fe fe51 	bl	8000b5a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_1, SET);
 8001eb8:	893b      	ldrh	r3, [r7, #8]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f7fe fe4b 	bl	8000b5a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_2, SET);
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4619      	mov	r1, r3
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f7fe fe45 	bl	8000b5a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_3, SET);
 8001ed0:	8b3b      	ldrh	r3, [r7, #24]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f7fe fe3f 	bl	8000b5a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001edc:	8bbb      	ldrh	r3, [r7, #28]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f7fe fe39 	bl	8000b5a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 8001ee8:	8c3b      	ldrh	r3, [r7, #32]
 8001eea:	2201      	movs	r2, #1
 8001eec:	4619      	mov	r1, r3
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f7fe fe33 	bl	8000b5a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_6, SET);
 8001ef4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	4619      	mov	r1, r3
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f7fe fe2d 	bl	8000b5a <HAL_GPIO_WritePin>
				break;
 8001f00:	bf00      	nop
			}

}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop

08001f0c <traffic_double_display>:
int time_1 = 5;
int	time_2 = 5;
uint8_t redred ;

void traffic_double_display(GPIO_TypeDef * GPIOx1, uint16_t LED_RED1, uint16_t LED_YELLOW1, uint16_t LED_GREEN1,
                            GPIO_TypeDef * GPIOx2, uint16_t LED_RED2, uint16_t LED_YELLOW2, uint16_t LED_GREEN2, int status) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af02      	add	r7, sp, #8
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	4608      	mov	r0, r1
 8001f16:	4611      	mov	r1, r2
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	817b      	strh	r3, [r7, #10]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	813b      	strh	r3, [r7, #8]
 8001f22:	4613      	mov	r3, r2
 8001f24:	80fb      	strh	r3, [r7, #6]
 8001f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	2b0e      	cmp	r3, #14
 8001f2c:	f200 80cf 	bhi.w	80020ce <traffic_double_display+0x1c2>
 8001f30:	a201      	add	r2, pc, #4	; (adr r2, 8001f38 <traffic_double_display+0x2c>)
 8001f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f36:	bf00      	nop
 8001f38:	08001ffd 	.word	0x08001ffd
 8001f3c:	08001f75 	.word	0x08001f75
 8001f40:	08001f97 	.word	0x08001f97
 8001f44:	08001fb9 	.word	0x08001fb9
 8001f48:	08001fdb 	.word	0x08001fdb
 8001f4c:	08002047 	.word	0x08002047
 8001f50:	08002047 	.word	0x08002047
 8001f54:	08002069 	.word	0x08002069
 8001f58:	0800208b 	.word	0x0800208b
 8001f5c:	080020ad 	.word	0x080020ad
 8001f60:	080020cf 	.word	0x080020cf
 8001f64:	08001f75 	.word	0x08001f75
 8001f68:	08001f97 	.word	0x08001f97
 8001f6c:	08001fb9 	.word	0x08001fb9
 8001f70:	08001fdb 	.word	0x08001fdb
    switch(status) {
        case GREEN_RED:
        case MAN_GREEN_RED:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, GREEN);
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	893a      	ldrh	r2, [r7, #8]
 8001f78:	8979      	ldrh	r1, [r7, #10]
 8001f7a:	2002      	movs	r0, #2
 8001f7c:	9000      	str	r0, [sp, #0]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 f8ce 	bl	8002120 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
 8001f84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f86:	8c3a      	ldrh	r2, [r7, #32]
 8001f88:	8bb9      	ldrh	r1, [r7, #28]
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	9000      	str	r0, [sp, #0]
 8001f8e:	69b8      	ldr	r0, [r7, #24]
 8001f90:	f000 f8c6 	bl	8002120 <traffic_display>
            break;
 8001f94:	e0c0      	b.n	8002118 <traffic_double_display+0x20c>
        case YELLOW_RED:
        case MAN_YELLOW_RED:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, YELLOW);
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	893a      	ldrh	r2, [r7, #8]
 8001f9a:	8979      	ldrh	r1, [r7, #10]
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	9000      	str	r0, [sp, #0]
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 f8bd 	bl	8002120 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
 8001fa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fa8:	8c3a      	ldrh	r2, [r7, #32]
 8001faa:	8bb9      	ldrh	r1, [r7, #28]
 8001fac:	2000      	movs	r0, #0
 8001fae:	9000      	str	r0, [sp, #0]
 8001fb0:	69b8      	ldr	r0, [r7, #24]
 8001fb2:	f000 f8b5 	bl	8002120 <traffic_display>
            break;
 8001fb6:	e0af      	b.n	8002118 <traffic_double_display+0x20c>
        case RED_GREEN:
        case MAN_RED_GREEN:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	893a      	ldrh	r2, [r7, #8]
 8001fbc:	8979      	ldrh	r1, [r7, #10]
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	9000      	str	r0, [sp, #0]
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 f8ac 	bl	8002120 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, GREEN);
 8001fc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fca:	8c3a      	ldrh	r2, [r7, #32]
 8001fcc:	8bb9      	ldrh	r1, [r7, #28]
 8001fce:	2002      	movs	r0, #2
 8001fd0:	9000      	str	r0, [sp, #0]
 8001fd2:	69b8      	ldr	r0, [r7, #24]
 8001fd4:	f000 f8a4 	bl	8002120 <traffic_display>
            break;
 8001fd8:	e09e      	b.n	8002118 <traffic_double_display+0x20c>
        case RED_YELLOW:
        case MAN_RED_YELLOW:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	893a      	ldrh	r2, [r7, #8]
 8001fde:	8979      	ldrh	r1, [r7, #10]
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	9000      	str	r0, [sp, #0]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f89b 	bl	8002120 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, YELLOW);
 8001fea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fec:	8c3a      	ldrh	r2, [r7, #32]
 8001fee:	8bb9      	ldrh	r1, [r7, #28]
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	9000      	str	r0, [sp, #0]
 8001ff4:	69b8      	ldr	r0, [r7, #24]
 8001ff6:	f000 f893 	bl	8002120 <traffic_display>
            break;
 8001ffa:	e08d      	b.n	8002118 <traffic_double_display+0x20c>
        case INIT:
            HAL_GPIO_WritePin(GPIOx1, LED_RED1, RESET);
 8001ffc:	897b      	ldrh	r3, [r7, #10]
 8001ffe:	2200      	movs	r2, #0
 8002000:	4619      	mov	r1, r3
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f7fe fda9 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_YELLOW1, RESET);
 8002008:	893b      	ldrh	r3, [r7, #8]
 800200a:	2200      	movs	r2, #0
 800200c:	4619      	mov	r1, r3
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f7fe fda3 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_GREEN1, RESET);
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	2200      	movs	r2, #0
 8002018:	4619      	mov	r1, r3
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f7fe fd9d 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_RED2, RESET);
 8002020:	8bbb      	ldrh	r3, [r7, #28]
 8002022:	2200      	movs	r2, #0
 8002024:	4619      	mov	r1, r3
 8002026:	69b8      	ldr	r0, [r7, #24]
 8002028:	f7fe fd97 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_YELLOW2, RESET);
 800202c:	8c3b      	ldrh	r3, [r7, #32]
 800202e:	2200      	movs	r2, #0
 8002030:	4619      	mov	r1, r3
 8002032:	69b8      	ldr	r0, [r7, #24]
 8002034:	f7fe fd91 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_GREEN2, RESET);
 8002038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800203a:	2200      	movs	r2, #0
 800203c:	4619      	mov	r1, r3
 800203e:	69b8      	ldr	r0, [r7, #24]
 8002040:	f7fe fd8b 	bl	8000b5a <HAL_GPIO_WritePin>
            break;
 8002044:	e068      	b.n	8002118 <traffic_double_display+0x20c>
        case RED_RED1:
        case RED_RED2:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	893a      	ldrh	r2, [r7, #8]
 800204a:	8979      	ldrh	r1, [r7, #10]
 800204c:	2000      	movs	r0, #0
 800204e:	9000      	str	r0, [sp, #0]
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f865 	bl	8002120 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
 8002056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002058:	8c3a      	ldrh	r2, [r7, #32]
 800205a:	8bb9      	ldrh	r1, [r7, #28]
 800205c:	2000      	movs	r0, #0
 800205e:	9000      	str	r0, [sp, #0]
 8002060:	69b8      	ldr	r0, [r7, #24]
 8002062:	f000 f85d 	bl	8002120 <traffic_display>
            break;
 8002066:	e057      	b.n	8002118 <traffic_double_display+0x20c>
        case SET_TIME_RED:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	893a      	ldrh	r2, [r7, #8]
 800206c:	8979      	ldrh	r1, [r7, #10]
 800206e:	2000      	movs	r0, #0
 8002070:	9000      	str	r0, [sp, #0]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 f854 	bl	8002120 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
 8002078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800207a:	8c3a      	ldrh	r2, [r7, #32]
 800207c:	8bb9      	ldrh	r1, [r7, #28]
 800207e:	2000      	movs	r0, #0
 8002080:	9000      	str	r0, [sp, #0]
 8002082:	69b8      	ldr	r0, [r7, #24]
 8002084:	f000 f84c 	bl	8002120 <traffic_display>
            break;
 8002088:	e046      	b.n	8002118 <traffic_double_display+0x20c>

        case SET_TIME_YELLOW:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, YELLOW);
 800208a:	88fb      	ldrh	r3, [r7, #6]
 800208c:	893a      	ldrh	r2, [r7, #8]
 800208e:	8979      	ldrh	r1, [r7, #10]
 8002090:	2001      	movs	r0, #1
 8002092:	9000      	str	r0, [sp, #0]
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 f843 	bl	8002120 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, YELLOW);
 800209a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800209c:	8c3a      	ldrh	r2, [r7, #32]
 800209e:	8bb9      	ldrh	r1, [r7, #28]
 80020a0:	2001      	movs	r0, #1
 80020a2:	9000      	str	r0, [sp, #0]
 80020a4:	69b8      	ldr	r0, [r7, #24]
 80020a6:	f000 f83b 	bl	8002120 <traffic_display>
            break;
 80020aa:	e035      	b.n	8002118 <traffic_double_display+0x20c>

        case SET_TIME_GREEN:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, GREEN);
 80020ac:	88fb      	ldrh	r3, [r7, #6]
 80020ae:	893a      	ldrh	r2, [r7, #8]
 80020b0:	8979      	ldrh	r1, [r7, #10]
 80020b2:	2002      	movs	r0, #2
 80020b4:	9000      	str	r0, [sp, #0]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f832 	bl	8002120 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, GREEN);
 80020bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020be:	8c3a      	ldrh	r2, [r7, #32]
 80020c0:	8bb9      	ldrh	r1, [r7, #28]
 80020c2:	2002      	movs	r0, #2
 80020c4:	9000      	str	r0, [sp, #0]
 80020c6:	69b8      	ldr	r0, [r7, #24]
 80020c8:	f000 f82a 	bl	8002120 <traffic_display>
            break;
 80020cc:	e024      	b.n	8002118 <traffic_double_display+0x20c>
        default:
            HAL_GPIO_WritePin(GPIOx1, LED_RED1, GPIO_PIN_SET);
 80020ce:	897b      	ldrh	r3, [r7, #10]
 80020d0:	2201      	movs	r2, #1
 80020d2:	4619      	mov	r1, r3
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f7fe fd40 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_YELLOW1, GPIO_PIN_SET);
 80020da:	893b      	ldrh	r3, [r7, #8]
 80020dc:	2201      	movs	r2, #1
 80020de:	4619      	mov	r1, r3
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f7fe fd3a 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_GREEN1, GPIO_PIN_SET);
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	2201      	movs	r2, #1
 80020ea:	4619      	mov	r1, r3
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f7fe fd34 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_RED2, GPIO_PIN_SET);
 80020f2:	8bbb      	ldrh	r3, [r7, #28]
 80020f4:	2201      	movs	r2, #1
 80020f6:	4619      	mov	r1, r3
 80020f8:	69b8      	ldr	r0, [r7, #24]
 80020fa:	f7fe fd2e 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_YELLOW2, GPIO_PIN_SET);
 80020fe:	8c3b      	ldrh	r3, [r7, #32]
 8002100:	2201      	movs	r2, #1
 8002102:	4619      	mov	r1, r3
 8002104:	69b8      	ldr	r0, [r7, #24]
 8002106:	f7fe fd28 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_GREEN2, GPIO_PIN_SET);
 800210a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800210c:	2201      	movs	r2, #1
 800210e:	4619      	mov	r1, r3
 8002110:	69b8      	ldr	r0, [r7, #24]
 8002112:	f7fe fd22 	bl	8000b5a <HAL_GPIO_WritePin>
        	break;
 8002116:	bf00      	nop
    }
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <traffic_display>:
void traffic_display(GPIO_TypeDef * GPIOx, uint16_t LED_RED, uint16_t LED_YELLOW, uint16_t LED_GREEN, State type) {
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	4608      	mov	r0, r1
 800212a:	4611      	mov	r1, r2
 800212c:	461a      	mov	r2, r3
 800212e:	4603      	mov	r3, r0
 8002130:	817b      	strh	r3, [r7, #10]
 8002132:	460b      	mov	r3, r1
 8002134:	813b      	strh	r3, [r7, #8]
 8002136:	4613      	mov	r3, r2
 8002138:	80fb      	strh	r3, [r7, #6]
    switch(type) {
 800213a:	7e3b      	ldrb	r3, [r7, #24]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d02c      	beq.n	800219a <traffic_display+0x7a>
 8002140:	2b02      	cmp	r3, #2
 8002142:	dc3d      	bgt.n	80021c0 <traffic_display+0xa0>
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <traffic_display+0x2e>
 8002148:	2b01      	cmp	r3, #1
 800214a:	d013      	beq.n	8002174 <traffic_display+0x54>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_RESET);
            break;
        default:
            break;
 800214c:	e038      	b.n	80021c0 <traffic_display+0xa0>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_RESET);
 800214e:	897b      	ldrh	r3, [r7, #10]
 8002150:	2200      	movs	r2, #0
 8002152:	4619      	mov	r1, r3
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f7fe fd00 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_SET);
 800215a:	893b      	ldrh	r3, [r7, #8]
 800215c:	2201      	movs	r2, #1
 800215e:	4619      	mov	r1, r3
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f7fe fcfa 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_SET);
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	2201      	movs	r2, #1
 800216a:	4619      	mov	r1, r3
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f7fe fcf4 	bl	8000b5a <HAL_GPIO_WritePin>
            break;
 8002172:	e026      	b.n	80021c2 <traffic_display+0xa2>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_SET);
 8002174:	897b      	ldrh	r3, [r7, #10]
 8002176:	2201      	movs	r2, #1
 8002178:	4619      	mov	r1, r3
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f7fe fced 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_RESET);
 8002180:	893b      	ldrh	r3, [r7, #8]
 8002182:	2200      	movs	r2, #0
 8002184:	4619      	mov	r1, r3
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f7fe fce7 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_SET);
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	2201      	movs	r2, #1
 8002190:	4619      	mov	r1, r3
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f7fe fce1 	bl	8000b5a <HAL_GPIO_WritePin>
            break;
 8002198:	e013      	b.n	80021c2 <traffic_display+0xa2>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_SET);
 800219a:	897b      	ldrh	r3, [r7, #10]
 800219c:	2201      	movs	r2, #1
 800219e:	4619      	mov	r1, r3
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f7fe fcda 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_SET);
 80021a6:	893b      	ldrh	r3, [r7, #8]
 80021a8:	2201      	movs	r2, #1
 80021aa:	4619      	mov	r1, r3
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f7fe fcd4 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_RESET);
 80021b2:	88fb      	ldrh	r3, [r7, #6]
 80021b4:	2200      	movs	r2, #0
 80021b6:	4619      	mov	r1, r3
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f7fe fcce 	bl	8000b5a <HAL_GPIO_WritePin>
            break;
 80021be:	e000      	b.n	80021c2 <traffic_display+0xa2>
            break;
 80021c0:	bf00      	nop
    }
}
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <traffic_init>:
void traffic_init() {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
	 redred = (time_yellow_set + time_green_set) == time_red_set ? 0 : 1;
 80021d0:	4b18      	ldr	r3, [pc, #96]	; (8002234 <traffic_init+0x68>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b18      	ldr	r3, [pc, #96]	; (8002238 <traffic_init+0x6c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	441a      	add	r2, r3
 80021da:	4b18      	ldr	r3, [pc, #96]	; (800223c <traffic_init+0x70>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	bf14      	ite	ne
 80021e2:	2301      	movne	r3, #1
 80021e4:	2300      	moveq	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <traffic_init+0x74>)
 80021ec:	701a      	strb	r2, [r3, #0]
	if (time_1 <= 0 || time_2<=0) {
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <traffic_init+0x78>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	dd03      	ble.n	80021fe <traffic_init+0x32>
 80021f6:	4b14      	ldr	r3, [pc, #80]	; (8002248 <traffic_init+0x7c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	dc0a      	bgt.n	8002214 <traffic_init+0x48>
		time_1 = time_green_set;
 80021fe:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <traffic_init+0x6c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a10      	ldr	r2, [pc, #64]	; (8002244 <traffic_init+0x78>)
 8002204:	6013      	str	r3, [r2, #0]
		time_2 = time_red_set;
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <traffic_init+0x70>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a0f      	ldr	r2, [pc, #60]	; (8002248 <traffic_init+0x7c>)
 800220c:	6013      	str	r3, [r2, #0]
		status = GREEN_RED;
 800220e:	4b0f      	ldr	r3, [pc, #60]	; (800224c <traffic_init+0x80>)
 8002210:	2202      	movs	r2, #2
 8002212:	601a      	str	r2, [r3, #0]
	}
	if (is_button_pressed(0)) {
 8002214:	2000      	movs	r0, #0
 8002216:	f000 fadb 	bl	80027d0 <is_button_pressed>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <traffic_init+0x5a>
		status = SET_TIME_RED;
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <traffic_init+0x80>)
 8002222:	2208      	movs	r2, #8
 8002224:	601a      	str	r2, [r3, #0]
	}
	 display_times();
 8002226:	f000 f941 	bl	80024ac <display_times>
	 update_timers();
 800222a:	f000 f921 	bl	8002470 <update_timers>

}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000024 	.word	0x20000024
 8002238:	20000020 	.word	0x20000020
 800223c:	20000028 	.word	0x20000028
 8002240:	200000c0 	.word	0x200000c0
 8002244:	2000002c 	.word	0x2000002c
 8002248:	20000030 	.word	0x20000030
 800224c:	20000034 	.word	0x20000034

08002250 <traffic_green_red>:

void traffic_green_red() {
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
    update_timers();
 8002254:	f000 f90c 	bl	8002470 <update_timers>
    if (time_1 <= 0) {
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <traffic_green_red+0x38>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	dc06      	bgt.n	800226e <traffic_green_red+0x1e>
        time_1 = time_yellow_set;
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <traffic_green_red+0x3c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a08      	ldr	r2, [pc, #32]	; (8002288 <traffic_green_red+0x38>)
 8002266:	6013      	str	r3, [r2, #0]
        status = YELLOW_RED;
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <traffic_green_red+0x40>)
 800226a:	2203      	movs	r2, #3
 800226c:	601a      	str	r2, [r3, #0]
    }
    if (is_button_pressed(0)) {
 800226e:	2000      	movs	r0, #0
 8002270:	f000 faae 	bl	80027d0 <is_button_pressed>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <traffic_green_red+0x30>
        status = SET_TIME_RED;
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <traffic_green_red+0x40>)
 800227c:	2208      	movs	r2, #8
 800227e:	601a      	str	r2, [r3, #0]
    }
    display_times();
 8002280:	f000 f914 	bl	80024ac <display_times>
}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	2000002c 	.word	0x2000002c
 800228c:	20000024 	.word	0x20000024
 8002290:	20000034 	.word	0x20000034

08002294 <traffic_yellow_red>:

void traffic_yellow_red() {
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
    update_timers();
 8002298:	f000 f8ea 	bl	8002470 <update_timers>
    if (redred == 1) {
 800229c:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <traffic_yellow_red+0x60>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d10b      	bne.n	80022bc <traffic_yellow_red+0x28>
        if (time_1 <= 0) {
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <traffic_yellow_red+0x64>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	dc16      	bgt.n	80022da <traffic_yellow_red+0x46>
            time_1 = time_red_set;
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <traffic_yellow_red+0x68>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a11      	ldr	r2, [pc, #68]	; (80022f8 <traffic_yellow_red+0x64>)
 80022b2:	6013      	str	r3, [r2, #0]
            status = RED_RED1;
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <traffic_yellow_red+0x6c>)
 80022b6:	2206      	movs	r2, #6
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	e00e      	b.n	80022da <traffic_yellow_red+0x46>
        }
    } else {
        if (time_2 <= 0) {
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <traffic_yellow_red+0x70>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	dc0a      	bgt.n	80022da <traffic_yellow_red+0x46>
            time_1 = time_red_set;
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <traffic_yellow_red+0x68>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <traffic_yellow_red+0x64>)
 80022ca:	6013      	str	r3, [r2, #0]
            time_2 = time_green_set;
 80022cc:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <traffic_yellow_red+0x74>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0c      	ldr	r2, [pc, #48]	; (8002304 <traffic_yellow_red+0x70>)
 80022d2:	6013      	str	r3, [r2, #0]
            status = RED_GREEN;
 80022d4:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <traffic_yellow_red+0x6c>)
 80022d6:	2204      	movs	r2, #4
 80022d8:	601a      	str	r2, [r3, #0]
        }
    }
    if (is_button_pressed(0)) {
 80022da:	2000      	movs	r0, #0
 80022dc:	f000 fa78 	bl	80027d0 <is_button_pressed>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <traffic_yellow_red+0x58>
        status = SET_TIME_RED;
 80022e6:	4b06      	ldr	r3, [pc, #24]	; (8002300 <traffic_yellow_red+0x6c>)
 80022e8:	2208      	movs	r2, #8
 80022ea:	601a      	str	r2, [r3, #0]
    }
    display_times();
 80022ec:	f000 f8de 	bl	80024ac <display_times>
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	200000c0 	.word	0x200000c0
 80022f8:	2000002c 	.word	0x2000002c
 80022fc:	20000028 	.word	0x20000028
 8002300:	20000034 	.word	0x20000034
 8002304:	20000030 	.word	0x20000030
 8002308:	20000020 	.word	0x20000020

0800230c <traffic_red_red1>:

void traffic_red_red1() {
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
    update_timers();
 8002310:	f000 f8ae 	bl	8002470 <update_timers>
    if (time_2 <= 0) {
 8002314:	4b0d      	ldr	r3, [pc, #52]	; (800234c <traffic_red_red1+0x40>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	dc0a      	bgt.n	8002332 <traffic_red_red1+0x26>
    	time_1 = time_red_set;
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <traffic_red_red1+0x44>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0c      	ldr	r2, [pc, #48]	; (8002354 <traffic_red_red1+0x48>)
 8002322:	6013      	str	r3, [r2, #0]
        time_2 = time_green_set;
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <traffic_red_red1+0x4c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a08      	ldr	r2, [pc, #32]	; (800234c <traffic_red_red1+0x40>)
 800232a:	6013      	str	r3, [r2, #0]
        status = RED_GREEN;
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <traffic_red_red1+0x50>)
 800232e:	2204      	movs	r2, #4
 8002330:	601a      	str	r2, [r3, #0]
    }
    if (is_button_pressed(0)) {
 8002332:	2000      	movs	r0, #0
 8002334:	f000 fa4c 	bl	80027d0 <is_button_pressed>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <traffic_red_red1+0x38>
        status = SET_TIME_RED;
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <traffic_red_red1+0x50>)
 8002340:	2208      	movs	r2, #8
 8002342:	601a      	str	r2, [r3, #0]
    }
    display_times();
 8002344:	f000 f8b2 	bl	80024ac <display_times>
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000030 	.word	0x20000030
 8002350:	20000028 	.word	0x20000028
 8002354:	2000002c 	.word	0x2000002c
 8002358:	20000020 	.word	0x20000020
 800235c:	20000034 	.word	0x20000034

08002360 <traffic_red_green>:

void traffic_red_green() {
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
    update_timers();
 8002364:	f000 f884 	bl	8002470 <update_timers>
    if (time_2 <= 0) {
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <traffic_red_green+0x38>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	dc06      	bgt.n	800237e <traffic_red_green+0x1e>
        time_2 = time_yellow_set;
 8002370:	4b0a      	ldr	r3, [pc, #40]	; (800239c <traffic_red_green+0x3c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a08      	ldr	r2, [pc, #32]	; (8002398 <traffic_red_green+0x38>)
 8002376:	6013      	str	r3, [r2, #0]
        status = RED_YELLOW;
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <traffic_red_green+0x40>)
 800237a:	2205      	movs	r2, #5
 800237c:	601a      	str	r2, [r3, #0]
    }
    if (is_button_pressed(0)) {
 800237e:	2000      	movs	r0, #0
 8002380:	f000 fa26 	bl	80027d0 <is_button_pressed>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <traffic_red_green+0x30>
        status = SET_TIME_RED;
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <traffic_red_green+0x40>)
 800238c:	2208      	movs	r2, #8
 800238e:	601a      	str	r2, [r3, #0]
    }
    display_times();
 8002390:	f000 f88c 	bl	80024ac <display_times>
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000030 	.word	0x20000030
 800239c:	20000024 	.word	0x20000024
 80023a0:	20000034 	.word	0x20000034

080023a4 <traffic_red_yellow>:

void traffic_red_yellow() {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
    update_timers();
 80023a8:	f000 f862 	bl	8002470 <update_timers>
    if (redred == 1) {
 80023ac:	4b15      	ldr	r3, [pc, #84]	; (8002404 <traffic_red_yellow+0x60>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d10b      	bne.n	80023cc <traffic_red_yellow+0x28>
        if (time_2 <= 0) {
 80023b4:	4b14      	ldr	r3, [pc, #80]	; (8002408 <traffic_red_yellow+0x64>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	dc16      	bgt.n	80023ea <traffic_red_yellow+0x46>
            time_2 = time_red_set;
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <traffic_red_yellow+0x68>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a11      	ldr	r2, [pc, #68]	; (8002408 <traffic_red_yellow+0x64>)
 80023c2:	6013      	str	r3, [r2, #0]
            status = RED_RED2;
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <traffic_red_yellow+0x6c>)
 80023c6:	2207      	movs	r2, #7
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e00e      	b.n	80023ea <traffic_red_yellow+0x46>
        }
    } else {
        if (time_1 <= 0) {
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <traffic_red_yellow+0x70>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	dc0a      	bgt.n	80023ea <traffic_red_yellow+0x46>
            time_1 = time_green_set;
 80023d4:	4b10      	ldr	r3, [pc, #64]	; (8002418 <traffic_red_yellow+0x74>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0e      	ldr	r2, [pc, #56]	; (8002414 <traffic_red_yellow+0x70>)
 80023da:	6013      	str	r3, [r2, #0]
            time_2 = time_red_set;
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <traffic_red_yellow+0x68>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a09      	ldr	r2, [pc, #36]	; (8002408 <traffic_red_yellow+0x64>)
 80023e2:	6013      	str	r3, [r2, #0]
            status = GREEN_RED;
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <traffic_red_yellow+0x6c>)
 80023e6:	2202      	movs	r2, #2
 80023e8:	601a      	str	r2, [r3, #0]
        }
    }
    if (is_button_pressed(0)) {
 80023ea:	2000      	movs	r0, #0
 80023ec:	f000 f9f0 	bl	80027d0 <is_button_pressed>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <traffic_red_yellow+0x58>
        status = SET_TIME_RED;
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <traffic_red_yellow+0x6c>)
 80023f8:	2208      	movs	r2, #8
 80023fa:	601a      	str	r2, [r3, #0]
    }
    display_times();
 80023fc:	f000 f856 	bl	80024ac <display_times>
}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}
 8002404:	200000c0 	.word	0x200000c0
 8002408:	20000030 	.word	0x20000030
 800240c:	20000028 	.word	0x20000028
 8002410:	20000034 	.word	0x20000034
 8002414:	2000002c 	.word	0x2000002c
 8002418:	20000020 	.word	0x20000020

0800241c <traffic_red_red2>:

void traffic_red_red2() {
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
    update_timers();
 8002420:	f000 f826 	bl	8002470 <update_timers>
    if (time_1 <= 0) {
 8002424:	4b0d      	ldr	r3, [pc, #52]	; (800245c <traffic_red_red2+0x40>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	dc0a      	bgt.n	8002442 <traffic_red_red2+0x26>
        time_1 = time_green_set;
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <traffic_red_red2+0x44>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0a      	ldr	r2, [pc, #40]	; (800245c <traffic_red_red2+0x40>)
 8002432:	6013      	str	r3, [r2, #0]
        time_2 = time_red_set;
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <traffic_red_red2+0x48>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0b      	ldr	r2, [pc, #44]	; (8002468 <traffic_red_red2+0x4c>)
 800243a:	6013      	str	r3, [r2, #0]
        status = GREEN_RED;
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <traffic_red_red2+0x50>)
 800243e:	2202      	movs	r2, #2
 8002440:	601a      	str	r2, [r3, #0]
    }
    if (is_button_pressed(0)) {
 8002442:	2000      	movs	r0, #0
 8002444:	f000 f9c4 	bl	80027d0 <is_button_pressed>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <traffic_red_red2+0x38>
        status = SET_TIME_RED;
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <traffic_red_red2+0x50>)
 8002450:	2208      	movs	r2, #8
 8002452:	601a      	str	r2, [r3, #0]
    }
    display_times();
 8002454:	f000 f82a 	bl	80024ac <display_times>
}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	2000002c 	.word	0x2000002c
 8002460:	20000020 	.word	0x20000020
 8002464:	20000028 	.word	0x20000028
 8002468:	20000030 	.word	0x20000030
 800246c:	20000034 	.word	0x20000034

08002470 <update_timers>:

void update_timers() {
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
    if (timer1_flag[1] == 1) {
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <update_timers+0x30>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d10e      	bne.n	800249a <update_timers+0x2a>
        time_1--;
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <update_timers+0x34>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	3b01      	subs	r3, #1
 8002482:	4a08      	ldr	r2, [pc, #32]	; (80024a4 <update_timers+0x34>)
 8002484:	6013      	str	r3, [r2, #0]
        time_2--;
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <update_timers+0x38>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3b01      	subs	r3, #1
 800248c:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <update_timers+0x38>)
 800248e:	6013      	str	r3, [r2, #0]
        setTimer1(1, 1000);
 8002490:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002494:	2001      	movs	r0, #1
 8002496:	f000 f9e9 	bl	800286c <setTimer1>
    }
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200000c4 	.word	0x200000c4
 80024a4:	2000002c 	.word	0x2000002c
 80024a8:	20000030 	.word	0x20000030

080024ac <display_times>:

void display_times() {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af06      	add	r7, sp, #24
	DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED1_0_Pin, SEGLED1_1_Pin, SEGLED1_2_Pin, SEGLED1_3_Pin, SEGLED1_4_Pin, SEGLED1_5_Pin, SEGLED1_6_Pin, time_1-1);
 80024b2:	4b18      	ldr	r3, [pc, #96]	; (8002514 <display_times+0x68>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	9304      	str	r3, [sp, #16]
 80024be:	2340      	movs	r3, #64	; 0x40
 80024c0:	9303      	str	r3, [sp, #12]
 80024c2:	2320      	movs	r3, #32
 80024c4:	9302      	str	r3, [sp, #8]
 80024c6:	2310      	movs	r3, #16
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	2308      	movs	r3, #8
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2304      	movs	r3, #4
 80024d0:	2202      	movs	r2, #2
 80024d2:	2101      	movs	r1, #1
 80024d4:	4810      	ldr	r0, [pc, #64]	; (8002518 <display_times+0x6c>)
 80024d6:	f7ff fb11 	bl	8001afc <DISPLAY_LED_7_SEGMENT>
    DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED2_0_Pin, SEGLED2_1_Pin, SEGLED2_2_Pin, SEGLED2_3_Pin, SEGLED2_4_Pin, SEGLED2_5_Pin, SEGLED2_6_Pin, time_2-1);
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <display_times+0x70>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	9304      	str	r3, [sp, #16]
 80024e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ea:	9303      	str	r3, [sp, #12]
 80024ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f0:	9302      	str	r3, [sp, #8]
 80024f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002506:	2180      	movs	r1, #128	; 0x80
 8002508:	4803      	ldr	r0, [pc, #12]	; (8002518 <display_times+0x6c>)
 800250a:	f7ff faf7 	bl	8001afc <DISPLAY_LED_7_SEGMENT>
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	2000002c 	.word	0x2000002c
 8002518:	40010c00 	.word	0x40010c00
 800251c:	20000030 	.word	0x20000030

08002520 <traffic_mannual_green_red>:


void traffic_mannual_green_red(){
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
	if(timer1_flag[1]  == 1){
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <traffic_mannual_green_red+0x28>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d102      	bne.n	8002532 <traffic_mannual_green_red+0x12>
		status = GREEN_RED;
 800252c:	4b07      	ldr	r3, [pc, #28]	; (800254c <traffic_mannual_green_red+0x2c>)
 800252e:	2202      	movs	r2, #2
 8002530:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(0)){
 8002532:	2000      	movs	r0, #0
 8002534:	f000 f94c 	bl	80027d0 <is_button_pressed>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <traffic_mannual_green_red+0x24>
		status = SET_TIME_RED;
 800253e:	4b03      	ldr	r3, [pc, #12]	; (800254c <traffic_mannual_green_red+0x2c>)
 8002540:	2208      	movs	r2, #8
 8002542:	601a      	str	r2, [r3, #0]
	}
}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}
 8002548:	200000c4 	.word	0x200000c4
 800254c:	20000034 	.word	0x20000034

08002550 <traffic_mannual_yellow_red>:
void traffic_mannual_yellow_red(){
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
	if(timer1_flag[1]  == 1){
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <traffic_mannual_yellow_red+0x28>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d102      	bne.n	8002562 <traffic_mannual_yellow_red+0x12>
		status = YELLOW_RED;
 800255c:	4b07      	ldr	r3, [pc, #28]	; (800257c <traffic_mannual_yellow_red+0x2c>)
 800255e:	2203      	movs	r2, #3
 8002560:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(0)){
 8002562:	2000      	movs	r0, #0
 8002564:	f000 f934 	bl	80027d0 <is_button_pressed>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <traffic_mannual_yellow_red+0x24>
		status = SET_TIME_RED;
 800256e:	4b03      	ldr	r3, [pc, #12]	; (800257c <traffic_mannual_yellow_red+0x2c>)
 8002570:	2208      	movs	r2, #8
 8002572:	601a      	str	r2, [r3, #0]
	}
}
 8002574:	bf00      	nop
 8002576:	bd80      	pop	{r7, pc}
 8002578:	200000c4 	.word	0x200000c4
 800257c:	20000034 	.word	0x20000034

08002580 <traffic_mannual_red_green>:
void traffic_mannual_red_green(){
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
	if(timer1_flag[1]  == 1){
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <traffic_mannual_red_green+0x28>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d102      	bne.n	8002592 <traffic_mannual_red_green+0x12>
		status = RED_GREEN;
 800258c:	4b07      	ldr	r3, [pc, #28]	; (80025ac <traffic_mannual_red_green+0x2c>)
 800258e:	2204      	movs	r2, #4
 8002590:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(0)){
 8002592:	2000      	movs	r0, #0
 8002594:	f000 f91c 	bl	80027d0 <is_button_pressed>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <traffic_mannual_red_green+0x24>
		status = SET_TIME_RED;
 800259e:	4b03      	ldr	r3, [pc, #12]	; (80025ac <traffic_mannual_red_green+0x2c>)
 80025a0:	2208      	movs	r2, #8
 80025a2:	601a      	str	r2, [r3, #0]
	}
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	200000c4 	.word	0x200000c4
 80025ac:	20000034 	.word	0x20000034

080025b0 <traffic_mannual_red_yellow>:
void traffic_mannual_red_yellow(){
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
	if(timer1_flag[1]  == 1){
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <traffic_mannual_red_yellow+0x28>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d102      	bne.n	80025c2 <traffic_mannual_red_yellow+0x12>
		status = RED_YELLOW;
 80025bc:	4b07      	ldr	r3, [pc, #28]	; (80025dc <traffic_mannual_red_yellow+0x2c>)
 80025be:	2205      	movs	r2, #5
 80025c0:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(0)){
 80025c2:	2000      	movs	r0, #0
 80025c4:	f000 f904 	bl	80027d0 <is_button_pressed>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <traffic_mannual_red_yellow+0x24>
		status = SET_TIME_RED;
 80025ce:	4b03      	ldr	r3, [pc, #12]	; (80025dc <traffic_mannual_red_yellow+0x2c>)
 80025d0:	2208      	movs	r2, #8
 80025d2:	601a      	str	r2, [r3, #0]
	}
}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	200000c4 	.word	0x200000c4
 80025dc:	20000034 	.word	0x20000034

080025e0 <traffic_set_time_red>:
void traffic_set_time_red(){
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
	if(is_button_pressed(0)){
 80025e4:	2000      	movs	r0, #0
 80025e6:	f000 f8f3 	bl	80027d0 <is_button_pressed>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <traffic_set_time_red+0x16>
		status = SET_TIME_YELLOW;
 80025f0:	4b02      	ldr	r3, [pc, #8]	; (80025fc <traffic_set_time_red+0x1c>)
 80025f2:	2209      	movs	r2, #9
 80025f4:	601a      	str	r2, [r3, #0]
	}
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000034 	.word	0x20000034

08002600 <traffic_set_time_yellow>:
void traffic_set_time_yellow(){
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	if(is_button_pressed(0)){
 8002604:	2000      	movs	r0, #0
 8002606:	f000 f8e3 	bl	80027d0 <is_button_pressed>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d002      	beq.n	8002616 <traffic_set_time_yellow+0x16>
		status = SET_TIME_GREEN;
 8002610:	4b02      	ldr	r3, [pc, #8]	; (800261c <traffic_set_time_yellow+0x1c>)
 8002612:	220a      	movs	r2, #10
 8002614:	601a      	str	r2, [r3, #0]
	}
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000034 	.word	0x20000034

08002620 <traffic_set_time_green>:
void traffic_set_time_green(){
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
	if(is_button_pressed(0)){
 8002624:	2000      	movs	r0, #0
 8002626:	f000 f8d3 	bl	80027d0 <is_button_pressed>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <traffic_set_time_green+0x16>
		status = INIT;
 8002630:	4b02      	ldr	r3, [pc, #8]	; (800263c <traffic_set_time_green+0x1c>)
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]
	}
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000034 	.word	0x20000034

08002640 <automatic_run>:
void automatic_init(){
	if(status == INIT){
		setTimer1(1, 1000);
	}
}
void automatic_run(){
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
 	switch(status)
 8002644:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <automatic_run+0x60>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	3b01      	subs	r3, #1
 800264a:	2b06      	cmp	r3, #6
 800264c:	d825      	bhi.n	800269a <automatic_run+0x5a>
 800264e:	a201      	add	r2, pc, #4	; (adr r2, 8002654 <automatic_run+0x14>)
 8002650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002654:	08002671 	.word	0x08002671
 8002658:	08002677 	.word	0x08002677
 800265c:	0800267d 	.word	0x0800267d
 8002660:	08002689 	.word	0x08002689
 8002664:	0800268f 	.word	0x0800268f
 8002668:	08002683 	.word	0x08002683
 800266c:	08002695 	.word	0x08002695
	{
	case (INIT):
				traffic_init();
 8002670:	f7ff fdac 	bl	80021cc <traffic_init>
			break;
 8002674:	e012      	b.n	800269c <automatic_run+0x5c>
	case (GREEN_RED):
			// TODO
				traffic_green_red();
 8002676:	f7ff fdeb 	bl	8002250 <traffic_green_red>
			break;
 800267a:	e00f      	b.n	800269c <automatic_run+0x5c>
	case (YELLOW_RED):
				traffic_yellow_red();
 800267c:	f7ff fe0a 	bl	8002294 <traffic_yellow_red>
			break;
 8002680:	e00c      	b.n	800269c <automatic_run+0x5c>
	case RED_RED1:
				traffic_red_red1();
 8002682:	f7ff fe43 	bl	800230c <traffic_red_red1>
			break;
 8002686:	e009      	b.n	800269c <automatic_run+0x5c>
	case (RED_GREEN):
				traffic_red_green();
 8002688:	f7ff fe6a 	bl	8002360 <traffic_red_green>
			break;
 800268c:	e006      	b.n	800269c <automatic_run+0x5c>
	case (RED_YELLOW):
				traffic_red_yellow();
 800268e:	f7ff fe89 	bl	80023a4 <traffic_red_yellow>
			break;
 8002692:	e003      	b.n	800269c <automatic_run+0x5c>
	case RED_RED2:
				traffic_red_red2();
 8002694:	f7ff fec2 	bl	800241c <traffic_red_red2>
			break;
 8002698:	e000      	b.n	800269c <automatic_run+0x5c>
	default:
		break;
 800269a:	bf00      	nop
	}

}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000034 	.word	0x20000034

080026a4 <button_reading>:
static GPIO_PinState debounceButtonBuffer3[N0_OF_BUTTONS];
static GPIO_PinState debounceButtonBuffer4[N0_OF_BUTTONS];
static uint8_t flagForButtonPress[N0_OF_BUTTONS]; // flag for button pressed (AN) hon 1 giay
static uint8_t flagForButton_longPress[N0_OF_BUTTONS];
int time_out_input = 500;
void button_reading ( GPIO_TypeDef* GPIOx[] , uint16_t GPIO_Pin[] ) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
	for (int i = 0 ; i< N0_OF_BUTTONS ; i ++ ){
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	e077      	b.n	80027a4 <button_reading+0x100>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 80026b4:	4a3f      	ldr	r2, [pc, #252]	; (80027b4 <button_reading+0x110>)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4413      	add	r3, r2
 80026ba:	7819      	ldrb	r1, [r3, #0]
 80026bc:	4a3e      	ldr	r2, [pc, #248]	; (80027b8 <button_reading+0x114>)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4413      	add	r3, r2
 80026c2:	460a      	mov	r2, r1
 80026c4:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80026c6:	4a3d      	ldr	r2, [pc, #244]	; (80027bc <button_reading+0x118>)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4413      	add	r3, r2
 80026cc:	7819      	ldrb	r1, [r3, #0]
 80026ce:	4a39      	ldr	r2, [pc, #228]	; (80027b4 <button_reading+0x110>)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4413      	add	r3, r2
 80026d4:	460a      	mov	r2, r1
 80026d6:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOx[i], GPIO_Pin[i]);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	4413      	add	r3, r2
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	4413      	add	r3, r2
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	4619      	mov	r1, r3
 80026ee:	f7fe fa1d 	bl	8000b2c <HAL_GPIO_ReadPin>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4619      	mov	r1, r3
 80026f6:	4a31      	ldr	r2, [pc, #196]	; (80027bc <button_reading+0x118>)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4413      	add	r3, r2
 80026fc:	460a      	mov	r2, r1
 80026fe:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer3[i] == debounceButtonBuffer2[i] && debounceButtonBuffer2[i] == debounceButtonBuffer1[i]){
 8002700:	4a2d      	ldr	r2, [pc, #180]	; (80027b8 <button_reading+0x114>)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4413      	add	r3, r2
 8002706:	781a      	ldrb	r2, [r3, #0]
 8002708:	492a      	ldr	r1, [pc, #168]	; (80027b4 <button_reading+0x110>)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	440b      	add	r3, r1
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d144      	bne.n	800279e <button_reading+0xfa>
 8002714:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <button_reading+0x110>)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4413      	add	r3, r2
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	4927      	ldr	r1, [pc, #156]	; (80027bc <button_reading+0x118>)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	440b      	add	r3, r1
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d13a      	bne.n	800279e <button_reading+0xfa>
			// Het Rung
			if(debounceButtonBuffer4[i]!=debounceButtonBuffer3[i]){
 8002728:	4a25      	ldr	r2, [pc, #148]	; (80027c0 <button_reading+0x11c>)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4413      	add	r3, r2
 800272e:	781a      	ldrb	r2, [r3, #0]
 8002730:	4921      	ldr	r1, [pc, #132]	; (80027b8 <button_reading+0x114>)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	440b      	add	r3, r1
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d018      	beq.n	800276e <button_reading+0xca>
				// Dong bo lai tin hieu
				debounceButtonBuffer4[i]=debounceButtonBuffer3[i];
 800273c:	4a1e      	ldr	r2, [pc, #120]	; (80027b8 <button_reading+0x114>)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4413      	add	r3, r2
 8002742:	7819      	ldrb	r1, [r3, #0]
 8002744:	4a1e      	ldr	r2, [pc, #120]	; (80027c0 <button_reading+0x11c>)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4413      	add	r3, r2
 800274a:	460a      	mov	r2, r1
 800274c:	701a      	strb	r2, [r3, #0]
				if(debounceButtonBuffer4[i] == BUTTON_IS_PRESSED){
 800274e:	4a1c      	ldr	r2, [pc, #112]	; (80027c0 <button_reading+0x11c>)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4413      	add	r3, r2
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d121      	bne.n	800279e <button_reading+0xfa>
					// Vua chuyen sang trang thai nhan
					flagForButtonPress[i] = 1;
 800275a:	4a1a      	ldr	r2, [pc, #104]	; (80027c4 <button_reading+0x120>)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4413      	add	r3, r2
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
					time_out_input = 500;
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <button_reading+0x124>)
 8002766:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e017      	b.n	800279e <button_reading+0xfa>
				}
			}
			else{
				// Dang trong qua trinh nhan de hoac nha
				time_out_input -- ;
 800276e:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <button_reading+0x124>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	3b01      	subs	r3, #1
 8002774:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <button_reading+0x124>)
 8002776:	6013      	str	r3, [r2, #0]
				if(time_out_input <= 0 ){
 8002778:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <button_reading+0x124>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	dc0e      	bgt.n	800279e <button_reading+0xfa>
					// Nhan du 5s hoac tha 5s
					time_out_input = 500;
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <button_reading+0x124>)
 8002782:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002786:	601a      	str	r2, [r3, #0]
					if(debounceButtonBuffer4[i] == BUTTON_IS_PRESSED){
 8002788:	4a0d      	ldr	r2, [pc, #52]	; (80027c0 <button_reading+0x11c>)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4413      	add	r3, r2
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d104      	bne.n	800279e <button_reading+0xfa>
						// Truong hop la nhan de
						flagForButton_longPress[i] = 1;
 8002794:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <button_reading+0x128>)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4413      	add	r3, r2
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i< N0_OF_BUTTONS ; i ++ ){
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	3301      	adds	r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	dd84      	ble.n	80026b4 <button_reading+0x10>
					}
				}
			}
		}
	}
}
 80027aa:	bf00      	nop
 80027ac:	bf00      	nop
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000060 	.word	0x20000060
 80027b8:	20000064 	.word	0x20000064
 80027bc:	2000005c 	.word	0x2000005c
 80027c0:	20000068 	.word	0x20000068
 80027c4:	2000006c 	.word	0x2000006c
 80027c8:	20000038 	.word	0x20000038
 80027cc:	20000070 	.word	0x20000070

080027d0 <is_button_pressed>:
unsigned int is_button_pressed ( unsigned int index ){
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	// Tra ve trang thai nut nhan co dang bat hay khong
	if(index>= N0_OF_BUTTONS){
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <is_button_pressed+0x12>
		return 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	e00d      	b.n	80027fe <is_button_pressed+0x2e>
	}
	if(flagForButtonPress[index] == 1){
 80027e2:	4a09      	ldr	r2, [pc, #36]	; (8002808 <is_button_pressed+0x38>)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4413      	add	r3, r2
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d106      	bne.n	80027fc <is_button_pressed+0x2c>
		flagForButtonPress[index] = 0;
 80027ee:	4a06      	ldr	r2, [pc, #24]	; (8002808 <is_button_pressed+0x38>)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4413      	add	r3, r2
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
		return 1;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <is_button_pressed+0x2e>
	}
	return 0;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	2000006c 	.word	0x2000006c

0800280c <manual_run>:
 */
#include "manual.h"
void manual_init(){

}
void manual_run(){
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
	switch(status){
 8002810:	4b15      	ldr	r3, [pc, #84]	; (8002868 <manual_run+0x5c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3b08      	subs	r3, #8
 8002816:	2b07      	cmp	r3, #7
 8002818:	d823      	bhi.n	8002862 <manual_run+0x56>
 800281a:	a201      	add	r2, pc, #4	; (adr r2, 8002820 <manual_run+0x14>)
 800281c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002820:	08002841 	.word	0x08002841
 8002824:	08002847 	.word	0x08002847
 8002828:	0800284d 	.word	0x0800284d
 800282c:	08002863 	.word	0x08002863
 8002830:	08002853 	.word	0x08002853
 8002834:	08002857 	.word	0x08002857
 8002838:	0800285b 	.word	0x0800285b
 800283c:	0800285f 	.word	0x0800285f
	case SET_TIME_RED:
		traffic_set_time_red();
 8002840:	f7ff fece 	bl	80025e0 <traffic_set_time_red>
		break;
 8002844:	e00e      	b.n	8002864 <manual_run+0x58>
	case SET_TIME_YELLOW:
		traffic_set_time_yellow();
 8002846:	f7ff fedb 	bl	8002600 <traffic_set_time_yellow>
		break;
 800284a:	e00b      	b.n	8002864 <manual_run+0x58>
	case SET_TIME_GREEN:
		traffic_set_time_green();
 800284c:	f7ff fee8 	bl	8002620 <traffic_set_time_green>
		break;
 8002850:	e008      	b.n	8002864 <manual_run+0x58>
	case MAN_GREEN_RED:
		traffic_mannual_green_red();
 8002852:	f7ff fe65 	bl	8002520 <traffic_mannual_green_red>
	case MAN_YELLOW_RED:
		traffic_mannual_yellow_red();
 8002856:	f7ff fe7b 	bl	8002550 <traffic_mannual_yellow_red>
	case MAN_RED_GREEN:
		traffic_mannual_red_green();
 800285a:	f7ff fe91 	bl	8002580 <traffic_mannual_red_green>
	case MAN_RED_YELLOW:
		traffic_mannual_red_yellow();
 800285e:	f7ff fea7 	bl	80025b0 <traffic_mannual_red_yellow>
	default :
		break;
 8002862:	bf00      	nop
	}

}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000034 	.word	0x20000034

0800286c <setTimer1>:
#include "software_timer.h"
	int time_cycle = 10;
	int timer1_counter[10];
	int timer1_flag[10];

	void setTimer1(int index,int duration){
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
		timer1_counter[index]=duration / time_cycle;
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <setTimer1+0x30>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	fb92 f2f3 	sdiv	r2, r2, r3
 8002880:	4907      	ldr	r1, [pc, #28]	; (80028a0 <setTimer1+0x34>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		timer1_flag[index] = 0;
 8002888:	4a06      	ldr	r2, [pc, #24]	; (80028a4 <setTimer1+0x38>)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2100      	movs	r1, #0
 800288e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	2000003c 	.word	0x2000003c
 80028a0:	200000ec 	.word	0x200000ec
 80028a4:	200000c4 	.word	0x200000c4

080028a8 <SetTimerForTimerSet>:
	void SetTimerForTimerSet(int index,int duration,int timer_set){
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
		time_cycle = timer_set;
 80028b4:	4a05      	ldr	r2, [pc, #20]	; (80028cc <SetTimerForTimerSet+0x24>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6013      	str	r3, [r2, #0]
		setTimer1(index, duration);
 80028ba:	68b9      	ldr	r1, [r7, #8]
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f7ff ffd5 	bl	800286c <setTimer1>
	}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	2000003c 	.word	0x2000003c

080028d0 <timerRun>:
	void timerRun(){
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
		for (int i = 0 ; i <10 ; i++){
 80028d6:	2300      	movs	r3, #0
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	e01c      	b.n	8002916 <timerRun+0x46>
			if(timer1_counter[i] >  0 ){
 80028dc:	4a12      	ldr	r2, [pc, #72]	; (8002928 <timerRun+0x58>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	dd08      	ble.n	80028fa <timerRun+0x2a>
					timer1_counter[i]--;
 80028e8:	4a0f      	ldr	r2, [pc, #60]	; (8002928 <timerRun+0x58>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f0:	1e5a      	subs	r2, r3, #1
 80028f2:	490d      	ldr	r1, [pc, #52]	; (8002928 <timerRun+0x58>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 }
			if(timer1_counter[i]<=0){
 80028fa:	4a0b      	ldr	r2, [pc, #44]	; (8002928 <timerRun+0x58>)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002902:	2b00      	cmp	r3, #0
 8002904:	dc04      	bgt.n	8002910 <timerRun+0x40>
					timer1_flag[i]=1;
 8002906:	4a09      	ldr	r2, [pc, #36]	; (800292c <timerRun+0x5c>)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2101      	movs	r1, #1
 800290c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0 ; i <10 ; i++){
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3301      	adds	r3, #1
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b09      	cmp	r3, #9
 800291a:	dddf      	ble.n	80028dc <timerRun+0xc>
			}
		}


	}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	200000ec 	.word	0x200000ec
 800292c:	200000c4 	.word	0x200000c4

08002930 <__libc_init_array>:
 8002930:	b570      	push	{r4, r5, r6, lr}
 8002932:	2600      	movs	r6, #0
 8002934:	4d0c      	ldr	r5, [pc, #48]	; (8002968 <__libc_init_array+0x38>)
 8002936:	4c0d      	ldr	r4, [pc, #52]	; (800296c <__libc_init_array+0x3c>)
 8002938:	1b64      	subs	r4, r4, r5
 800293a:	10a4      	asrs	r4, r4, #2
 800293c:	42a6      	cmp	r6, r4
 800293e:	d109      	bne.n	8002954 <__libc_init_array+0x24>
 8002940:	f000 f822 	bl	8002988 <_init>
 8002944:	2600      	movs	r6, #0
 8002946:	4d0a      	ldr	r5, [pc, #40]	; (8002970 <__libc_init_array+0x40>)
 8002948:	4c0a      	ldr	r4, [pc, #40]	; (8002974 <__libc_init_array+0x44>)
 800294a:	1b64      	subs	r4, r4, r5
 800294c:	10a4      	asrs	r4, r4, #2
 800294e:	42a6      	cmp	r6, r4
 8002950:	d105      	bne.n	800295e <__libc_init_array+0x2e>
 8002952:	bd70      	pop	{r4, r5, r6, pc}
 8002954:	f855 3b04 	ldr.w	r3, [r5], #4
 8002958:	4798      	blx	r3
 800295a:	3601      	adds	r6, #1
 800295c:	e7ee      	b.n	800293c <__libc_init_array+0xc>
 800295e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002962:	4798      	blx	r3
 8002964:	3601      	adds	r6, #1
 8002966:	e7f2      	b.n	800294e <__libc_init_array+0x1e>
 8002968:	080029c4 	.word	0x080029c4
 800296c:	080029c4 	.word	0x080029c4
 8002970:	080029c4 	.word	0x080029c4
 8002974:	080029c8 	.word	0x080029c8

08002978 <memset>:
 8002978:	4603      	mov	r3, r0
 800297a:	4402      	add	r2, r0
 800297c:	4293      	cmp	r3, r2
 800297e:	d100      	bne.n	8002982 <memset+0xa>
 8002980:	4770      	bx	lr
 8002982:	f803 1b01 	strb.w	r1, [r3], #1
 8002986:	e7f9      	b.n	800297c <memset+0x4>

08002988 <_init>:
 8002988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298a:	bf00      	nop
 800298c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800298e:	bc08      	pop	{r3}
 8002990:	469e      	mov	lr, r3
 8002992:	4770      	bx	lr

08002994 <_fini>:
 8002994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002996:	bf00      	nop
 8002998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800299a:	bc08      	pop	{r3}
 800299c:	469e      	mov	lr, r3
 800299e:	4770      	bx	lr

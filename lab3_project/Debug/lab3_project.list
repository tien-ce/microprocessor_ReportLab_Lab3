
lab3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b54  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002c60  08002c60  00012c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c84  08002c84  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08002c84  08002c84  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c84  08002c84  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c84  08002c84  00012c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c88  08002c88  00012c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08002c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000044  08002cd0  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002cd0  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d21  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e1e  00000000  00000000  00029d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002bbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002c6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017695  00000000  00000000  0002d090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d93b  00000000  00000000  00044725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008289b  00000000  00000000  00052060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d48fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a70  00000000  00000000  000d4950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000044 	.word	0x20000044
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c48 	.word	0x08002c48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000048 	.word	0x20000048
 8000148:	08002c48 	.word	0x08002c48

0800014c <ex4_init>:
 *
 *  Created on: Sep 27, 2024
 *      Author: thuyh
 */
#include <ex4.h>
void ex4_init(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	SetTimerForTimerSet(0, 500,10);
 8000150:	220a      	movs	r2, #10
 8000152:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000156:	2000      	movs	r0, #0
 8000158:	f002 fd06 	bl	8002b68 <SetTimerForTimerSet>
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}

08000160 <ex5_init>:
 *      Author: thuyh
 */


#include "ex5.h"
void ex5_init(){
 8000160:	b480      	push	{r7}
 8000162:	af00      	add	r7, sp, #0

}
 8000164:	bf00      	nop
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr

0800016c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	b086      	sub	sp, #24
 8000170:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000172:	f000 f9f1 	bl	8000558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000176:	f000 f829 	bl	80001cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017a:	f000 f8af 	bl	80002dc <MX_GPIO_Init>
  MX_TIM2_Init();
 800017e:	f000 f861 	bl	8000244 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000182:	480f      	ldr	r0, [pc, #60]	; (80001c0 <main+0x54>)
 8000184:	f001 f946 	bl	8001414 <HAL_TIM_Base_Start_IT>
  ex4_init();
 8000188:	f7ff ffe0 	bl	800014c <ex4_init>
  ex5_init();
 800018c:	f7ff ffe8 	bl	8000160 <ex5_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  automatic_run();
 8000190:	f002 fbba 	bl	8002908 <automatic_run>
	  manual_run();
 8000194:	f002 fc9a 	bl	8002acc <manual_run>
	  traffic_double_display(GPIOA, RED_1_Pin, YELLOW_1_Pin, GREEN_1_Pin, GPIOA, RED_2_Pin, YELLOW_2_Pin, GREEN_2_Pin, status);
 8000198:	4b0a      	ldr	r3, [pc, #40]	; (80001c4 <main+0x58>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	9304      	str	r3, [sp, #16]
 800019e:	2340      	movs	r3, #64	; 0x40
 80001a0:	9303      	str	r3, [sp, #12]
 80001a2:	2380      	movs	r3, #128	; 0x80
 80001a4:	9302      	str	r3, [sp, #8]
 80001a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001aa:	9301      	str	r3, [sp, #4]
 80001ac:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <main+0x5c>)
 80001ae:	9300      	str	r3, [sp, #0]
 80001b0:	2302      	movs	r3, #2
 80001b2:	2204      	movs	r2, #4
 80001b4:	2108      	movs	r1, #8
 80001b6:	4804      	ldr	r0, [pc, #16]	; (80001c8 <main+0x5c>)
 80001b8:	f001 fec0 	bl	8001f3c <traffic_double_display>
	  automatic_run();
 80001bc:	e7e8      	b.n	8000190 <main+0x24>
 80001be:	bf00      	nop
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	20000038 	.word	0x20000038
 80001c8:	40010800 	.word	0x40010800

080001cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b090      	sub	sp, #64	; 0x40
 80001d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d2:	f107 0318 	add.w	r3, r7, #24
 80001d6:	2228      	movs	r2, #40	; 0x28
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f002 fd2c 	bl	8002c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]
 80001ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ee:	2302      	movs	r3, #2
 80001f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f2:	2301      	movs	r3, #1
 80001f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f6:	2310      	movs	r3, #16
 80001f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001fa:	2300      	movs	r3, #0
 80001fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fe:	f107 0318 	add.w	r3, r7, #24
 8000202:	4618      	mov	r0, r3
 8000204:	f000 fcda 	bl	8000bbc <HAL_RCC_OscConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800020e:	f000 f8e9 	bl	80003e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000212:	230f      	movs	r3, #15
 8000214:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000216:	2300      	movs	r3, #0
 8000218:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f000 ff46 	bl	80010bc <HAL_RCC_ClockConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000236:	f000 f8d5 	bl	80003e4 <Error_Handler>
  }
}
 800023a:	bf00      	nop
 800023c:	3740      	adds	r7, #64	; 0x40
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
	...

08000244 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b086      	sub	sp, #24
 8000248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800024a:	f107 0308 	add.w	r3, r7, #8
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000258:	463b      	mov	r3, r7
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000260:	4b1d      	ldr	r3, [pc, #116]	; (80002d8 <MX_TIM2_Init+0x94>)
 8000262:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000266:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000268:	4b1b      	ldr	r3, [pc, #108]	; (80002d8 <MX_TIM2_Init+0x94>)
 800026a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800026e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000270:	4b19      	ldr	r3, [pc, #100]	; (80002d8 <MX_TIM2_Init+0x94>)
 8000272:	2200      	movs	r2, #0
 8000274:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000276:	4b18      	ldr	r3, [pc, #96]	; (80002d8 <MX_TIM2_Init+0x94>)
 8000278:	2209      	movs	r2, #9
 800027a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800027c:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <MX_TIM2_Init+0x94>)
 800027e:	2200      	movs	r2, #0
 8000280:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000282:	4b15      	ldr	r3, [pc, #84]	; (80002d8 <MX_TIM2_Init+0x94>)
 8000284:	2200      	movs	r2, #0
 8000286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000288:	4813      	ldr	r0, [pc, #76]	; (80002d8 <MX_TIM2_Init+0x94>)
 800028a:	f001 f873 	bl	8001374 <HAL_TIM_Base_Init>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000294:	f000 f8a6 	bl	80003e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800029c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800029e:	f107 0308 	add.w	r3, r7, #8
 80002a2:	4619      	mov	r1, r3
 80002a4:	480c      	ldr	r0, [pc, #48]	; (80002d8 <MX_TIM2_Init+0x94>)
 80002a6:	f001 f9f1 	bl	800168c <HAL_TIM_ConfigClockSource>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002b0:	f000 f898 	bl	80003e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002b4:	2300      	movs	r3, #0
 80002b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002b8:	2300      	movs	r3, #0
 80002ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002bc:	463b      	mov	r3, r7
 80002be:	4619      	mov	r1, r3
 80002c0:	4805      	ldr	r0, [pc, #20]	; (80002d8 <MX_TIM2_Init+0x94>)
 80002c2:	f001 fbc9 	bl	8001a58 <HAL_TIMEx_MasterConfigSynchronization>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002cc:	f000 f88a 	bl	80003e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002d0:	bf00      	nop
 80002d2:	3718      	adds	r7, #24
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	2000007c 	.word	0x2000007c

080002dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b088      	sub	sp, #32
 80002e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e2:	f107 0310 	add.w	r3, r7, #16
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f0:	4b2f      	ldr	r3, [pc, #188]	; (80003b0 <MX_GPIO_Init+0xd4>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a2e      	ldr	r2, [pc, #184]	; (80003b0 <MX_GPIO_Init+0xd4>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b2c      	ldr	r3, [pc, #176]	; (80003b0 <MX_GPIO_Init+0xd4>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0310 	and.w	r3, r3, #16
 8000304:	60fb      	str	r3, [r7, #12]
 8000306:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000308:	4b29      	ldr	r3, [pc, #164]	; (80003b0 <MX_GPIO_Init+0xd4>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a28      	ldr	r2, [pc, #160]	; (80003b0 <MX_GPIO_Init+0xd4>)
 800030e:	f043 0304 	orr.w	r3, r3, #4
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b26      	ldr	r3, [pc, #152]	; (80003b0 <MX_GPIO_Init+0xd4>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0304 	and.w	r3, r3, #4
 800031c:	60bb      	str	r3, [r7, #8]
 800031e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000320:	4b23      	ldr	r3, [pc, #140]	; (80003b0 <MX_GPIO_Init+0xd4>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a22      	ldr	r2, [pc, #136]	; (80003b0 <MX_GPIO_Init+0xd4>)
 8000326:	f043 0308 	orr.w	r3, r3, #8
 800032a:	6193      	str	r3, [r2, #24]
 800032c:	4b20      	ldr	r3, [pc, #128]	; (80003b0 <MX_GPIO_Init+0xd4>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	f003 0308 	and.w	r3, r3, #8
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin|YELLOW_1_Pin|RED_1_Pin|LED_RED_Pin
 8000338:	2200      	movs	r2, #0
 800033a:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 800033e:	481d      	ldr	r0, [pc, #116]	; (80003b4 <MX_GPIO_Init+0xd8>)
 8000340:	f000 fc0b 	bl	8000b5a <HAL_GPIO_WritePin>
                          |GREEN_2_Pin|YELLOW_2_Pin|RED_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEGLED1_0_Pin|SEGLED1_1_Pin|SEGLED1_2_Pin|SEGLED2_3_Pin
 8000344:	2200      	movs	r2, #0
 8000346:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800034a:	481b      	ldr	r0, [pc, #108]	; (80003b8 <MX_GPIO_Init+0xdc>)
 800034c:	f000 fc05 	bl	8000b5a <HAL_GPIO_WritePin>
                          |SEGLED2_4_Pin|SEGLED2_5_Pin|SEGLED2_6_Pin|SEGLED1_3_Pin
                          |SEGLED1_4_Pin|SEGLED1_5_Pin|SEGLED1_6_Pin|SEGLED2_0_Pin
                          |SEGLED2_1_Pin|SEGLED2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000350:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800035a:	2301      	movs	r3, #1
 800035c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	4619      	mov	r1, r3
 8000364:	4815      	ldr	r0, [pc, #84]	; (80003bc <MX_GPIO_Init+0xe0>)
 8000366:	f000 fa67 	bl	8000838 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_1_Pin YELLOW_1_Pin RED_1_Pin LED_RED_Pin
                           GREEN_2_Pin YELLOW_2_Pin RED_2_Pin */
  GPIO_InitStruct.Pin = GREEN_1_Pin|YELLOW_1_Pin|RED_1_Pin|LED_RED_Pin
 800036a:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
 800036e:	613b      	str	r3, [r7, #16]
                          |GREEN_2_Pin|YELLOW_2_Pin|RED_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000378:	2302      	movs	r3, #2
 800037a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037c:	f107 0310 	add.w	r3, r7, #16
 8000380:	4619      	mov	r1, r3
 8000382:	480c      	ldr	r0, [pc, #48]	; (80003b4 <MX_GPIO_Init+0xd8>)
 8000384:	f000 fa58 	bl	8000838 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEGLED1_0_Pin SEGLED1_1_Pin SEGLED1_2_Pin SEGLED2_3_Pin
                           SEGLED2_4_Pin SEGLED2_5_Pin SEGLED2_6_Pin SEGLED1_3_Pin
                           SEGLED1_4_Pin SEGLED1_5_Pin SEGLED1_6_Pin SEGLED2_0_Pin
                           SEGLED2_1_Pin SEGLED2_2_Pin */
  GPIO_InitStruct.Pin = SEGLED1_0_Pin|SEGLED1_1_Pin|SEGLED1_2_Pin|SEGLED2_3_Pin
 8000388:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800038c:	613b      	str	r3, [r7, #16]
                          |SEGLED2_4_Pin|SEGLED2_5_Pin|SEGLED2_6_Pin|SEGLED1_3_Pin
                          |SEGLED1_4_Pin|SEGLED1_5_Pin|SEGLED1_6_Pin|SEGLED2_0_Pin
                          |SEGLED2_1_Pin|SEGLED2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038e:	2301      	movs	r3, #1
 8000390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	2300      	movs	r3, #0
 8000394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000396:	2302      	movs	r3, #2
 8000398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800039a:	f107 0310 	add.w	r3, r7, #16
 800039e:	4619      	mov	r1, r3
 80003a0:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_GPIO_Init+0xdc>)
 80003a2:	f000 fa49 	bl	8000838 <HAL_GPIO_Init>

}
 80003a6:	bf00      	nop
 80003a8:	3720      	adds	r7, #32
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000
 80003b4:	40010800 	.word	0x40010800
 80003b8:	40010c00 	.word	0x40010c00
 80003bc:	40011000 	.word	0x40011000

080003c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	timerRun();
 80003c8:	f002 fbe2 	bl	8002b90 <timerRun>
	button_reading(GPIOx, GPIO_Pin);
 80003cc:	4903      	ldr	r1, [pc, #12]	; (80003dc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80003ce:	4804      	ldr	r0, [pc, #16]	; (80003e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003d0:	f002 fac8 	bl	8002964 <button_reading>
}
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	2000000c 	.word	0x2000000c
 80003e0:	20000000 	.word	0x20000000

080003e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e8:	b672      	cpsid	i
}
 80003ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ec:	e7fe      	b.n	80003ec <Error_Handler+0x8>
	...

080003f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <HAL_MspInit+0x5c>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a14      	ldr	r2, [pc, #80]	; (800044c <HAL_MspInit+0x5c>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <HAL_MspInit+0x5c>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	4a0e      	ldr	r2, [pc, #56]	; (800044c <HAL_MspInit+0x5c>)
 8000414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000418:	61d3      	str	r3, [r2, #28]
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <HAL_MspInit+0x60>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <HAL_MspInit+0x60>)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	40021000 	.word	0x40021000
 8000450:	40010000 	.word	0x40010000

08000454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000464:	d113      	bne.n	800048e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <HAL_TIM_Base_MspInit+0x44>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a0b      	ldr	r2, [pc, #44]	; (8000498 <HAL_TIM_Base_MspInit+0x44>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <HAL_TIM_Base_MspInit+0x44>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	2100      	movs	r1, #0
 8000482:	201c      	movs	r0, #28
 8000484:	f000 f9a1 	bl	80007ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000488:	201c      	movs	r0, #28
 800048a:	f000 f9ba 	bl	8000802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800048e:	bf00      	nop
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000

0800049c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <NMI_Handler+0x4>

080004a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <MemManage_Handler+0x4>

080004ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <BusFault_Handler+0x4>

080004b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <UsageFault_Handler+0x4>

080004ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr

080004c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e2:	f000 f87f 	bl	80005e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80004f0:	4802      	ldr	r0, [pc, #8]	; (80004fc <TIM2_IRQHandler+0x10>)
 80004f2:	f000 ffdb 	bl	80014ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	2000007c 	.word	0x2000007c

08000500 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800050c:	f7ff fff8 	bl	8000500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000512:	490c      	ldr	r1, [pc, #48]	; (8000544 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000514:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000518:	e002      	b.n	8000520 <LoopCopyDataInit>

0800051a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800051c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051e:	3304      	adds	r3, #4

08000520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000524:	d3f9      	bcc.n	800051a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000526:	4a09      	ldr	r2, [pc, #36]	; (800054c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000528:	4c09      	ldr	r4, [pc, #36]	; (8000550 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800052c:	e001      	b.n	8000532 <LoopFillZerobss>

0800052e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000530:	3204      	adds	r2, #4

08000532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000534:	d3fb      	bcc.n	800052e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000536:	f002 fb5b 	bl	8002bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800053a:	f7ff fe17 	bl	800016c <main>
  bx lr
 800053e:	4770      	bx	lr
  ldr r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000544:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8000548:	08002c8c 	.word	0x08002c8c
  ldr r2, =_sbss
 800054c:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8000550:	20000124 	.word	0x20000124

08000554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <ADC1_2_IRQHandler>
	...

08000558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <HAL_Init+0x28>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a07      	ldr	r2, [pc, #28]	; (8000580 <HAL_Init+0x28>)
 8000562:	f043 0310 	orr.w	r3, r3, #16
 8000566:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000568:	2003      	movs	r0, #3
 800056a:	f000 f923 	bl	80007b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800056e:	200f      	movs	r0, #15
 8000570:	f000 f808 	bl	8000584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000574:	f7ff ff3c 	bl	80003f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000578:	2300      	movs	r3, #0
}
 800057a:	4618      	mov	r0, r3
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40022000 	.word	0x40022000

08000584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <HAL_InitTick+0x54>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <HAL_InitTick+0x58>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059a:	fbb3 f3f1 	udiv	r3, r3, r1
 800059e:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f93b 	bl	800081e <HAL_SYSTICK_Config>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
 80005b0:	e00e      	b.n	80005d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b0f      	cmp	r3, #15
 80005b6:	d80a      	bhi.n	80005ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b8:	2200      	movs	r2, #0
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	f04f 30ff 	mov.w	r0, #4294967295
 80005c0:	f000 f903 	bl	80007ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <HAL_InitTick+0x5c>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ca:	2300      	movs	r3, #0
 80005cc:	e000      	b.n	80005d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000014 	.word	0x20000014
 80005dc:	2000001c 	.word	0x2000001c
 80005e0:	20000018 	.word	0x20000018

080005e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <HAL_IncTick+0x1c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <HAL_IncTick+0x20>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	4a03      	ldr	r2, [pc, #12]	; (8000604 <HAL_IncTick+0x20>)
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	2000001c 	.word	0x2000001c
 8000604:	200000c4 	.word	0x200000c4

08000608 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  return uwTick;
 800060c:	4b02      	ldr	r3, [pc, #8]	; (8000618 <HAL_GetTick+0x10>)
 800060e:	681b      	ldr	r3, [r3, #0]
}
 8000610:	4618      	mov	r0, r3
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	200000c4 	.word	0x200000c4

0800061c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000638:	4013      	ands	r3, r2
 800063a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064e:	4a04      	ldr	r2, [pc, #16]	; (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	60d3      	str	r3, [r2, #12]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <__NVIC_GetPriorityGrouping+0x18>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	0a1b      	lsrs	r3, r3, #8
 800066e:	f003 0307 	and.w	r3, r3, #7
}
 8000672:	4618      	mov	r0, r3
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	2b00      	cmp	r3, #0
 8000690:	db0b      	blt.n	80006aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f003 021f 	and.w	r2, r3, #31
 8000698:	4906      	ldr	r1, [pc, #24]	; (80006b4 <__NVIC_EnableIRQ+0x34>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	095b      	lsrs	r3, r3, #5
 80006a0:	2001      	movs	r0, #1
 80006a2:	fa00 f202 	lsl.w	r2, r0, r2
 80006a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	e000e100 	.word	0xe000e100

080006b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db0a      	blt.n	80006e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	490c      	ldr	r1, [pc, #48]	; (8000704 <__NVIC_SetPriority+0x4c>)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e0:	e00a      	b.n	80006f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4908      	ldr	r1, [pc, #32]	; (8000708 <__NVIC_SetPriority+0x50>)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	3b04      	subs	r3, #4
 80006f0:	0112      	lsls	r2, r2, #4
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	440b      	add	r3, r1
 80006f6:	761a      	strb	r2, [r3, #24]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000e100 	.word	0xe000e100
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800070c:	b480      	push	{r7}
 800070e:	b089      	sub	sp, #36	; 0x24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	f1c3 0307 	rsb	r3, r3, #7
 8000726:	2b04      	cmp	r3, #4
 8000728:	bf28      	it	cs
 800072a:	2304      	movcs	r3, #4
 800072c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3304      	adds	r3, #4
 8000732:	2b06      	cmp	r3, #6
 8000734:	d902      	bls.n	800073c <NVIC_EncodePriority+0x30>
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3b03      	subs	r3, #3
 800073a:	e000      	b.n	800073e <NVIC_EncodePriority+0x32>
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	f04f 32ff 	mov.w	r2, #4294967295
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	43da      	mvns	r2, r3
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	401a      	ands	r2, r3
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000754:	f04f 31ff 	mov.w	r1, #4294967295
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	43d9      	mvns	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	4313      	orrs	r3, r2
         );
}
 8000766:	4618      	mov	r0, r3
 8000768:	3724      	adds	r7, #36	; 0x24
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3b01      	subs	r3, #1
 800077c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000780:	d301      	bcc.n	8000786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000782:	2301      	movs	r3, #1
 8000784:	e00f      	b.n	80007a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <SysTick_Config+0x40>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3b01      	subs	r3, #1
 800078c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800078e:	210f      	movs	r1, #15
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	f7ff ff90 	bl	80006b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <SysTick_Config+0x40>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <SysTick_Config+0x40>)
 80007a0:	2207      	movs	r2, #7
 80007a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	e000e010 	.word	0xe000e010

080007b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff2d 	bl	800061c <__NVIC_SetPriorityGrouping>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b086      	sub	sp, #24
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007dc:	f7ff ff42 	bl	8000664 <__NVIC_GetPriorityGrouping>
 80007e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	68b9      	ldr	r1, [r7, #8]
 80007e6:	6978      	ldr	r0, [r7, #20]
 80007e8:	f7ff ff90 	bl	800070c <NVIC_EncodePriority>
 80007ec:	4602      	mov	r2, r0
 80007ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff5f 	bl	80006b8 <__NVIC_SetPriority>
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff35 	bl	8000680 <__NVIC_EnableIRQ>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff ffa2 	bl	8000770 <SysTick_Config>
 800082c:	4603      	mov	r3, r0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000838:	b480      	push	{r7}
 800083a:	b08b      	sub	sp, #44	; 0x2c
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800084a:	e148      	b.n	8000ade <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800084c:	2201      	movs	r2, #1
 800084e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	69fa      	ldr	r2, [r7, #28]
 800085c:	4013      	ands	r3, r2
 800085e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000860:	69ba      	ldr	r2, [r7, #24]
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	429a      	cmp	r2, r3
 8000866:	f040 8137 	bne.w	8000ad8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	4aa3      	ldr	r2, [pc, #652]	; (8000afc <HAL_GPIO_Init+0x2c4>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d05e      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 8000874:	4aa1      	ldr	r2, [pc, #644]	; (8000afc <HAL_GPIO_Init+0x2c4>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d875      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 800087a:	4aa1      	ldr	r2, [pc, #644]	; (8000b00 <HAL_GPIO_Init+0x2c8>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d058      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 8000880:	4a9f      	ldr	r2, [pc, #636]	; (8000b00 <HAL_GPIO_Init+0x2c8>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d86f      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 8000886:	4a9f      	ldr	r2, [pc, #636]	; (8000b04 <HAL_GPIO_Init+0x2cc>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d052      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 800088c:	4a9d      	ldr	r2, [pc, #628]	; (8000b04 <HAL_GPIO_Init+0x2cc>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d869      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 8000892:	4a9d      	ldr	r2, [pc, #628]	; (8000b08 <HAL_GPIO_Init+0x2d0>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d04c      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 8000898:	4a9b      	ldr	r2, [pc, #620]	; (8000b08 <HAL_GPIO_Init+0x2d0>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d863      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 800089e:	4a9b      	ldr	r2, [pc, #620]	; (8000b0c <HAL_GPIO_Init+0x2d4>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d046      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 80008a4:	4a99      	ldr	r2, [pc, #612]	; (8000b0c <HAL_GPIO_Init+0x2d4>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d85d      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 80008aa:	2b12      	cmp	r3, #18
 80008ac:	d82a      	bhi.n	8000904 <HAL_GPIO_Init+0xcc>
 80008ae:	2b12      	cmp	r3, #18
 80008b0:	d859      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 80008b2:	a201      	add	r2, pc, #4	; (adr r2, 80008b8 <HAL_GPIO_Init+0x80>)
 80008b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b8:	08000933 	.word	0x08000933
 80008bc:	0800090d 	.word	0x0800090d
 80008c0:	0800091f 	.word	0x0800091f
 80008c4:	08000961 	.word	0x08000961
 80008c8:	08000967 	.word	0x08000967
 80008cc:	08000967 	.word	0x08000967
 80008d0:	08000967 	.word	0x08000967
 80008d4:	08000967 	.word	0x08000967
 80008d8:	08000967 	.word	0x08000967
 80008dc:	08000967 	.word	0x08000967
 80008e0:	08000967 	.word	0x08000967
 80008e4:	08000967 	.word	0x08000967
 80008e8:	08000967 	.word	0x08000967
 80008ec:	08000967 	.word	0x08000967
 80008f0:	08000967 	.word	0x08000967
 80008f4:	08000967 	.word	0x08000967
 80008f8:	08000967 	.word	0x08000967
 80008fc:	08000915 	.word	0x08000915
 8000900:	08000929 	.word	0x08000929
 8000904:	4a82      	ldr	r2, [pc, #520]	; (8000b10 <HAL_GPIO_Init+0x2d8>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d013      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800090a:	e02c      	b.n	8000966 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	623b      	str	r3, [r7, #32]
          break;
 8000912:	e029      	b.n	8000968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	3304      	adds	r3, #4
 800091a:	623b      	str	r3, [r7, #32]
          break;
 800091c:	e024      	b.n	8000968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	3308      	adds	r3, #8
 8000924:	623b      	str	r3, [r7, #32]
          break;
 8000926:	e01f      	b.n	8000968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	330c      	adds	r3, #12
 800092e:	623b      	str	r3, [r7, #32]
          break;
 8000930:	e01a      	b.n	8000968 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d102      	bne.n	8000940 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800093a:	2304      	movs	r3, #4
 800093c:	623b      	str	r3, [r7, #32]
          break;
 800093e:	e013      	b.n	8000968 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d105      	bne.n	8000954 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000948:	2308      	movs	r3, #8
 800094a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	611a      	str	r2, [r3, #16]
          break;
 8000952:	e009      	b.n	8000968 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000954:	2308      	movs	r3, #8
 8000956:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	69fa      	ldr	r2, [r7, #28]
 800095c:	615a      	str	r2, [r3, #20]
          break;
 800095e:	e003      	b.n	8000968 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
          break;
 8000964:	e000      	b.n	8000968 <HAL_GPIO_Init+0x130>
          break;
 8000966:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	2bff      	cmp	r3, #255	; 0xff
 800096c:	d801      	bhi.n	8000972 <HAL_GPIO_Init+0x13a>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	e001      	b.n	8000976 <HAL_GPIO_Init+0x13e>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3304      	adds	r3, #4
 8000976:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	2bff      	cmp	r3, #255	; 0xff
 800097c:	d802      	bhi.n	8000984 <HAL_GPIO_Init+0x14c>
 800097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	e002      	b.n	800098a <HAL_GPIO_Init+0x152>
 8000984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000986:	3b08      	subs	r3, #8
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	210f      	movs	r1, #15
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	fa01 f303 	lsl.w	r3, r1, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	401a      	ands	r2, r3
 800099c:	6a39      	ldr	r1, [r7, #32]
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	fa01 f303 	lsl.w	r3, r1, r3
 80009a4:	431a      	orrs	r2, r3
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f000 8090 	beq.w	8000ad8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009b8:	4b56      	ldr	r3, [pc, #344]	; (8000b14 <HAL_GPIO_Init+0x2dc>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a55      	ldr	r2, [pc, #340]	; (8000b14 <HAL_GPIO_Init+0x2dc>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b53      	ldr	r3, [pc, #332]	; (8000b14 <HAL_GPIO_Init+0x2dc>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009d0:	4a51      	ldr	r2, [pc, #324]	; (8000b18 <HAL_GPIO_Init+0x2e0>)
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	089b      	lsrs	r3, r3, #2
 80009d6:	3302      	adds	r3, #2
 80009d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	220f      	movs	r2, #15
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	4013      	ands	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a49      	ldr	r2, [pc, #292]	; (8000b1c <HAL_GPIO_Init+0x2e4>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d00d      	beq.n	8000a18 <HAL_GPIO_Init+0x1e0>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a48      	ldr	r2, [pc, #288]	; (8000b20 <HAL_GPIO_Init+0x2e8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d007      	beq.n	8000a14 <HAL_GPIO_Init+0x1dc>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a47      	ldr	r2, [pc, #284]	; (8000b24 <HAL_GPIO_Init+0x2ec>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d101      	bne.n	8000a10 <HAL_GPIO_Init+0x1d8>
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	e004      	b.n	8000a1a <HAL_GPIO_Init+0x1e2>
 8000a10:	2303      	movs	r3, #3
 8000a12:	e002      	b.n	8000a1a <HAL_GPIO_Init+0x1e2>
 8000a14:	2301      	movs	r3, #1
 8000a16:	e000      	b.n	8000a1a <HAL_GPIO_Init+0x1e2>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a1c:	f002 0203 	and.w	r2, r2, #3
 8000a20:	0092      	lsls	r2, r2, #2
 8000a22:	4093      	lsls	r3, r2
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a2a:	493b      	ldr	r1, [pc, #236]	; (8000b18 <HAL_GPIO_Init+0x2e0>)
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	3302      	adds	r3, #2
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d006      	beq.n	8000a52 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a44:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a46:	689a      	ldr	r2, [r3, #8]
 8000a48:	4937      	ldr	r1, [pc, #220]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	608b      	str	r3, [r1, #8]
 8000a50:	e006      	b.n	8000a60 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a52:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	4933      	ldr	r1, [pc, #204]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d006      	beq.n	8000a7a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a6c:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	492d      	ldr	r1, [pc, #180]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	60cb      	str	r3, [r1, #12]
 8000a78:	e006      	b.n	8000a88 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a7a:	4b2b      	ldr	r3, [pc, #172]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a7c:	68da      	ldr	r2, [r3, #12]
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	43db      	mvns	r3, r3
 8000a82:	4929      	ldr	r1, [pc, #164]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a84:	4013      	ands	r3, r2
 8000a86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d006      	beq.n	8000aa2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a94:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	4923      	ldr	r1, [pc, #140]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	604b      	str	r3, [r1, #4]
 8000aa0:	e006      	b.n	8000ab0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	491f      	ldr	r1, [pc, #124]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000aac:	4013      	ands	r3, r2
 8000aae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d006      	beq.n	8000aca <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4919      	ldr	r1, [pc, #100]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	600b      	str	r3, [r1, #0]
 8000ac8:	e006      	b.n	8000ad8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	4915      	ldr	r1, [pc, #84]	; (8000b28 <HAL_GPIO_Init+0x2f0>)
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ada:	3301      	adds	r3, #1
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f47f aeaf 	bne.w	800084c <HAL_GPIO_Init+0x14>
  }
}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	372c      	adds	r7, #44	; 0x2c
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	10320000 	.word	0x10320000
 8000b00:	10310000 	.word	0x10310000
 8000b04:	10220000 	.word	0x10220000
 8000b08:	10210000 	.word	0x10210000
 8000b0c:	10120000 	.word	0x10120000
 8000b10:	10110000 	.word	0x10110000
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	40011000 	.word	0x40011000
 8000b28:	40010400 	.word	0x40010400

08000b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689a      	ldr	r2, [r3, #8]
 8000b3c:	887b      	ldrh	r3, [r7, #2]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d002      	beq.n	8000b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
 8000b48:	e001      	b.n	8000b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr

08000b5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	460b      	mov	r3, r1
 8000b64:	807b      	strh	r3, [r7, #2]
 8000b66:	4613      	mov	r3, r2
 8000b68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b6a:	787b      	ldrb	r3, [r7, #1]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d003      	beq.n	8000b78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b70:	887a      	ldrh	r2, [r7, #2]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b76:	e003      	b.n	8000b80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b78:	887b      	ldrh	r3, [r7, #2]
 8000b7a:	041a      	lsls	r2, r3, #16
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	611a      	str	r2, [r3, #16]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr

08000b8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b085      	sub	sp, #20
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	460b      	mov	r3, r1
 8000b94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b9c:	887a      	ldrh	r2, [r7, #2]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	041a      	lsls	r2, r3, #16
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	43d9      	mvns	r1, r3
 8000ba8:	887b      	ldrh	r3, [r7, #2]
 8000baa:	400b      	ands	r3, r1
 8000bac:	431a      	orrs	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	611a      	str	r2, [r3, #16]
}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e26c      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 8087 	beq.w	8000cea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bdc:	4b92      	ldr	r3, [pc, #584]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f003 030c 	and.w	r3, r3, #12
 8000be4:	2b04      	cmp	r3, #4
 8000be6:	d00c      	beq.n	8000c02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000be8:	4b8f      	ldr	r3, [pc, #572]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 030c 	and.w	r3, r3, #12
 8000bf0:	2b08      	cmp	r3, #8
 8000bf2:	d112      	bne.n	8000c1a <HAL_RCC_OscConfig+0x5e>
 8000bf4:	4b8c      	ldr	r3, [pc, #560]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c00:	d10b      	bne.n	8000c1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c02:	4b89      	ldr	r3, [pc, #548]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d06c      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x12c>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d168      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e246      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c22:	d106      	bne.n	8000c32 <HAL_RCC_OscConfig+0x76>
 8000c24:	4b80      	ldr	r3, [pc, #512]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a7f      	ldr	r2, [pc, #508]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	e02e      	b.n	8000c90 <HAL_RCC_OscConfig+0xd4>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d10c      	bne.n	8000c54 <HAL_RCC_OscConfig+0x98>
 8000c3a:	4b7b      	ldr	r3, [pc, #492]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a7a      	ldr	r2, [pc, #488]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	4b78      	ldr	r3, [pc, #480]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a77      	ldr	r2, [pc, #476]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	e01d      	b.n	8000c90 <HAL_RCC_OscConfig+0xd4>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c5c:	d10c      	bne.n	8000c78 <HAL_RCC_OscConfig+0xbc>
 8000c5e:	4b72      	ldr	r3, [pc, #456]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a71      	ldr	r2, [pc, #452]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	4b6f      	ldr	r3, [pc, #444]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a6e      	ldr	r2, [pc, #440]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	e00b      	b.n	8000c90 <HAL_RCC_OscConfig+0xd4>
 8000c78:	4b6b      	ldr	r3, [pc, #428]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a6a      	ldr	r2, [pc, #424]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	4b68      	ldr	r3, [pc, #416]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a67      	ldr	r2, [pc, #412]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d013      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c98:	f7ff fcb6 	bl	8000608 <HAL_GetTick>
 8000c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca0:	f7ff fcb2 	bl	8000608 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b64      	cmp	r3, #100	; 0x64
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e1fa      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb2:	4b5d      	ldr	r3, [pc, #372]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f0      	beq.n	8000ca0 <HAL_RCC_OscConfig+0xe4>
 8000cbe:	e014      	b.n	8000cea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc0:	f7ff fca2 	bl	8000608 <HAL_GetTick>
 8000cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc6:	e008      	b.n	8000cda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc8:	f7ff fc9e 	bl	8000608 <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	2b64      	cmp	r3, #100	; 0x64
 8000cd4:	d901      	bls.n	8000cda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e1e6      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cda:	4b53      	ldr	r3, [pc, #332]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f0      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x10c>
 8000ce6:	e000      	b.n	8000cea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d063      	beq.n	8000dbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cf6:	4b4c      	ldr	r3, [pc, #304]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 030c 	and.w	r3, r3, #12
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d00b      	beq.n	8000d1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d02:	4b49      	ldr	r3, [pc, #292]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 030c 	and.w	r3, r3, #12
 8000d0a:	2b08      	cmp	r3, #8
 8000d0c:	d11c      	bne.n	8000d48 <HAL_RCC_OscConfig+0x18c>
 8000d0e:	4b46      	ldr	r3, [pc, #280]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d116      	bne.n	8000d48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1a:	4b43      	ldr	r3, [pc, #268]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d005      	beq.n	8000d32 <HAL_RCC_OscConfig+0x176>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d001      	beq.n	8000d32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e1ba      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d32:	4b3d      	ldr	r3, [pc, #244]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	4939      	ldr	r1, [pc, #228]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	4313      	orrs	r3, r2
 8000d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d46:	e03a      	b.n	8000dbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d020      	beq.n	8000d92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d50:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <HAL_RCC_OscConfig+0x270>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d56:	f7ff fc57 	bl	8000608 <HAL_GetTick>
 8000d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d5c:	e008      	b.n	8000d70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d5e:	f7ff fc53 	bl	8000608 <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d901      	bls.n	8000d70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e19b      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d70:	4b2d      	ldr	r3, [pc, #180]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0f0      	beq.n	8000d5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	4927      	ldr	r1, [pc, #156]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	600b      	str	r3, [r1, #0]
 8000d90:	e015      	b.n	8000dbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d92:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <HAL_RCC_OscConfig+0x270>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d98:	f7ff fc36 	bl	8000608 <HAL_GetTick>
 8000d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000da0:	f7ff fc32 	bl	8000608 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e17a      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db2:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f0      	bne.n	8000da0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0308 	and.w	r3, r3, #8
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d03a      	beq.n	8000e40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d019      	beq.n	8000e06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_RCC_OscConfig+0x274>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd8:	f7ff fc16 	bl	8000608 <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de0:	f7ff fc12 	bl	8000608 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e15a      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0f0      	beq.n	8000de0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f000 fa9a 	bl	8001338 <RCC_Delay>
 8000e04:	e01c      	b.n	8000e40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_RCC_OscConfig+0x274>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e0c:	f7ff fbfc 	bl	8000608 <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e12:	e00f      	b.n	8000e34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e14:	f7ff fbf8 	bl	8000608 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d908      	bls.n	8000e34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e140      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	42420000 	.word	0x42420000
 8000e30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e34:	4b9e      	ldr	r3, [pc, #632]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1e9      	bne.n	8000e14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f000 80a6 	beq.w	8000f9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e52:	4b97      	ldr	r3, [pc, #604]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10d      	bne.n	8000e7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	4b94      	ldr	r3, [pc, #592]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	4a93      	ldr	r2, [pc, #588]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	61d3      	str	r3, [r2, #28]
 8000e6a:	4b91      	ldr	r3, [pc, #580]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e76:	2301      	movs	r3, #1
 8000e78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e7a:	4b8e      	ldr	r3, [pc, #568]	; (80010b4 <HAL_RCC_OscConfig+0x4f8>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d118      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e86:	4b8b      	ldr	r3, [pc, #556]	; (80010b4 <HAL_RCC_OscConfig+0x4f8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a8a      	ldr	r2, [pc, #552]	; (80010b4 <HAL_RCC_OscConfig+0x4f8>)
 8000e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e92:	f7ff fbb9 	bl	8000608 <HAL_GetTick>
 8000e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e9a:	f7ff fbb5 	bl	8000608 <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b64      	cmp	r3, #100	; 0x64
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e0fd      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eac:	4b81      	ldr	r3, [pc, #516]	; (80010b4 <HAL_RCC_OscConfig+0x4f8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0f0      	beq.n	8000e9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d106      	bne.n	8000ece <HAL_RCC_OscConfig+0x312>
 8000ec0:	4b7b      	ldr	r3, [pc, #492]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4a7a      	ldr	r2, [pc, #488]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6213      	str	r3, [r2, #32]
 8000ecc:	e02d      	b.n	8000f2a <HAL_RCC_OscConfig+0x36e>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10c      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x334>
 8000ed6:	4b76      	ldr	r3, [pc, #472]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000ed8:	6a1b      	ldr	r3, [r3, #32]
 8000eda:	4a75      	ldr	r2, [pc, #468]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000edc:	f023 0301 	bic.w	r3, r3, #1
 8000ee0:	6213      	str	r3, [r2, #32]
 8000ee2:	4b73      	ldr	r3, [pc, #460]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	4a72      	ldr	r2, [pc, #456]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000ee8:	f023 0304 	bic.w	r3, r3, #4
 8000eec:	6213      	str	r3, [r2, #32]
 8000eee:	e01c      	b.n	8000f2a <HAL_RCC_OscConfig+0x36e>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	2b05      	cmp	r3, #5
 8000ef6:	d10c      	bne.n	8000f12 <HAL_RCC_OscConfig+0x356>
 8000ef8:	4b6d      	ldr	r3, [pc, #436]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	4a6c      	ldr	r2, [pc, #432]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	6213      	str	r3, [r2, #32]
 8000f04:	4b6a      	ldr	r3, [pc, #424]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	4a69      	ldr	r2, [pc, #420]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	6213      	str	r3, [r2, #32]
 8000f10:	e00b      	b.n	8000f2a <HAL_RCC_OscConfig+0x36e>
 8000f12:	4b67      	ldr	r3, [pc, #412]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	4a66      	ldr	r2, [pc, #408]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f18:	f023 0301 	bic.w	r3, r3, #1
 8000f1c:	6213      	str	r3, [r2, #32]
 8000f1e:	4b64      	ldr	r3, [pc, #400]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	4a63      	ldr	r2, [pc, #396]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f24:	f023 0304 	bic.w	r3, r3, #4
 8000f28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d015      	beq.n	8000f5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f32:	f7ff fb69 	bl	8000608 <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f38:	e00a      	b.n	8000f50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3a:	f7ff fb65 	bl	8000608 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e0ab      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f50:	4b57      	ldr	r3, [pc, #348]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0ee      	beq.n	8000f3a <HAL_RCC_OscConfig+0x37e>
 8000f5c:	e014      	b.n	8000f88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5e:	f7ff fb53 	bl	8000608 <HAL_GetTick>
 8000f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f64:	e00a      	b.n	8000f7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f66:	f7ff fb4f 	bl	8000608 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e095      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f7c:	4b4c      	ldr	r3, [pc, #304]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1ee      	bne.n	8000f66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f88:	7dfb      	ldrb	r3, [r7, #23]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d105      	bne.n	8000f9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f8e:	4b48      	ldr	r3, [pc, #288]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a47      	ldr	r2, [pc, #284]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 8081 	beq.w	80010a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fa4:	4b42      	ldr	r3, [pc, #264]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d061      	beq.n	8001074 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d146      	bne.n	8001046 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb8:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <HAL_RCC_OscConfig+0x4fc>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fb23 	bl	8000608 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc6:	f7ff fb1f 	bl	8000608 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e067      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd8:	4b35      	ldr	r3, [pc, #212]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1f0      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a1b      	ldr	r3, [r3, #32]
 8000fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fec:	d108      	bne.n	8001000 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fee:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	492d      	ldr	r1, [pc, #180]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001000:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a19      	ldr	r1, [r3, #32]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	430b      	orrs	r3, r1
 8001012:	4927      	ldr	r1, [pc, #156]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8001014:	4313      	orrs	r3, r2
 8001016:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <HAL_RCC_OscConfig+0x4fc>)
 800101a:	2201      	movs	r2, #1
 800101c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101e:	f7ff faf3 	bl	8000608 <HAL_GetTick>
 8001022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001026:	f7ff faef 	bl	8000608 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e037      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f0      	beq.n	8001026 <HAL_RCC_OscConfig+0x46a>
 8001044:	e02f      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <HAL_RCC_OscConfig+0x4fc>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fadc 	bl	8000608 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001054:	f7ff fad8 	bl	8000608 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e020      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x498>
 8001072:	e018      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d101      	bne.n	8001080 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e013      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	429a      	cmp	r2, r3
 8001092:	d106      	bne.n	80010a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800109e:	429a      	cmp	r2, r3
 80010a0:	d001      	beq.n	80010a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40007000 	.word	0x40007000
 80010b8:	42420060 	.word	0x42420060

080010bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e0d0      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010d0:	4b6a      	ldr	r3, [pc, #424]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d910      	bls.n	8001100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010de:	4b67      	ldr	r3, [pc, #412]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f023 0207 	bic.w	r2, r3, #7
 80010e6:	4965      	ldr	r1, [pc, #404]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ee:	4b63      	ldr	r3, [pc, #396]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d001      	beq.n	8001100 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e0b8      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d020      	beq.n	800114e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d005      	beq.n	8001124 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001118:	4b59      	ldr	r3, [pc, #356]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4a58      	ldr	r2, [pc, #352]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800111e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001122:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001130:	4b53      	ldr	r3, [pc, #332]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4a52      	ldr	r2, [pc, #328]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001136:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800113a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800113c:	4b50      	ldr	r3, [pc, #320]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	494d      	ldr	r1, [pc, #308]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800114a:	4313      	orrs	r3, r2
 800114c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	2b00      	cmp	r3, #0
 8001158:	d040      	beq.n	80011dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d107      	bne.n	8001172 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	4b47      	ldr	r3, [pc, #284]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d115      	bne.n	800119a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e07f      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d107      	bne.n	800118a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117a:	4b41      	ldr	r3, [pc, #260]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d109      	bne.n	800119a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e073      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118a:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e06b      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800119a:	4b39      	ldr	r3, [pc, #228]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f023 0203 	bic.w	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4936      	ldr	r1, [pc, #216]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011ac:	f7ff fa2c 	bl	8000608 <HAL_GetTick>
 80011b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b2:	e00a      	b.n	80011ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b4:	f7ff fa28 	bl	8000608 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e053      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ca:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 020c 	and.w	r2, r3, #12
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	429a      	cmp	r2, r3
 80011da:	d1eb      	bne.n	80011b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d210      	bcs.n	800120c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ea:	4b24      	ldr	r3, [pc, #144]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 0207 	bic.w	r2, r3, #7
 80011f2:	4922      	ldr	r1, [pc, #136]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e032      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d008      	beq.n	800122a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	4916      	ldr	r1, [pc, #88]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	4313      	orrs	r3, r2
 8001228:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d009      	beq.n	800124a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	490e      	ldr	r1, [pc, #56]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	4313      	orrs	r3, r2
 8001248:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800124a:	f000 f821 	bl	8001290 <HAL_RCC_GetSysClockFreq>
 800124e:	4602      	mov	r2, r0
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	490a      	ldr	r1, [pc, #40]	; (8001284 <HAL_RCC_ClockConfig+0x1c8>)
 800125c:	5ccb      	ldrb	r3, [r1, r3]
 800125e:	fa22 f303 	lsr.w	r3, r2, r3
 8001262:	4a09      	ldr	r2, [pc, #36]	; (8001288 <HAL_RCC_ClockConfig+0x1cc>)
 8001264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_RCC_ClockConfig+0x1d0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f98a 	bl	8000584 <HAL_InitTick>

  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40022000 	.word	0x40022000
 8001280:	40021000 	.word	0x40021000
 8001284:	08002c60 	.word	0x08002c60
 8001288:	20000014 	.word	0x20000014
 800128c:	20000018 	.word	0x20000018

08001290 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <HAL_RCC_GetSysClockFreq+0x94>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d002      	beq.n	80012c0 <HAL_RCC_GetSysClockFreq+0x30>
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d003      	beq.n	80012c6 <HAL_RCC_GetSysClockFreq+0x36>
 80012be:	e027      	b.n	8001310 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <HAL_RCC_GetSysClockFreq+0x98>)
 80012c2:	613b      	str	r3, [r7, #16]
      break;
 80012c4:	e027      	b.n	8001316 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	0c9b      	lsrs	r3, r3, #18
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	4a17      	ldr	r2, [pc, #92]	; (800132c <HAL_RCC_GetSysClockFreq+0x9c>)
 80012d0:	5cd3      	ldrb	r3, [r2, r3]
 80012d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d010      	beq.n	8001300 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_RCC_GetSysClockFreq+0x94>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	0c5b      	lsrs	r3, r3, #17
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	4a11      	ldr	r2, [pc, #68]	; (8001330 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012ea:	5cd3      	ldrb	r3, [r2, r3]
 80012ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <HAL_RCC_GetSysClockFreq+0x98>)
 80012f2:	fb02 f203 	mul.w	r2, r2, r3
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e004      	b.n	800130a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001304:	fb02 f303 	mul.w	r3, r2, r3
 8001308:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	613b      	str	r3, [r7, #16]
      break;
 800130e:	e002      	b.n	8001316 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_RCC_GetSysClockFreq+0x98>)
 8001312:	613b      	str	r3, [r7, #16]
      break;
 8001314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001316:	693b      	ldr	r3, [r7, #16]
}
 8001318:	4618      	mov	r0, r3
 800131a:	371c      	adds	r7, #28
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000
 8001328:	007a1200 	.word	0x007a1200
 800132c:	08002c70 	.word	0x08002c70
 8001330:	08002c80 	.word	0x08002c80
 8001334:	003d0900 	.word	0x003d0900

08001338 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <RCC_Delay+0x34>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <RCC_Delay+0x38>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	0a5b      	lsrs	r3, r3, #9
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	fb02 f303 	mul.w	r3, r2, r3
 8001352:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001354:	bf00      	nop
  }
  while (Delay --);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	1e5a      	subs	r2, r3, #1
 800135a:	60fa      	str	r2, [r7, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f9      	bne.n	8001354 <RCC_Delay+0x1c>
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	20000014 	.word	0x20000014
 8001370:	10624dd3 	.word	0x10624dd3

08001374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e041      	b.n	800140a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d106      	bne.n	80013a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff f85a 	bl	8000454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2202      	movs	r2, #2
 80013a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3304      	adds	r3, #4
 80013b0:	4619      	mov	r1, r3
 80013b2:	4610      	mov	r0, r2
 80013b4:	f000 fa56 	bl	8001864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b01      	cmp	r3, #1
 8001426:	d001      	beq.n	800142c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e035      	b.n	8001498 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2202      	movs	r2, #2
 8001430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 0201 	orr.w	r2, r2, #1
 8001442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a16      	ldr	r2, [pc, #88]	; (80014a4 <HAL_TIM_Base_Start_IT+0x90>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d009      	beq.n	8001462 <HAL_TIM_Base_Start_IT+0x4e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001456:	d004      	beq.n	8001462 <HAL_TIM_Base_Start_IT+0x4e>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <HAL_TIM_Base_Start_IT+0x94>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d111      	bne.n	8001486 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b06      	cmp	r3, #6
 8001472:	d010      	beq.n	8001496 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0201 	orr.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001484:	e007      	b.n	8001496 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f042 0201 	orr.w	r2, r2, #1
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40012c00 	.word	0x40012c00
 80014a8:	40000400 	.word	0x40000400

080014ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d020      	beq.n	8001510 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d01b      	beq.n	8001510 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f06f 0202 	mvn.w	r2, #2
 80014e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f998 	bl	800182c <HAL_TIM_IC_CaptureCallback>
 80014fc:	e005      	b.n	800150a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f98b 	bl	800181a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f99a 	bl	800183e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	2b00      	cmp	r3, #0
 8001518:	d020      	beq.n	800155c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d01b      	beq.n	800155c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f06f 0204 	mvn.w	r2, #4
 800152c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2202      	movs	r2, #2
 8001532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f972 	bl	800182c <HAL_TIM_IC_CaptureCallback>
 8001548:	e005      	b.n	8001556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f965 	bl	800181a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f974 	bl	800183e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d020      	beq.n	80015a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01b      	beq.n	80015a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f06f 0208 	mvn.w	r2, #8
 8001578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2204      	movs	r2, #4
 800157e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f94c 	bl	800182c <HAL_TIM_IC_CaptureCallback>
 8001594:	e005      	b.n	80015a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f93f 	bl	800181a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 f94e 	bl	800183e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d020      	beq.n	80015f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f003 0310 	and.w	r3, r3, #16
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d01b      	beq.n	80015f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f06f 0210 	mvn.w	r2, #16
 80015c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2208      	movs	r2, #8
 80015ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f926 	bl	800182c <HAL_TIM_IC_CaptureCallback>
 80015e0:	e005      	b.n	80015ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f919 	bl	800181a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f928 	bl	800183e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00c      	beq.n	8001618 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	d007      	beq.n	8001618 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f06f 0201 	mvn.w	r2, #1
 8001610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7fe fed4 	bl	80003c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00c      	beq.n	800163c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001628:	2b00      	cmp	r3, #0
 800162a:	d007      	beq.n	800163c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 fa6f 	bl	8001b1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00c      	beq.n	8001660 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800164c:	2b00      	cmp	r3, #0
 800164e:	d007      	beq.n	8001660 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f8f8 	bl	8001850 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f003 0320 	and.w	r3, r3, #32
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00c      	beq.n	8001684 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	2b00      	cmp	r3, #0
 8001672:	d007      	beq.n	8001684 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f06f 0220 	mvn.w	r2, #32
 800167c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fa42 	bl	8001b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001684:	bf00      	nop
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_TIM_ConfigClockSource+0x1c>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e0b4      	b.n	8001812 <HAL_TIM_ConfigClockSource+0x186>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2202      	movs	r2, #2
 80016b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80016c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016e0:	d03e      	beq.n	8001760 <HAL_TIM_ConfigClockSource+0xd4>
 80016e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016e6:	f200 8087 	bhi.w	80017f8 <HAL_TIM_ConfigClockSource+0x16c>
 80016ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016ee:	f000 8086 	beq.w	80017fe <HAL_TIM_ConfigClockSource+0x172>
 80016f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016f6:	d87f      	bhi.n	80017f8 <HAL_TIM_ConfigClockSource+0x16c>
 80016f8:	2b70      	cmp	r3, #112	; 0x70
 80016fa:	d01a      	beq.n	8001732 <HAL_TIM_ConfigClockSource+0xa6>
 80016fc:	2b70      	cmp	r3, #112	; 0x70
 80016fe:	d87b      	bhi.n	80017f8 <HAL_TIM_ConfigClockSource+0x16c>
 8001700:	2b60      	cmp	r3, #96	; 0x60
 8001702:	d050      	beq.n	80017a6 <HAL_TIM_ConfigClockSource+0x11a>
 8001704:	2b60      	cmp	r3, #96	; 0x60
 8001706:	d877      	bhi.n	80017f8 <HAL_TIM_ConfigClockSource+0x16c>
 8001708:	2b50      	cmp	r3, #80	; 0x50
 800170a:	d03c      	beq.n	8001786 <HAL_TIM_ConfigClockSource+0xfa>
 800170c:	2b50      	cmp	r3, #80	; 0x50
 800170e:	d873      	bhi.n	80017f8 <HAL_TIM_ConfigClockSource+0x16c>
 8001710:	2b40      	cmp	r3, #64	; 0x40
 8001712:	d058      	beq.n	80017c6 <HAL_TIM_ConfigClockSource+0x13a>
 8001714:	2b40      	cmp	r3, #64	; 0x40
 8001716:	d86f      	bhi.n	80017f8 <HAL_TIM_ConfigClockSource+0x16c>
 8001718:	2b30      	cmp	r3, #48	; 0x30
 800171a:	d064      	beq.n	80017e6 <HAL_TIM_ConfigClockSource+0x15a>
 800171c:	2b30      	cmp	r3, #48	; 0x30
 800171e:	d86b      	bhi.n	80017f8 <HAL_TIM_ConfigClockSource+0x16c>
 8001720:	2b20      	cmp	r3, #32
 8001722:	d060      	beq.n	80017e6 <HAL_TIM_ConfigClockSource+0x15a>
 8001724:	2b20      	cmp	r3, #32
 8001726:	d867      	bhi.n	80017f8 <HAL_TIM_ConfigClockSource+0x16c>
 8001728:	2b00      	cmp	r3, #0
 800172a:	d05c      	beq.n	80017e6 <HAL_TIM_ConfigClockSource+0x15a>
 800172c:	2b10      	cmp	r3, #16
 800172e:	d05a      	beq.n	80017e6 <HAL_TIM_ConfigClockSource+0x15a>
 8001730:	e062      	b.n	80017f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	6899      	ldr	r1, [r3, #8]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	f000 f96a 	bl	8001a1a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001754:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	609a      	str	r2, [r3, #8]
      break;
 800175e:	e04f      	b.n	8001800 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	6899      	ldr	r1, [r3, #8]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f000 f953 	bl	8001a1a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001782:	609a      	str	r2, [r3, #8]
      break;
 8001784:	e03c      	b.n	8001800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6859      	ldr	r1, [r3, #4]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	461a      	mov	r2, r3
 8001794:	f000 f8ca 	bl	800192c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2150      	movs	r1, #80	; 0x50
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f921 	bl	80019e6 <TIM_ITRx_SetConfig>
      break;
 80017a4:	e02c      	b.n	8001800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	6859      	ldr	r1, [r3, #4]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	461a      	mov	r2, r3
 80017b4:	f000 f8e8 	bl	8001988 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2160      	movs	r1, #96	; 0x60
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f911 	bl	80019e6 <TIM_ITRx_SetConfig>
      break;
 80017c4:	e01c      	b.n	8001800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6859      	ldr	r1, [r3, #4]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	461a      	mov	r2, r3
 80017d4:	f000 f8aa 	bl	800192c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2140      	movs	r1, #64	; 0x40
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f901 	bl	80019e6 <TIM_ITRx_SetConfig>
      break;
 80017e4:	e00c      	b.n	8001800 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4619      	mov	r1, r3
 80017f0:	4610      	mov	r0, r2
 80017f2:	f000 f8f8 	bl	80019e6 <TIM_ITRx_SetConfig>
      break;
 80017f6:	e003      	b.n	8001800 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	73fb      	strb	r3, [r7, #15]
      break;
 80017fc:	e000      	b.n	8001800 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80017fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001810:	7bfb      	ldrb	r3, [r7, #15]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
	...

08001864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a2b      	ldr	r2, [pc, #172]	; (8001924 <TIM_Base_SetConfig+0xc0>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d007      	beq.n	800188c <TIM_Base_SetConfig+0x28>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001882:	d003      	beq.n	800188c <TIM_Base_SetConfig+0x28>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a28      	ldr	r2, [pc, #160]	; (8001928 <TIM_Base_SetConfig+0xc4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d108      	bne.n	800189e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a20      	ldr	r2, [pc, #128]	; (8001924 <TIM_Base_SetConfig+0xc0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d007      	beq.n	80018b6 <TIM_Base_SetConfig+0x52>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ac:	d003      	beq.n	80018b6 <TIM_Base_SetConfig+0x52>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a1d      	ldr	r2, [pc, #116]	; (8001928 <TIM_Base_SetConfig+0xc4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d108      	bne.n	80018c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a0d      	ldr	r2, [pc, #52]	; (8001924 <TIM_Base_SetConfig+0xc0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d103      	bne.n	80018fc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	f023 0201 	bic.w	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	611a      	str	r2, [r3, #16]
  }
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	40012c00 	.word	0x40012c00
 8001928:	40000400 	.word	0x40000400

0800192c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	f023 0201 	bic.w	r2, r3, #1
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f023 030a 	bic.w	r3, r3, #10
 8001968:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4313      	orrs	r3, r2
 8001970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	621a      	str	r2, [r3, #32]
}
 800197e:	bf00      	nop
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	f023 0210 	bic.w	r2, r3, #16
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80019b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	031b      	lsls	r3, r3, #12
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80019c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	621a      	str	r2, [r3, #32]
}
 80019dc:	bf00      	nop
 80019de:	371c      	adds	r7, #28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b085      	sub	sp, #20
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	f043 0307 	orr.w	r3, r3, #7
 8001a08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	609a      	str	r2, [r3, #8]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr

08001a1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b087      	sub	sp, #28
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	021a      	lsls	r2, r3, #8
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	609a      	str	r2, [r3, #8]
}
 8001a4e:	bf00      	nop
 8001a50:	371c      	adds	r7, #28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e041      	b.n	8001af4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d009      	beq.n	8001ac8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001abc:	d004      	beq.n	8001ac8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a10      	ldr	r2, [pc, #64]	; (8001b04 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d10c      	bne.n	8001ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ace:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40012c00 	.word	0x40012c00
 8001b04:	40000400 	.word	0x40000400

08001b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <DISPLAY_LED_7_SEGMENT>:
 *  Created on: Sep 2, 2024
 *      Author: thuyh
 */
#include "LED7_SEGMENT.h"
void DISPLAY_LED_7_SEGMENT(GPIO_TypeDef* GPIOx,uint16_t LED_7_0,uint16_t LED_7_1,uint16_t LED_7_2,uint16_t LED_7_3,uint16_t LED_7_4
		,uint16_t LED_7_5,uint16_t LED_7_6 ,uint8_t digit){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	4608      	mov	r0, r1
 8001b36:	4611      	mov	r1, r2
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	817b      	strh	r3, [r7, #10]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	813b      	strh	r3, [r7, #8]
 8001b42:	4613      	mov	r3, r2
 8001b44:	80fb      	strh	r3, [r7, #6]
		switch(digit){
 8001b46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b4a:	2b09      	cmp	r3, #9
 8001b4c:	f200 81c6 	bhi.w	8001edc <DISPLAY_LED_7_SEGMENT+0x3b0>
 8001b50:	a201      	add	r2, pc, #4	; (adr r2, 8001b58 <DISPLAY_LED_7_SEGMENT+0x2c>)
 8001b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b56:	bf00      	nop
 8001b58:	08001b81 	.word	0x08001b81
 8001b5c:	08001bd7 	.word	0x08001bd7
 8001b60:	08001c2d 	.word	0x08001c2d
 8001b64:	08001c83 	.word	0x08001c83
 8001b68:	08001cd9 	.word	0x08001cd9
 8001b6c:	08001d2f 	.word	0x08001d2f
 8001b70:	08001d85 	.word	0x08001d85
 8001b74:	08001ddb 	.word	0x08001ddb
 8001b78:	08001e31 	.word	0x08001e31
 8001b7c:	08001e87 	.word	0x08001e87
			case 0:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001b80:	897b      	ldrh	r3, [r7, #10]
 8001b82:	2200      	movs	r2, #0
 8001b84:	4619      	mov	r1, r3
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f7fe ffe7 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001b8c:	893b      	ldrh	r3, [r7, #8]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	4619      	mov	r1, r3
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f7fe ffe1 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f7fe ffdb 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001ba4:	8b3b      	ldrh	r3, [r7, #24]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	4619      	mov	r1, r3
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f7fe ffd5 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, RESET);
 8001bb0:	8bbb      	ldrh	r3, [r7, #28]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f7fe ffcf 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8001bbc:	8c3b      	ldrh	r3, [r7, #32]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f7fe ffc9 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, SET);
 8001bc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4619      	mov	r1, r3
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f7fe ffc3 	bl	8000b5a <HAL_GPIO_WritePin>
					break;
 8001bd4:	e1ad      	b.n	8001f32 <DISPLAY_LED_7_SEGMENT+0x406>
			case 1:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, SET);
 8001bd6:	897b      	ldrh	r3, [r7, #10]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4619      	mov	r1, r3
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f7fe ffbc 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001be2:	893b      	ldrh	r3, [r7, #8]
 8001be4:	2200      	movs	r2, #0
 8001be6:	4619      	mov	r1, r3
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f7fe ffb6 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f7fe ffb0 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, SET);
 8001bfa:	8b3b      	ldrh	r3, [r7, #24]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4619      	mov	r1, r3
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7fe ffaa 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001c06:	8bbb      	ldrh	r3, [r7, #28]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f7fe ffa4 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 8001c12:	8c3b      	ldrh	r3, [r7, #32]
 8001c14:	2201      	movs	r2, #1
 8001c16:	4619      	mov	r1, r3
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f7fe ff9e 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, SET);
 8001c1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c20:	2201      	movs	r2, #1
 8001c22:	4619      	mov	r1, r3
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f7fe ff98 	bl	8000b5a <HAL_GPIO_WritePin>
					break;
 8001c2a:	e182      	b.n	8001f32 <DISPLAY_LED_7_SEGMENT+0x406>
			case 2:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001c2c:	897b      	ldrh	r3, [r7, #10]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	4619      	mov	r1, r3
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f7fe ff91 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001c38:	893b      	ldrh	r3, [r7, #8]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f7fe ff8b 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, SET);
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	2201      	movs	r2, #1
 8001c48:	4619      	mov	r1, r3
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f7fe ff85 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001c50:	8b3b      	ldrh	r3, [r7, #24]
 8001c52:	2200      	movs	r2, #0
 8001c54:	4619      	mov	r1, r3
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f7fe ff7f 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, RESET);
 8001c5c:	8bbb      	ldrh	r3, [r7, #28]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	4619      	mov	r1, r3
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f7fe ff79 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 8001c68:	8c3b      	ldrh	r3, [r7, #32]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f7fe ff73 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001c74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c76:	2200      	movs	r2, #0
 8001c78:	4619      	mov	r1, r3
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f7fe ff6d 	bl	8000b5a <HAL_GPIO_WritePin>
				    break;
 8001c80:	e157      	b.n	8001f32 <DISPLAY_LED_7_SEGMENT+0x406>
			case 3:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001c82:	897b      	ldrh	r3, [r7, #10]
 8001c84:	2200      	movs	r2, #0
 8001c86:	4619      	mov	r1, r3
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f7fe ff66 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001c8e:	893b      	ldrh	r3, [r7, #8]
 8001c90:	2200      	movs	r2, #0
 8001c92:	4619      	mov	r1, r3
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7fe ff60 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f7fe ff5a 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001ca6:	8b3b      	ldrh	r3, [r7, #24]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	4619      	mov	r1, r3
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f7fe ff54 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001cb2:	8bbb      	ldrh	r3, [r7, #28]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f7fe ff4e 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 8001cbe:	8c3b      	ldrh	r3, [r7, #32]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7fe ff48 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001cca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ccc:	2200      	movs	r2, #0
 8001cce:	4619      	mov	r1, r3
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f7fe ff42 	bl	8000b5a <HAL_GPIO_WritePin>
					break;
 8001cd6:	e12c      	b.n	8001f32 <DISPLAY_LED_7_SEGMENT+0x406>
			case 4:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, SET);
 8001cd8:	897b      	ldrh	r3, [r7, #10]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4619      	mov	r1, r3
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f7fe ff3b 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001ce4:	893b      	ldrh	r3, [r7, #8]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f7fe ff35 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f7fe ff2f 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, SET);
 8001cfc:	8b3b      	ldrh	r3, [r7, #24]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	4619      	mov	r1, r3
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f7fe ff29 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001d08:	8bbb      	ldrh	r3, [r7, #28]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f7fe ff23 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8001d14:	8c3b      	ldrh	r3, [r7, #32]
 8001d16:	2200      	movs	r2, #0
 8001d18:	4619      	mov	r1, r3
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f7fe ff1d 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001d20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d22:	2200      	movs	r2, #0
 8001d24:	4619      	mov	r1, r3
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f7fe ff17 	bl	8000b5a <HAL_GPIO_WritePin>
					break;
 8001d2c:	e101      	b.n	8001f32 <DISPLAY_LED_7_SEGMENT+0x406>
			case 5:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001d2e:	897b      	ldrh	r3, [r7, #10]
 8001d30:	2200      	movs	r2, #0
 8001d32:	4619      	mov	r1, r3
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f7fe ff10 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, SET);
 8001d3a:	893b      	ldrh	r3, [r7, #8]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	4619      	mov	r1, r3
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f7fe ff0a 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f7fe ff04 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001d52:	8b3b      	ldrh	r3, [r7, #24]
 8001d54:	2200      	movs	r2, #0
 8001d56:	4619      	mov	r1, r3
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f7fe fefe 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001d5e:	8bbb      	ldrh	r3, [r7, #28]
 8001d60:	2201      	movs	r2, #1
 8001d62:	4619      	mov	r1, r3
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f7fe fef8 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8001d6a:	8c3b      	ldrh	r3, [r7, #32]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	4619      	mov	r1, r3
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f7fe fef2 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001d76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d78:	2200      	movs	r2, #0
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f7fe feec 	bl	8000b5a <HAL_GPIO_WritePin>
					break;
 8001d82:	e0d6      	b.n	8001f32 <DISPLAY_LED_7_SEGMENT+0x406>
			case 6:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001d84:	897b      	ldrh	r3, [r7, #10]
 8001d86:	2200      	movs	r2, #0
 8001d88:	4619      	mov	r1, r3
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f7fe fee5 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, SET);
 8001d90:	893b      	ldrh	r3, [r7, #8]
 8001d92:	2201      	movs	r2, #1
 8001d94:	4619      	mov	r1, r3
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f7fe fedf 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	4619      	mov	r1, r3
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7fe fed9 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001da8:	8b3b      	ldrh	r3, [r7, #24]
 8001daa:	2200      	movs	r2, #0
 8001dac:	4619      	mov	r1, r3
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f7fe fed3 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, RESET);
 8001db4:	8bbb      	ldrh	r3, [r7, #28]
 8001db6:	2200      	movs	r2, #0
 8001db8:	4619      	mov	r1, r3
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f7fe fecd 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8001dc0:	8c3b      	ldrh	r3, [r7, #32]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f7fe fec7 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001dcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dce:	2200      	movs	r2, #0
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7fe fec1 	bl	8000b5a <HAL_GPIO_WritePin>
					break;
 8001dd8:	e0ab      	b.n	8001f32 <DISPLAY_LED_7_SEGMENT+0x406>
			case 7:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001dda:	897b      	ldrh	r3, [r7, #10]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	4619      	mov	r1, r3
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f7fe feba 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001de6:	893b      	ldrh	r3, [r7, #8]
 8001de8:	2200      	movs	r2, #0
 8001dea:	4619      	mov	r1, r3
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f7fe feb4 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	2200      	movs	r2, #0
 8001df6:	4619      	mov	r1, r3
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f7fe feae 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, SET);
 8001dfe:	8b3b      	ldrh	r3, [r7, #24]
 8001e00:	2201      	movs	r2, #1
 8001e02:	4619      	mov	r1, r3
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f7fe fea8 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001e0a:	8bbb      	ldrh	r3, [r7, #28]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	4619      	mov	r1, r3
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f7fe fea2 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 8001e16:	8c3b      	ldrh	r3, [r7, #32]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f7fe fe9c 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, SET);
 8001e22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e24:	2201      	movs	r2, #1
 8001e26:	4619      	mov	r1, r3
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f7fe fe96 	bl	8000b5a <HAL_GPIO_WritePin>
					break;
 8001e2e:	e080      	b.n	8001f32 <DISPLAY_LED_7_SEGMENT+0x406>
			case 8:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001e30:	897b      	ldrh	r3, [r7, #10]
 8001e32:	2200      	movs	r2, #0
 8001e34:	4619      	mov	r1, r3
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7fe fe8f 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001e3c:	893b      	ldrh	r3, [r7, #8]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	4619      	mov	r1, r3
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f7fe fe89 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001e48:	88fb      	ldrh	r3, [r7, #6]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f7fe fe83 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001e54:	8b3b      	ldrh	r3, [r7, #24]
 8001e56:	2200      	movs	r2, #0
 8001e58:	4619      	mov	r1, r3
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f7fe fe7d 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, RESET);
 8001e60:	8bbb      	ldrh	r3, [r7, #28]
 8001e62:	2200      	movs	r2, #0
 8001e64:	4619      	mov	r1, r3
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f7fe fe77 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8001e6c:	8c3b      	ldrh	r3, [r7, #32]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	4619      	mov	r1, r3
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f7fe fe71 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001e78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f7fe fe6b 	bl	8000b5a <HAL_GPIO_WritePin>
					break;
 8001e84:	e055      	b.n	8001f32 <DISPLAY_LED_7_SEGMENT+0x406>
			case 9:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001e86:	897b      	ldrh	r3, [r7, #10]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f7fe fe64 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001e92:	893b      	ldrh	r3, [r7, #8]
 8001e94:	2200      	movs	r2, #0
 8001e96:	4619      	mov	r1, r3
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f7fe fe5e 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f7fe fe58 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001eaa:	8b3b      	ldrh	r3, [r7, #24]
 8001eac:	2200      	movs	r2, #0
 8001eae:	4619      	mov	r1, r3
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f7fe fe52 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001eb6:	8bbb      	ldrh	r3, [r7, #28]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	4619      	mov	r1, r3
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f7fe fe4c 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8001ec2:	8c3b      	ldrh	r3, [r7, #32]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f7fe fe46 	bl	8000b5a <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001ece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f7fe fe40 	bl	8000b5a <HAL_GPIO_WritePin>
					break;
 8001eda:	e02a      	b.n	8001f32 <DISPLAY_LED_7_SEGMENT+0x406>
			default:
								HAL_GPIO_WritePin(GPIOx, LED_7_0, SET);
 8001edc:	897b      	ldrh	r3, [r7, #10]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f7fe fe39 	bl	8000b5a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_1, SET);
 8001ee8:	893b      	ldrh	r3, [r7, #8]
 8001eea:	2201      	movs	r2, #1
 8001eec:	4619      	mov	r1, r3
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f7fe fe33 	bl	8000b5a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_2, SET);
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	4619      	mov	r1, r3
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f7fe fe2d 	bl	8000b5a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_3, SET);
 8001f00:	8b3b      	ldrh	r3, [r7, #24]
 8001f02:	2201      	movs	r2, #1
 8001f04:	4619      	mov	r1, r3
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f7fe fe27 	bl	8000b5a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001f0c:	8bbb      	ldrh	r3, [r7, #28]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	4619      	mov	r1, r3
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f7fe fe21 	bl	8000b5a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 8001f18:	8c3b      	ldrh	r3, [r7, #32]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f7fe fe1b 	bl	8000b5a <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_6, SET);
 8001f24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f26:	2201      	movs	r2, #1
 8001f28:	4619      	mov	r1, r3
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f7fe fe15 	bl	8000b5a <HAL_GPIO_WritePin>
				break;
 8001f30:	bf00      	nop
			}

}
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop

08001f3c <traffic_double_display>:
uint8_t redred ;
int time_red_select ;
int time_green_select;
int time_yellow_select = 0;
void traffic_double_display(GPIO_TypeDef * GPIOx1, uint16_t LED_RED1, uint16_t LED_YELLOW1, uint16_t LED_GREEN1,
                            GPIO_TypeDef * GPIOx2, uint16_t LED_RED2, uint16_t LED_YELLOW2, uint16_t LED_GREEN2, int status) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af02      	add	r7, sp, #8
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	4608      	mov	r0, r1
 8001f46:	4611      	mov	r1, r2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	817b      	strh	r3, [r7, #10]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	813b      	strh	r3, [r7, #8]
 8001f52:	4613      	mov	r3, r2
 8001f54:	80fb      	strh	r3, [r7, #6]
 8001f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	2b0e      	cmp	r3, #14
 8001f5c:	f200 8121 	bhi.w	80021a2 <traffic_double_display+0x266>
 8001f60:	a201      	add	r2, pc, #4	; (adr r2, 8001f68 <traffic_double_display+0x2c>)
 8001f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f66:	bf00      	nop
 8001f68:	0800202d 	.word	0x0800202d
 8001f6c:	08001fa5 	.word	0x08001fa5
 8001f70:	08001fc7 	.word	0x08001fc7
 8001f74:	08001fe9 	.word	0x08001fe9
 8001f78:	0800200b 	.word	0x0800200b
 8001f7c:	08002077 	.word	0x08002077
 8001f80:	080021a3 	.word	0x080021a3
 8001f84:	08002099 	.word	0x08002099
 8001f88:	080020f3 	.word	0x080020f3
 8001f8c:	0800214b 	.word	0x0800214b
 8001f90:	080021a3 	.word	0x080021a3
 8001f94:	08001fa5 	.word	0x08001fa5
 8001f98:	08001fc7 	.word	0x08001fc7
 8001f9c:	08001fe9 	.word	0x08001fe9
 8001fa0:	0800200b 	.word	0x0800200b
    switch(status) {
        case GREEN_RED:
        case MAN_GREEN_RED:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, GREEN);
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	893a      	ldrh	r2, [r7, #8]
 8001fa8:	8979      	ldrh	r1, [r7, #10]
 8001faa:	2002      	movs	r0, #2
 8001fac:	9000      	str	r0, [sp, #0]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f928 	bl	8002204 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
 8001fb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fb6:	8c3a      	ldrh	r2, [r7, #32]
 8001fb8:	8bb9      	ldrh	r1, [r7, #28]
 8001fba:	2000      	movs	r0, #0
 8001fbc:	9000      	str	r0, [sp, #0]
 8001fbe:	69b8      	ldr	r0, [r7, #24]
 8001fc0:	f000 f920 	bl	8002204 <traffic_display>
            break;
 8001fc4:	e117      	b.n	80021f6 <traffic_double_display+0x2ba>
        case YELLOW_RED:
        case MAN_YELLOW_RED:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, YELLOW);
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	893a      	ldrh	r2, [r7, #8]
 8001fca:	8979      	ldrh	r1, [r7, #10]
 8001fcc:	2001      	movs	r0, #1
 8001fce:	9000      	str	r0, [sp, #0]
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f917 	bl	8002204 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
 8001fd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fd8:	8c3a      	ldrh	r2, [r7, #32]
 8001fda:	8bb9      	ldrh	r1, [r7, #28]
 8001fdc:	2000      	movs	r0, #0
 8001fde:	9000      	str	r0, [sp, #0]
 8001fe0:	69b8      	ldr	r0, [r7, #24]
 8001fe2:	f000 f90f 	bl	8002204 <traffic_display>
            break;
 8001fe6:	e106      	b.n	80021f6 <traffic_double_display+0x2ba>
        case RED_GREEN:
        case MAN_RED_GREEN:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	893a      	ldrh	r2, [r7, #8]
 8001fec:	8979      	ldrh	r1, [r7, #10]
 8001fee:	2000      	movs	r0, #0
 8001ff0:	9000      	str	r0, [sp, #0]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f906 	bl	8002204 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, GREEN);
 8001ff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ffa:	8c3a      	ldrh	r2, [r7, #32]
 8001ffc:	8bb9      	ldrh	r1, [r7, #28]
 8001ffe:	2002      	movs	r0, #2
 8002000:	9000      	str	r0, [sp, #0]
 8002002:	69b8      	ldr	r0, [r7, #24]
 8002004:	f000 f8fe 	bl	8002204 <traffic_display>
            break;
 8002008:	e0f5      	b.n	80021f6 <traffic_double_display+0x2ba>
        case RED_YELLOW:
        case MAN_RED_YELLOW:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	893a      	ldrh	r2, [r7, #8]
 800200e:	8979      	ldrh	r1, [r7, #10]
 8002010:	2000      	movs	r0, #0
 8002012:	9000      	str	r0, [sp, #0]
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 f8f5 	bl	8002204 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, YELLOW);
 800201a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800201c:	8c3a      	ldrh	r2, [r7, #32]
 800201e:	8bb9      	ldrh	r1, [r7, #28]
 8002020:	2001      	movs	r0, #1
 8002022:	9000      	str	r0, [sp, #0]
 8002024:	69b8      	ldr	r0, [r7, #24]
 8002026:	f000 f8ed 	bl	8002204 <traffic_display>
            break;
 800202a:	e0e4      	b.n	80021f6 <traffic_double_display+0x2ba>
        case INIT:
            HAL_GPIO_WritePin(GPIOx1, LED_RED1, RESET);
 800202c:	897b      	ldrh	r3, [r7, #10]
 800202e:	2200      	movs	r2, #0
 8002030:	4619      	mov	r1, r3
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f7fe fd91 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_YELLOW1, RESET);
 8002038:	893b      	ldrh	r3, [r7, #8]
 800203a:	2200      	movs	r2, #0
 800203c:	4619      	mov	r1, r3
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f7fe fd8b 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_GREEN1, RESET);
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	2200      	movs	r2, #0
 8002048:	4619      	mov	r1, r3
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f7fe fd85 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_RED2, RESET);
 8002050:	8bbb      	ldrh	r3, [r7, #28]
 8002052:	2200      	movs	r2, #0
 8002054:	4619      	mov	r1, r3
 8002056:	69b8      	ldr	r0, [r7, #24]
 8002058:	f7fe fd7f 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_YELLOW2, RESET);
 800205c:	8c3b      	ldrh	r3, [r7, #32]
 800205e:	2200      	movs	r2, #0
 8002060:	4619      	mov	r1, r3
 8002062:	69b8      	ldr	r0, [r7, #24]
 8002064:	f7fe fd79 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_GREEN2, RESET);
 8002068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800206a:	2200      	movs	r2, #0
 800206c:	4619      	mov	r1, r3
 800206e:	69b8      	ldr	r0, [r7, #24]
 8002070:	f7fe fd73 	bl	8000b5a <HAL_GPIO_WritePin>
            break;
 8002074:	e0bf      	b.n	80021f6 <traffic_double_display+0x2ba>
        case RED_RED1:
    //    case RED_RED2:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	893a      	ldrh	r2, [r7, #8]
 800207a:	8979      	ldrh	r1, [r7, #10]
 800207c:	2000      	movs	r0, #0
 800207e:	9000      	str	r0, [sp, #0]
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 f8bf 	bl	8002204 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
 8002086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002088:	8c3a      	ldrh	r2, [r7, #32]
 800208a:	8bb9      	ldrh	r1, [r7, #28]
 800208c:	2000      	movs	r0, #0
 800208e:	9000      	str	r0, [sp, #0]
 8002090:	69b8      	ldr	r0, [r7, #24]
 8002092:	f000 f8b7 	bl	8002204 <traffic_display>
            break;
 8002096:	e0ae      	b.n	80021f6 <traffic_double_display+0x2ba>
        case SET_TIME_RED:
            HAL_GPIO_WritePin(GPIOx1, LED_YELLOW1, SET);
 8002098:	893b      	ldrh	r3, [r7, #8]
 800209a:	2201      	movs	r2, #1
 800209c:	4619      	mov	r1, r3
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f7fe fd5b 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_GREEN1, SET);
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	2201      	movs	r2, #1
 80020a8:	4619      	mov	r1, r3
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f7fe fd55 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_YELLOW2, SET);
 80020b0:	8c3b      	ldrh	r3, [r7, #32]
 80020b2:	2201      	movs	r2, #1
 80020b4:	4619      	mov	r1, r3
 80020b6:	69b8      	ldr	r0, [r7, #24]
 80020b8:	f7fe fd4f 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_GREEN2, SET);
 80020bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020be:	2201      	movs	r2, #1
 80020c0:	4619      	mov	r1, r3
 80020c2:	69b8      	ldr	r0, [r7, #24]
 80020c4:	f7fe fd49 	bl	8000b5a <HAL_GPIO_WritePin>
        	if(timer1_flag[2] == 1){
 80020c8:	4b4d      	ldr	r3, [pc, #308]	; (8002200 <traffic_double_display+0x2c4>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	f040 808d 	bne.w	80021ec <traffic_double_display+0x2b0>
        		HAL_GPIO_TogglePin(GPIOx1, LED_RED1);
 80020d2:	897b      	ldrh	r3, [r7, #10]
 80020d4:	4619      	mov	r1, r3
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f7fe fd57 	bl	8000b8a <HAL_GPIO_TogglePin>
        		HAL_GPIO_TogglePin(GPIOx2, LED_RED2);
 80020dc:	8bbb      	ldrh	r3, [r7, #28]
 80020de:	4619      	mov	r1, r3
 80020e0:	69b8      	ldr	r0, [r7, #24]
 80020e2:	f7fe fd52 	bl	8000b8a <HAL_GPIO_TogglePin>
        		setTimer1(2, 500);
 80020e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80020ea:	2002      	movs	r0, #2
 80020ec:	f000 fd1e 	bl	8002b2c <setTimer1>
        	}
            break;
 80020f0:	e07c      	b.n	80021ec <traffic_double_display+0x2b0>

        case SET_TIME_YELLOW:
            HAL_GPIO_WritePin(GPIOx1, LED_RED1, SET);
 80020f2:	897b      	ldrh	r3, [r7, #10]
 80020f4:	2201      	movs	r2, #1
 80020f6:	4619      	mov	r1, r3
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f7fe fd2e 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_GREEN1, SET);
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	2201      	movs	r2, #1
 8002102:	4619      	mov	r1, r3
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f7fe fd28 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_RED2, SET);
 800210a:	8bbb      	ldrh	r3, [r7, #28]
 800210c:	2201      	movs	r2, #1
 800210e:	4619      	mov	r1, r3
 8002110:	69b8      	ldr	r0, [r7, #24]
 8002112:	f7fe fd22 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_GREEN2, SET);
 8002116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002118:	2201      	movs	r2, #1
 800211a:	4619      	mov	r1, r3
 800211c:	69b8      	ldr	r0, [r7, #24]
 800211e:	f7fe fd1c 	bl	8000b5a <HAL_GPIO_WritePin>
        	if(timer1_flag[2] == 1){
 8002122:	4b37      	ldr	r3, [pc, #220]	; (8002200 <traffic_double_display+0x2c4>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d162      	bne.n	80021f0 <traffic_double_display+0x2b4>
        		HAL_GPIO_TogglePin(GPIOx1, LED_YELLOW1);
 800212a:	893b      	ldrh	r3, [r7, #8]
 800212c:	4619      	mov	r1, r3
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f7fe fd2b 	bl	8000b8a <HAL_GPIO_TogglePin>
        		HAL_GPIO_TogglePin(GPIOx2, LED_YELLOW2);
 8002134:	8c3b      	ldrh	r3, [r7, #32]
 8002136:	4619      	mov	r1, r3
 8002138:	69b8      	ldr	r0, [r7, #24]
 800213a:	f7fe fd26 	bl	8000b8a <HAL_GPIO_TogglePin>
        		setTimer1(2, 500);
 800213e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002142:	2002      	movs	r0, #2
 8002144:	f000 fcf2 	bl	8002b2c <setTimer1>
        	}
            break;
 8002148:	e052      	b.n	80021f0 <traffic_double_display+0x2b4>

        case SET_TIME_GREEN:
            HAL_GPIO_WritePin(GPIOx1, LED_RED1, SET);
 800214a:	897b      	ldrh	r3, [r7, #10]
 800214c:	2201      	movs	r2, #1
 800214e:	4619      	mov	r1, r3
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f7fe fd02 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_YELLOW1, SET);
 8002156:	893b      	ldrh	r3, [r7, #8]
 8002158:	2201      	movs	r2, #1
 800215a:	4619      	mov	r1, r3
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f7fe fcfc 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_RED2, SET);
 8002162:	8bbb      	ldrh	r3, [r7, #28]
 8002164:	2201      	movs	r2, #1
 8002166:	4619      	mov	r1, r3
 8002168:	69b8      	ldr	r0, [r7, #24]
 800216a:	f7fe fcf6 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_YELLOW2, SET);
 800216e:	8c3b      	ldrh	r3, [r7, #32]
 8002170:	2201      	movs	r2, #1
 8002172:	4619      	mov	r1, r3
 8002174:	69b8      	ldr	r0, [r7, #24]
 8002176:	f7fe fcf0 	bl	8000b5a <HAL_GPIO_WritePin>
        	if(timer1_flag[2] == 1){
 800217a:	4b21      	ldr	r3, [pc, #132]	; (8002200 <traffic_double_display+0x2c4>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d138      	bne.n	80021f4 <traffic_double_display+0x2b8>
        		HAL_GPIO_TogglePin(GPIOx1, LED_GREEN1);
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	4619      	mov	r1, r3
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f7fe fcff 	bl	8000b8a <HAL_GPIO_TogglePin>
        		HAL_GPIO_TogglePin(GPIOx2, LED_GREEN2);
 800218c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800218e:	4619      	mov	r1, r3
 8002190:	69b8      	ldr	r0, [r7, #24]
 8002192:	f7fe fcfa 	bl	8000b8a <HAL_GPIO_TogglePin>
        		setTimer1(2, 500);
 8002196:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800219a:	2002      	movs	r0, #2
 800219c:	f000 fcc6 	bl	8002b2c <setTimer1>
        	}
            break;
 80021a0:	e028      	b.n	80021f4 <traffic_double_display+0x2b8>
        default:
            HAL_GPIO_WritePin(GPIOx1, LED_RED1, GPIO_PIN_SET);
 80021a2:	897b      	ldrh	r3, [r7, #10]
 80021a4:	2201      	movs	r2, #1
 80021a6:	4619      	mov	r1, r3
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f7fe fcd6 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_YELLOW1, GPIO_PIN_SET);
 80021ae:	893b      	ldrh	r3, [r7, #8]
 80021b0:	2201      	movs	r2, #1
 80021b2:	4619      	mov	r1, r3
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f7fe fcd0 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_GREEN1, GPIO_PIN_SET);
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	2201      	movs	r2, #1
 80021be:	4619      	mov	r1, r3
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7fe fcca 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_RED2, GPIO_PIN_SET);
 80021c6:	8bbb      	ldrh	r3, [r7, #28]
 80021c8:	2201      	movs	r2, #1
 80021ca:	4619      	mov	r1, r3
 80021cc:	69b8      	ldr	r0, [r7, #24]
 80021ce:	f7fe fcc4 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_YELLOW2, GPIO_PIN_SET);
 80021d2:	8c3b      	ldrh	r3, [r7, #32]
 80021d4:	2201      	movs	r2, #1
 80021d6:	4619      	mov	r1, r3
 80021d8:	69b8      	ldr	r0, [r7, #24]
 80021da:	f7fe fcbe 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_GREEN2, GPIO_PIN_SET);
 80021de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021e0:	2201      	movs	r2, #1
 80021e2:	4619      	mov	r1, r3
 80021e4:	69b8      	ldr	r0, [r7, #24]
 80021e6:	f7fe fcb8 	bl	8000b5a <HAL_GPIO_WritePin>
        	break;
 80021ea:	e004      	b.n	80021f6 <traffic_double_display+0x2ba>
            break;
 80021ec:	bf00      	nop
 80021ee:	e002      	b.n	80021f6 <traffic_double_display+0x2ba>
            break;
 80021f0:	bf00      	nop
 80021f2:	e000      	b.n	80021f6 <traffic_double_display+0x2ba>
            break;
 80021f4:	bf00      	nop
    }
}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200000d4 	.word	0x200000d4

08002204 <traffic_display>:
void traffic_display(GPIO_TypeDef * GPIOx, uint16_t LED_RED, uint16_t LED_YELLOW, uint16_t LED_GREEN, State type) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	4608      	mov	r0, r1
 800220e:	4611      	mov	r1, r2
 8002210:	461a      	mov	r2, r3
 8002212:	4603      	mov	r3, r0
 8002214:	817b      	strh	r3, [r7, #10]
 8002216:	460b      	mov	r3, r1
 8002218:	813b      	strh	r3, [r7, #8]
 800221a:	4613      	mov	r3, r2
 800221c:	80fb      	strh	r3, [r7, #6]
    switch(type) {
 800221e:	7e3b      	ldrb	r3, [r7, #24]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d02c      	beq.n	800227e <traffic_display+0x7a>
 8002224:	2b02      	cmp	r3, #2
 8002226:	dc3d      	bgt.n	80022a4 <traffic_display+0xa0>
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <traffic_display+0x2e>
 800222c:	2b01      	cmp	r3, #1
 800222e:	d013      	beq.n	8002258 <traffic_display+0x54>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_RESET);
            break;
        default:
            break;
 8002230:	e038      	b.n	80022a4 <traffic_display+0xa0>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_RESET);
 8002232:	897b      	ldrh	r3, [r7, #10]
 8002234:	2200      	movs	r2, #0
 8002236:	4619      	mov	r1, r3
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f7fe fc8e 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_SET);
 800223e:	893b      	ldrh	r3, [r7, #8]
 8002240:	2201      	movs	r2, #1
 8002242:	4619      	mov	r1, r3
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f7fe fc88 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_SET);
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	2201      	movs	r2, #1
 800224e:	4619      	mov	r1, r3
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f7fe fc82 	bl	8000b5a <HAL_GPIO_WritePin>
            break;
 8002256:	e026      	b.n	80022a6 <traffic_display+0xa2>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_SET);
 8002258:	897b      	ldrh	r3, [r7, #10]
 800225a:	2201      	movs	r2, #1
 800225c:	4619      	mov	r1, r3
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f7fe fc7b 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_RESET);
 8002264:	893b      	ldrh	r3, [r7, #8]
 8002266:	2200      	movs	r2, #0
 8002268:	4619      	mov	r1, r3
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f7fe fc75 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_SET);
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	2201      	movs	r2, #1
 8002274:	4619      	mov	r1, r3
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f7fe fc6f 	bl	8000b5a <HAL_GPIO_WritePin>
            break;
 800227c:	e013      	b.n	80022a6 <traffic_display+0xa2>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_SET);
 800227e:	897b      	ldrh	r3, [r7, #10]
 8002280:	2201      	movs	r2, #1
 8002282:	4619      	mov	r1, r3
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f7fe fc68 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_SET);
 800228a:	893b      	ldrh	r3, [r7, #8]
 800228c:	2201      	movs	r2, #1
 800228e:	4619      	mov	r1, r3
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f7fe fc62 	bl	8000b5a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_RESET);
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	2200      	movs	r2, #0
 800229a:	4619      	mov	r1, r3
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f7fe fc5c 	bl	8000b5a <HAL_GPIO_WritePin>
            break;
 80022a2:	e000      	b.n	80022a6 <traffic_display+0xa2>
            break;
 80022a4:	bf00      	nop
    }
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <traffic_init>:
void traffic_init() {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	 redred = (time_yellow_set + time_green_set) == time_red_set ? 0 : 1;
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <traffic_init+0x68>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b18      	ldr	r3, [pc, #96]	; (800231c <traffic_init+0x6c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	441a      	add	r2, r3
 80022be:	4b18      	ldr	r3, [pc, #96]	; (8002320 <traffic_init+0x70>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	bf14      	ite	ne
 80022c6:	2301      	movne	r3, #1
 80022c8:	2300      	moveq	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <traffic_init+0x74>)
 80022d0:	701a      	strb	r2, [r3, #0]
	if (time_1 <= 0 || time_2<=0) {
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <traffic_init+0x78>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	dd03      	ble.n	80022e2 <traffic_init+0x32>
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <traffic_init+0x7c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	dc0a      	bgt.n	80022f8 <traffic_init+0x48>
		time_1 = time_green_set;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <traffic_init+0x6c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a10      	ldr	r2, [pc, #64]	; (8002328 <traffic_init+0x78>)
 80022e8:	6013      	str	r3, [r2, #0]
		time_2 = time_red_set;
 80022ea:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <traffic_init+0x70>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a0f      	ldr	r2, [pc, #60]	; (800232c <traffic_init+0x7c>)
 80022f0:	6013      	str	r3, [r2, #0]
		status = GREEN_RED;
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <traffic_init+0x80>)
 80022f4:	2202      	movs	r2, #2
 80022f6:	601a      	str	r2, [r3, #0]
	}
	if (is_button_pressed(0)) {
 80022f8:	2000      	movs	r0, #0
 80022fa:	f000 fbc9 	bl	8002a90 <is_button_pressed>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <traffic_init+0x5a>
		status = SET_TIME_RED;
 8002304:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <traffic_init+0x80>)
 8002306:	2208      	movs	r2, #8
 8002308:	601a      	str	r2, [r3, #0]
	}
	 display_times();
 800230a:	f000 f8fd 	bl	8002508 <display_times>
	 update_timers();
 800230e:	f000 f8dd 	bl	80024cc <update_timers>

}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000024 	.word	0x20000024
 800231c:	20000020 	.word	0x20000020
 8002320:	20000028 	.word	0x20000028
 8002324:	200000d0 	.word	0x200000d0
 8002328:	20000030 	.word	0x20000030
 800232c:	20000034 	.word	0x20000034
 8002330:	20000038 	.word	0x20000038

08002334 <traffic_green_red>:

void traffic_green_red() {
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
    update_timers();
 8002338:	f000 f8c8 	bl	80024cc <update_timers>
    if (time_1 <= 0) {
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <traffic_green_red+0x38>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	dc06      	bgt.n	8002352 <traffic_green_red+0x1e>
        time_1 = time_yellow_set;
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <traffic_green_red+0x3c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a08      	ldr	r2, [pc, #32]	; (800236c <traffic_green_red+0x38>)
 800234a:	6013      	str	r3, [r2, #0]
        status = YELLOW_RED;
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <traffic_green_red+0x40>)
 800234e:	2203      	movs	r2, #3
 8002350:	601a      	str	r2, [r3, #0]
    }
    if (is_button_pressed(0)) {
 8002352:	2000      	movs	r0, #0
 8002354:	f000 fb9c 	bl	8002a90 <is_button_pressed>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <traffic_green_red+0x30>
        status = SET_TIME_RED;
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <traffic_green_red+0x40>)
 8002360:	2208      	movs	r2, #8
 8002362:	601a      	str	r2, [r3, #0]
    }
    display_times();
 8002364:	f000 f8d0 	bl	8002508 <display_times>
}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000030 	.word	0x20000030
 8002370:	20000024 	.word	0x20000024
 8002374:	20000038 	.word	0x20000038

08002378 <traffic_yellow_red>:

void traffic_yellow_red() {
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
    update_timers();
 800237c:	f000 f8a6 	bl	80024cc <update_timers>
    if (redred == 1) {
 8002380:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <traffic_yellow_red+0x60>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d10b      	bne.n	80023a0 <traffic_yellow_red+0x28>
        if (time_1 <= 0) {
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <traffic_yellow_red+0x64>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	dc16      	bgt.n	80023be <traffic_yellow_red+0x46>
            time_1 = time_red_set;
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <traffic_yellow_red+0x68>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a11      	ldr	r2, [pc, #68]	; (80023dc <traffic_yellow_red+0x64>)
 8002396:	6013      	str	r3, [r2, #0]
            status = RED_RED1;
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <traffic_yellow_red+0x6c>)
 800239a:	2206      	movs	r2, #6
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	e00e      	b.n	80023be <traffic_yellow_red+0x46>
        }
    } else {
        if (time_2 <= 0) {
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <traffic_yellow_red+0x70>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	dc0a      	bgt.n	80023be <traffic_yellow_red+0x46>
            time_1 = time_red_set;
 80023a8:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <traffic_yellow_red+0x68>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0b      	ldr	r2, [pc, #44]	; (80023dc <traffic_yellow_red+0x64>)
 80023ae:	6013      	str	r3, [r2, #0]
            time_2 = time_green_set;
 80023b0:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <traffic_yellow_red+0x74>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <traffic_yellow_red+0x70>)
 80023b6:	6013      	str	r3, [r2, #0]
            status = RED_GREEN;
 80023b8:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <traffic_yellow_red+0x6c>)
 80023ba:	2204      	movs	r2, #4
 80023bc:	601a      	str	r2, [r3, #0]
        }
    }
    if (is_button_pressed(0)) {
 80023be:	2000      	movs	r0, #0
 80023c0:	f000 fb66 	bl	8002a90 <is_button_pressed>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <traffic_yellow_red+0x58>
        status = SET_TIME_RED;
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <traffic_yellow_red+0x6c>)
 80023cc:	2208      	movs	r2, #8
 80023ce:	601a      	str	r2, [r3, #0]
    }
    display_times();
 80023d0:	f000 f89a 	bl	8002508 <display_times>
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	200000d0 	.word	0x200000d0
 80023dc:	20000030 	.word	0x20000030
 80023e0:	20000028 	.word	0x20000028
 80023e4:	20000038 	.word	0x20000038
 80023e8:	20000034 	.word	0x20000034
 80023ec:	20000020 	.word	0x20000020

080023f0 <traffic_red_red1>:

void traffic_red_red1() {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
    update_timers();
 80023f4:	f000 f86a 	bl	80024cc <update_timers>
    if (time_2 <= 0) {
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <traffic_red_red1+0x38>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	dc06      	bgt.n	800240e <traffic_red_red1+0x1e>
    	// time_1 = time_red_set;
        time_2 = time_green_set;
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <traffic_red_red1+0x3c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a08      	ldr	r2, [pc, #32]	; (8002428 <traffic_red_red1+0x38>)
 8002406:	6013      	str	r3, [r2, #0]
        status = RED_GREEN;
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <traffic_red_red1+0x40>)
 800240a:	2204      	movs	r2, #4
 800240c:	601a      	str	r2, [r3, #0]
    }
    if (is_button_pressed(0)) {
 800240e:	2000      	movs	r0, #0
 8002410:	f000 fb3e 	bl	8002a90 <is_button_pressed>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <traffic_red_red1+0x30>
        status = SET_TIME_RED;
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <traffic_red_red1+0x40>)
 800241c:	2208      	movs	r2, #8
 800241e:	601a      	str	r2, [r3, #0]
    }
    display_times();
 8002420:	f000 f872 	bl	8002508 <display_times>
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000034 	.word	0x20000034
 800242c:	20000020 	.word	0x20000020
 8002430:	20000038 	.word	0x20000038

08002434 <traffic_red_green>:

void traffic_red_green() {
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
    update_timers();
 8002438:	f000 f848 	bl	80024cc <update_timers>
    if (time_2 <= 0) {
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <traffic_red_green+0x38>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	dc06      	bgt.n	8002452 <traffic_red_green+0x1e>
        time_2 = time_yellow_set;
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <traffic_red_green+0x3c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a08      	ldr	r2, [pc, #32]	; (800246c <traffic_red_green+0x38>)
 800244a:	6013      	str	r3, [r2, #0]
        status = RED_YELLOW;
 800244c:	4b09      	ldr	r3, [pc, #36]	; (8002474 <traffic_red_green+0x40>)
 800244e:	2205      	movs	r2, #5
 8002450:	601a      	str	r2, [r3, #0]
    }
    if (is_button_pressed(0)) {
 8002452:	2000      	movs	r0, #0
 8002454:	f000 fb1c 	bl	8002a90 <is_button_pressed>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <traffic_red_green+0x30>
        status = SET_TIME_RED;
 800245e:	4b05      	ldr	r3, [pc, #20]	; (8002474 <traffic_red_green+0x40>)
 8002460:	2208      	movs	r2, #8
 8002462:	601a      	str	r2, [r3, #0]
    }
    display_times();
 8002464:	f000 f850 	bl	8002508 <display_times>
}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000034 	.word	0x20000034
 8002470:	20000024 	.word	0x20000024
 8002474:	20000038 	.word	0x20000038

08002478 <traffic_red_yellow>:

void traffic_red_yellow() {
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
    update_timers();
 800247c:	f000 f826 	bl	80024cc <update_timers>
	if (time_1 <= 0) {
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <traffic_red_yellow+0x40>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	dc0a      	bgt.n	800249e <traffic_red_yellow+0x26>
		time_1 = time_green_set;
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <traffic_red_yellow+0x44>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <traffic_red_yellow+0x40>)
 800248e:	6013      	str	r3, [r2, #0]
		time_2 = time_red_set;
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <traffic_red_yellow+0x48>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <traffic_red_yellow+0x4c>)
 8002496:	6013      	str	r3, [r2, #0]
		status = GREEN_RED;
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <traffic_red_yellow+0x50>)
 800249a:	2202      	movs	r2, #2
 800249c:	601a      	str	r2, [r3, #0]
	}
    if (is_button_pressed(0)) {
 800249e:	2000      	movs	r0, #0
 80024a0:	f000 faf6 	bl	8002a90 <is_button_pressed>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <traffic_red_yellow+0x38>
        status = SET_TIME_RED;
 80024aa:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <traffic_red_yellow+0x50>)
 80024ac:	2208      	movs	r2, #8
 80024ae:	601a      	str	r2, [r3, #0]
    }
    display_times();
 80024b0:	f000 f82a 	bl	8002508 <display_times>
}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000030 	.word	0x20000030
 80024bc:	20000020 	.word	0x20000020
 80024c0:	20000028 	.word	0x20000028
 80024c4:	20000034 	.word	0x20000034
 80024c8:	20000038 	.word	0x20000038

080024cc <update_timers>:
        status = SET_TIME_RED;
    }
    display_times();
}
*/
void update_timers() {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
    if (timer1_flag[1] == 1) {
 80024d0:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <update_timers+0x30>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d10e      	bne.n	80024f6 <update_timers+0x2a>
        time_1--;
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <update_timers+0x34>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	3b01      	subs	r3, #1
 80024de:	4a08      	ldr	r2, [pc, #32]	; (8002500 <update_timers+0x34>)
 80024e0:	6013      	str	r3, [r2, #0]
        time_2--;
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <update_timers+0x38>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	4a06      	ldr	r2, [pc, #24]	; (8002504 <update_timers+0x38>)
 80024ea:	6013      	str	r3, [r2, #0]
        setTimer1(1, 1000);
 80024ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024f0:	2001      	movs	r0, #1
 80024f2:	f000 fb1b 	bl	8002b2c <setTimer1>
    }
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200000d4 	.word	0x200000d4
 8002500:	20000030 	.word	0x20000030
 8002504:	20000034 	.word	0x20000034

08002508 <display_times>:

void display_times() {
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af06      	add	r7, sp, #24
	DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED1_0_Pin, SEGLED1_1_Pin, SEGLED1_2_Pin, SEGLED1_3_Pin, SEGLED1_4_Pin, SEGLED1_5_Pin, SEGLED1_6_Pin, time_1-1);
 800250e:	4b18      	ldr	r3, [pc, #96]	; (8002570 <display_times+0x68>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b2db      	uxtb	r3, r3
 8002518:	9304      	str	r3, [sp, #16]
 800251a:	2340      	movs	r3, #64	; 0x40
 800251c:	9303      	str	r3, [sp, #12]
 800251e:	2320      	movs	r3, #32
 8002520:	9302      	str	r3, [sp, #8]
 8002522:	2310      	movs	r3, #16
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	2308      	movs	r3, #8
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	2304      	movs	r3, #4
 800252c:	2202      	movs	r2, #2
 800252e:	2101      	movs	r1, #1
 8002530:	4810      	ldr	r0, [pc, #64]	; (8002574 <display_times+0x6c>)
 8002532:	f7ff fafb 	bl	8001b2c <DISPLAY_LED_7_SEGMENT>
    DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED2_0_Pin, SEGLED2_1_Pin, SEGLED2_2_Pin, SEGLED2_3_Pin, SEGLED2_4_Pin, SEGLED2_5_Pin, SEGLED2_6_Pin, time_2-1);
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <display_times+0x70>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	9304      	str	r3, [sp, #16]
 8002542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002546:	9303      	str	r3, [sp, #12]
 8002548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800254c:	9302      	str	r3, [sp, #8]
 800254e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800255e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002562:	2180      	movs	r1, #128	; 0x80
 8002564:	4803      	ldr	r0, [pc, #12]	; (8002574 <display_times+0x6c>)
 8002566:	f7ff fae1 	bl	8001b2c <DISPLAY_LED_7_SEGMENT>
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000030 	.word	0x20000030
 8002574:	40010c00 	.word	0x40010c00
 8002578:	20000034 	.word	0x20000034

0800257c <traffic_mannual_green_red>:


void traffic_mannual_green_red(){
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
	if(timer1_flag[1]  == 1){
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <traffic_mannual_green_red+0x28>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d102      	bne.n	800258e <traffic_mannual_green_red+0x12>
		status = GREEN_RED;
 8002588:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <traffic_mannual_green_red+0x2c>)
 800258a:	2202      	movs	r2, #2
 800258c:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(0)){
 800258e:	2000      	movs	r0, #0
 8002590:	f000 fa7e 	bl	8002a90 <is_button_pressed>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <traffic_mannual_green_red+0x24>
		status = SET_TIME_RED;
 800259a:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <traffic_mannual_green_red+0x2c>)
 800259c:	2208      	movs	r2, #8
 800259e:	601a      	str	r2, [r3, #0]
	}
}
 80025a0:	bf00      	nop
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	200000d4 	.word	0x200000d4
 80025a8:	20000038 	.word	0x20000038

080025ac <traffic_mannual_yellow_red>:
void traffic_mannual_yellow_red(){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
	if(timer1_flag[1]  == 1){
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <traffic_mannual_yellow_red+0x28>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d102      	bne.n	80025be <traffic_mannual_yellow_red+0x12>
		status = YELLOW_RED;
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <traffic_mannual_yellow_red+0x2c>)
 80025ba:	2203      	movs	r2, #3
 80025bc:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(0)){
 80025be:	2000      	movs	r0, #0
 80025c0:	f000 fa66 	bl	8002a90 <is_button_pressed>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <traffic_mannual_yellow_red+0x24>
		status = SET_TIME_RED;
 80025ca:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <traffic_mannual_yellow_red+0x2c>)
 80025cc:	2208      	movs	r2, #8
 80025ce:	601a      	str	r2, [r3, #0]
	}
}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	200000d4 	.word	0x200000d4
 80025d8:	20000038 	.word	0x20000038

080025dc <traffic_mannual_red_green>:
void traffic_mannual_red_green(){
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
	if(timer1_flag[1]  == 1){
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <traffic_mannual_red_green+0x28>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d102      	bne.n	80025ee <traffic_mannual_red_green+0x12>
		status = RED_GREEN;
 80025e8:	4b07      	ldr	r3, [pc, #28]	; (8002608 <traffic_mannual_red_green+0x2c>)
 80025ea:	2204      	movs	r2, #4
 80025ec:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(0)){
 80025ee:	2000      	movs	r0, #0
 80025f0:	f000 fa4e 	bl	8002a90 <is_button_pressed>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <traffic_mannual_red_green+0x24>
		status = SET_TIME_RED;
 80025fa:	4b03      	ldr	r3, [pc, #12]	; (8002608 <traffic_mannual_red_green+0x2c>)
 80025fc:	2208      	movs	r2, #8
 80025fe:	601a      	str	r2, [r3, #0]
	}
}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}
 8002604:	200000d4 	.word	0x200000d4
 8002608:	20000038 	.word	0x20000038

0800260c <traffic_mannual_red_yellow>:
void traffic_mannual_red_yellow(){
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
	if(timer1_flag[1]  == 1){
 8002610:	4b08      	ldr	r3, [pc, #32]	; (8002634 <traffic_mannual_red_yellow+0x28>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d102      	bne.n	800261e <traffic_mannual_red_yellow+0x12>
		status = RED_YELLOW;
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <traffic_mannual_red_yellow+0x2c>)
 800261a:	2205      	movs	r2, #5
 800261c:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(0)){
 800261e:	2000      	movs	r0, #0
 8002620:	f000 fa36 	bl	8002a90 <is_button_pressed>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <traffic_mannual_red_yellow+0x24>
		status = SET_TIME_RED;
 800262a:	4b03      	ldr	r3, [pc, #12]	; (8002638 <traffic_mannual_red_yellow+0x2c>)
 800262c:	2208      	movs	r2, #8
 800262e:	601a      	str	r2, [r3, #0]
	}
}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}
 8002634:	200000d4 	.word	0x200000d4
 8002638:	20000038 	.word	0x20000038

0800263c <traffic_set_time_red>:
void traffic_set_time_red(){
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af06      	add	r7, sp, #24
	DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED1_0_Pin, SEGLED1_1_Pin, SEGLED1_2_Pin, SEGLED1_3_Pin, SEGLED1_4_Pin, SEGLED1_5_Pin, SEGLED1_6_Pin, time_red_select-1);
 8002642:	4b32      	ldr	r3, [pc, #200]	; (800270c <traffic_set_time_red+0xd0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	3b01      	subs	r3, #1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	9304      	str	r3, [sp, #16]
 800264e:	2340      	movs	r3, #64	; 0x40
 8002650:	9303      	str	r3, [sp, #12]
 8002652:	2320      	movs	r3, #32
 8002654:	9302      	str	r3, [sp, #8]
 8002656:	2310      	movs	r3, #16
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	2308      	movs	r3, #8
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2304      	movs	r3, #4
 8002660:	2202      	movs	r2, #2
 8002662:	2101      	movs	r1, #1
 8002664:	482a      	ldr	r0, [pc, #168]	; (8002710 <traffic_set_time_red+0xd4>)
 8002666:	f7ff fa61 	bl	8001b2c <DISPLAY_LED_7_SEGMENT>
    DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED2_0_Pin, SEGLED2_1_Pin, SEGLED2_2_Pin, SEGLED2_3_Pin, SEGLED2_4_Pin, SEGLED2_5_Pin, SEGLED2_6_Pin, 2);
 800266a:	2302      	movs	r3, #2
 800266c:	9304      	str	r3, [sp, #16]
 800266e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002672:	9303      	str	r3, [sp, #12]
 8002674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002678:	9302      	str	r3, [sp, #8]
 800267a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800268a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800268e:	2180      	movs	r1, #128	; 0x80
 8002690:	481f      	ldr	r0, [pc, #124]	; (8002710 <traffic_set_time_red+0xd4>)
 8002692:	f7ff fa4b 	bl	8001b2c <DISPLAY_LED_7_SEGMENT>
	if(time_red_select< time_red_set){
 8002696:	4b1d      	ldr	r3, [pc, #116]	; (800270c <traffic_set_time_red+0xd0>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <traffic_set_time_red+0xd8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	da03      	bge.n	80026aa <traffic_set_time_red+0x6e>
		time_red_select = time_red_set;
 80026a2:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <traffic_set_time_red+0xd8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a19      	ldr	r2, [pc, #100]	; (800270c <traffic_set_time_red+0xd0>)
 80026a8:	6013      	str	r3, [r2, #0]
	}
	if(is_button_pressed(1)){
 80026aa:	2001      	movs	r0, #1
 80026ac:	f000 f9f0 	bl	8002a90 <is_button_pressed>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d010      	beq.n	80026d8 <traffic_set_time_red+0x9c>
		// Tang gia tri
		if(time_red_select<100)
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <traffic_set_time_red+0xd0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b63      	cmp	r3, #99	; 0x63
 80026bc:	dc05      	bgt.n	80026ca <traffic_set_time_red+0x8e>
		{
			time_red_select ++;
 80026be:	4b13      	ldr	r3, [pc, #76]	; (800270c <traffic_set_time_red+0xd0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	3301      	adds	r3, #1
 80026c4:	4a11      	ldr	r2, [pc, #68]	; (800270c <traffic_set_time_red+0xd0>)
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	e006      	b.n	80026d8 <traffic_set_time_red+0x9c>
		}
		else {
			time_red_select = time_green_set + time_yellow_set;
 80026ca:	4b13      	ldr	r3, [pc, #76]	; (8002718 <traffic_set_time_red+0xdc>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	4b13      	ldr	r3, [pc, #76]	; (800271c <traffic_set_time_red+0xe0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4413      	add	r3, r2
 80026d4:	4a0d      	ldr	r2, [pc, #52]	; (800270c <traffic_set_time_red+0xd0>)
 80026d6:	6013      	str	r3, [r2, #0]
		}
	}
	if(is_button_pressed(2)){
 80026d8:	2002      	movs	r0, #2
 80026da:	f000 f9d9 	bl	8002a90 <is_button_pressed>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <traffic_set_time_red+0xb0>
		// Chon gia tri
		time_red_set = time_red_select;
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <traffic_set_time_red+0xd0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <traffic_set_time_red+0xd8>)
 80026ea:	6013      	str	r3, [r2, #0]
	}
	if(is_button_pressed(0)){
 80026ec:	2000      	movs	r0, #0
 80026ee:	f000 f9cf 	bl	8002a90 <is_button_pressed>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <traffic_set_time_red+0xca>
		time_yellow_select = time_yellow_set;
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <traffic_set_time_red+0xe0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a08      	ldr	r2, [pc, #32]	; (8002720 <traffic_set_time_red+0xe4>)
 80026fe:	6013      	str	r3, [r2, #0]
		status = SET_TIME_YELLOW;
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <traffic_set_time_red+0xe8>)
 8002702:	2209      	movs	r2, #9
 8002704:	601a      	str	r2, [r3, #0]
	}
}
 8002706:	bf00      	nop
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	200000cc 	.word	0x200000cc
 8002710:	40010c00 	.word	0x40010c00
 8002714:	20000028 	.word	0x20000028
 8002718:	20000020 	.word	0x20000020
 800271c:	20000024 	.word	0x20000024
 8002720:	20000060 	.word	0x20000060
 8002724:	20000038 	.word	0x20000038

08002728 <traffic_set_time_yellow>:

void traffic_set_time_yellow() {
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af06      	add	r7, sp, #24
    DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED1_0_Pin, SEGLED1_1_Pin, SEGLED1_2_Pin, SEGLED1_3_Pin, SEGLED1_4_Pin, SEGLED1_5_Pin, SEGLED1_6_Pin, time_yellow_select - 1);
 800272e:	4b30      	ldr	r3, [pc, #192]	; (80027f0 <traffic_set_time_yellow+0xc8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	3b01      	subs	r3, #1
 8002736:	b2db      	uxtb	r3, r3
 8002738:	9304      	str	r3, [sp, #16]
 800273a:	2340      	movs	r3, #64	; 0x40
 800273c:	9303      	str	r3, [sp, #12]
 800273e:	2320      	movs	r3, #32
 8002740:	9302      	str	r3, [sp, #8]
 8002742:	2310      	movs	r3, #16
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	2308      	movs	r3, #8
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2304      	movs	r3, #4
 800274c:	2202      	movs	r2, #2
 800274e:	2101      	movs	r1, #1
 8002750:	4828      	ldr	r0, [pc, #160]	; (80027f4 <traffic_set_time_yellow+0xcc>)
 8002752:	f7ff f9eb 	bl	8001b2c <DISPLAY_LED_7_SEGMENT>
    DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED2_0_Pin, SEGLED2_1_Pin, SEGLED2_2_Pin, SEGLED2_3_Pin, SEGLED2_4_Pin, SEGLED2_5_Pin, SEGLED2_6_Pin, 3);
 8002756:	2303      	movs	r3, #3
 8002758:	9304      	str	r3, [sp, #16]
 800275a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800275e:	9303      	str	r3, [sp, #12]
 8002760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002764:	9302      	str	r3, [sp, #8]
 8002766:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800277a:	2180      	movs	r1, #128	; 0x80
 800277c:	481d      	ldr	r0, [pc, #116]	; (80027f4 <traffic_set_time_yellow+0xcc>)
 800277e:	f7ff f9d5 	bl	8001b2c <DISPLAY_LED_7_SEGMENT>

    if (time_yellow_select < 1) {
 8002782:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <traffic_set_time_yellow+0xc8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	dc02      	bgt.n	8002790 <traffic_set_time_yellow+0x68>
        time_yellow_select = 1;
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <traffic_set_time_yellow+0xc8>)
 800278c:	2201      	movs	r2, #1
 800278e:	601a      	str	r2, [r3, #0]
    }

    if (is_button_pressed(1)) {
 8002790:	2001      	movs	r0, #1
 8002792:	f000 f97d 	bl	8002a90 <is_button_pressed>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00e      	beq.n	80027ba <traffic_set_time_yellow+0x92>
        // Tăng giá trị
        if (time_yellow_select < time_green_set) {
 800279c:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <traffic_set_time_yellow+0xc8>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <traffic_set_time_yellow+0xd0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	da05      	bge.n	80027b4 <traffic_set_time_yellow+0x8c>
            time_yellow_select++;
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <traffic_set_time_yellow+0xc8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	3301      	adds	r3, #1
 80027ae:	4a10      	ldr	r2, [pc, #64]	; (80027f0 <traffic_set_time_yellow+0xc8>)
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e002      	b.n	80027ba <traffic_set_time_yellow+0x92>
        } else {
            time_yellow_select = 0;
 80027b4:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <traffic_set_time_yellow+0xc8>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
        }
    }

    if (is_button_pressed(2)) {
 80027ba:	2002      	movs	r0, #2
 80027bc:	f000 f968 	bl	8002a90 <is_button_pressed>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <traffic_set_time_yellow+0xa6>
        // Chọn giá trị
        time_yellow_set = time_yellow_select;
 80027c6:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <traffic_set_time_yellow+0xc8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <traffic_set_time_yellow+0xd4>)
 80027cc:	6013      	str	r3, [r2, #0]
    }
    if (is_button_pressed(0)) {
 80027ce:	2000      	movs	r0, #0
 80027d0:	f000 f95e 	bl	8002a90 <is_button_pressed>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d006      	beq.n	80027e8 <traffic_set_time_yellow+0xc0>
    	time_green_select = time_green_set;
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <traffic_set_time_yellow+0xd0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a08      	ldr	r2, [pc, #32]	; (8002800 <traffic_set_time_yellow+0xd8>)
 80027e0:	6013      	str	r3, [r2, #0]
        status = SET_TIME_GREEN;
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <traffic_set_time_yellow+0xdc>)
 80027e4:	220a      	movs	r2, #10
 80027e6:	601a      	str	r2, [r3, #0]
    }

}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000060 	.word	0x20000060
 80027f4:	40010c00 	.word	0x40010c00
 80027f8:	20000020 	.word	0x20000020
 80027fc:	20000024 	.word	0x20000024
 8002800:	200000c8 	.word	0x200000c8
 8002804:	20000038 	.word	0x20000038

08002808 <traffic_set_time_green>:

void traffic_set_time_green() {
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af06      	add	r7, sp, #24
    DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED1_0_Pin, SEGLED1_1_Pin, SEGLED1_2_Pin, SEGLED1_3_Pin, SEGLED1_4_Pin, SEGLED1_5_Pin, SEGLED1_6_Pin, time_green_select - 1);
 800280e:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <traffic_set_time_green+0xdc>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	b2db      	uxtb	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	9304      	str	r3, [sp, #16]
 800281a:	2340      	movs	r3, #64	; 0x40
 800281c:	9303      	str	r3, [sp, #12]
 800281e:	2320      	movs	r3, #32
 8002820:	9302      	str	r3, [sp, #8]
 8002822:	2310      	movs	r3, #16
 8002824:	9301      	str	r3, [sp, #4]
 8002826:	2308      	movs	r3, #8
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	2304      	movs	r3, #4
 800282c:	2202      	movs	r2, #2
 800282e:	2101      	movs	r1, #1
 8002830:	482d      	ldr	r0, [pc, #180]	; (80028e8 <traffic_set_time_green+0xe0>)
 8002832:	f7ff f97b 	bl	8001b2c <DISPLAY_LED_7_SEGMENT>
    DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED2_0_Pin, SEGLED2_1_Pin, SEGLED2_2_Pin, SEGLED2_3_Pin, SEGLED2_4_Pin, SEGLED2_5_Pin, SEGLED2_6_Pin, 4);
 8002836:	2304      	movs	r3, #4
 8002838:	9304      	str	r3, [sp, #16]
 800283a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800283e:	9303      	str	r3, [sp, #12]
 8002840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002844:	9302      	str	r3, [sp, #8]
 8002846:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800285a:	2180      	movs	r1, #128	; 0x80
 800285c:	4822      	ldr	r0, [pc, #136]	; (80028e8 <traffic_set_time_green+0xe0>)
 800285e:	f7ff f965 	bl	8001b2c <DISPLAY_LED_7_SEGMENT>

    if (time_green_select < time_yellow_set) {
 8002862:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <traffic_set_time_green+0xdc>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	4b21      	ldr	r3, [pc, #132]	; (80028ec <traffic_set_time_green+0xe4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	da03      	bge.n	8002876 <traffic_set_time_green+0x6e>
        time_green_select = time_yellow_set;
 800286e:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <traffic_set_time_green+0xe4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <traffic_set_time_green+0xdc>)
 8002874:	6013      	str	r3, [r2, #0]
    }

    if (is_button_pressed(1)) {
 8002876:	2001      	movs	r0, #1
 8002878:	f000 f90a 	bl	8002a90 <is_button_pressed>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d012      	beq.n	80028a8 <traffic_set_time_green+0xa0>
        // Tăng giá trị
        if (time_green_select + time_yellow_set < time_red_set) {
 8002882:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <traffic_set_time_green+0xdc>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4b19      	ldr	r3, [pc, #100]	; (80028ec <traffic_set_time_green+0xe4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	441a      	add	r2, r3
 800288c:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <traffic_set_time_green+0xe8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	da05      	bge.n	80028a0 <traffic_set_time_green+0x98>
            time_green_select++;
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <traffic_set_time_green+0xdc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3301      	adds	r3, #1
 800289a:	4a12      	ldr	r2, [pc, #72]	; (80028e4 <traffic_set_time_green+0xdc>)
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e003      	b.n	80028a8 <traffic_set_time_green+0xa0>
        } else {
            time_green_select = time_yellow_set;
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <traffic_set_time_green+0xe4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0f      	ldr	r2, [pc, #60]	; (80028e4 <traffic_set_time_green+0xdc>)
 80028a6:	6013      	str	r3, [r2, #0]
        }
    }

    if (is_button_pressed(2)) {
 80028a8:	2002      	movs	r0, #2
 80028aa:	f000 f8f1 	bl	8002a90 <is_button_pressed>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <traffic_set_time_green+0xb4>
        // Chọn giá trị
        time_green_set = time_green_select;
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <traffic_set_time_green+0xdc>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <traffic_set_time_green+0xec>)
 80028ba:	6013      	str	r3, [r2, #0]
    }

    if (is_button_pressed(0)) {
 80028bc:	2000      	movs	r0, #0
 80028be:	f000 f8e7 	bl	8002a90 <is_button_pressed>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <traffic_set_time_green+0xd6>
        time_1 = time_init;
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <traffic_set_time_green+0xf0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a0b      	ldr	r2, [pc, #44]	; (80028fc <traffic_set_time_green+0xf4>)
 80028ce:	6013      	str	r3, [r2, #0]
        time_2 = time_init;
 80028d0:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <traffic_set_time_green+0xf0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <traffic_set_time_green+0xf8>)
 80028d6:	6013      	str	r3, [r2, #0]
        status = INIT;
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <traffic_set_time_green+0xfc>)
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]
    }
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	200000c8 	.word	0x200000c8
 80028e8:	40010c00 	.word	0x40010c00
 80028ec:	20000024 	.word	0x20000024
 80028f0:	20000028 	.word	0x20000028
 80028f4:	20000020 	.word	0x20000020
 80028f8:	2000002c 	.word	0x2000002c
 80028fc:	20000030 	.word	0x20000030
 8002900:	20000034 	.word	0x20000034
 8002904:	20000038 	.word	0x20000038

08002908 <automatic_run>:
void automatic_init(){
	if(status == INIT){
		setTimer1(1, 1000);
	}
}
void automatic_run(){
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
 	switch(status)
 800290c:	4b14      	ldr	r3, [pc, #80]	; (8002960 <automatic_run+0x58>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3b01      	subs	r3, #1
 8002912:	2b05      	cmp	r3, #5
 8002914:	d820      	bhi.n	8002958 <automatic_run+0x50>
 8002916:	a201      	add	r2, pc, #4	; (adr r2, 800291c <automatic_run+0x14>)
 8002918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291c:	08002935 	.word	0x08002935
 8002920:	0800293b 	.word	0x0800293b
 8002924:	08002941 	.word	0x08002941
 8002928:	0800294d 	.word	0x0800294d
 800292c:	08002953 	.word	0x08002953
 8002930:	08002947 	.word	0x08002947
	{
	case (INIT):
				traffic_init();
 8002934:	f7ff fcbc 	bl	80022b0 <traffic_init>
			break;
 8002938:	e00f      	b.n	800295a <automatic_run+0x52>
	case (GREEN_RED):
			// TODO
				traffic_green_red();
 800293a:	f7ff fcfb 	bl	8002334 <traffic_green_red>
			break;
 800293e:	e00c      	b.n	800295a <automatic_run+0x52>
	case (YELLOW_RED):
				traffic_yellow_red();
 8002940:	f7ff fd1a 	bl	8002378 <traffic_yellow_red>
			break;
 8002944:	e009      	b.n	800295a <automatic_run+0x52>
	case RED_RED1:
				traffic_red_red1();
 8002946:	f7ff fd53 	bl	80023f0 <traffic_red_red1>
			break;
 800294a:	e006      	b.n	800295a <automatic_run+0x52>
	case (RED_GREEN):
				traffic_red_green();
 800294c:	f7ff fd72 	bl	8002434 <traffic_red_green>
			break;
 8002950:	e003      	b.n	800295a <automatic_run+0x52>
	case (RED_YELLOW):
				traffic_red_yellow();
 8002952:	f7ff fd91 	bl	8002478 <traffic_red_yellow>
			break;
 8002956:	e000      	b.n	800295a <automatic_run+0x52>
	//case RED_RED2:
		//		traffic_red_red2();
			//break;
	default:
		break;
 8002958:	bf00      	nop
	}

}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000038 	.word	0x20000038

08002964 <button_reading>:
static GPIO_PinState debounceButtonBuffer3[N0_OF_BUTTONS];
static GPIO_PinState debounceButtonBuffer4[N0_OF_BUTTONS];
static uint8_t flagForButtonPress[N0_OF_BUTTONS]; // flag for button pressed (AN) hon 1 giay
static uint8_t flagForButton_longPress[N0_OF_BUTTONS];
int time_out_input = 500;
void button_reading ( GPIO_TypeDef* GPIOx[] , uint16_t GPIO_Pin[] ) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
	for (int i = 0 ; i< N0_OF_BUTTONS ; i ++ ){
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	e077      	b.n	8002a64 <button_reading+0x100>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8002974:	4a3f      	ldr	r2, [pc, #252]	; (8002a74 <button_reading+0x110>)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4413      	add	r3, r2
 800297a:	7819      	ldrb	r1, [r3, #0]
 800297c:	4a3e      	ldr	r2, [pc, #248]	; (8002a78 <button_reading+0x114>)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4413      	add	r3, r2
 8002982:	460a      	mov	r2, r1
 8002984:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8002986:	4a3d      	ldr	r2, [pc, #244]	; (8002a7c <button_reading+0x118>)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4413      	add	r3, r2
 800298c:	7819      	ldrb	r1, [r3, #0]
 800298e:	4a39      	ldr	r2, [pc, #228]	; (8002a74 <button_reading+0x110>)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4413      	add	r3, r2
 8002994:	460a      	mov	r2, r1
 8002996:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOx[i], GPIO_Pin[i]);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	4413      	add	r3, r2
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	4413      	add	r3, r2
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	4619      	mov	r1, r3
 80029ae:	f7fe f8bd 	bl	8000b2c <HAL_GPIO_ReadPin>
 80029b2:	4603      	mov	r3, r0
 80029b4:	4619      	mov	r1, r3
 80029b6:	4a31      	ldr	r2, [pc, #196]	; (8002a7c <button_reading+0x118>)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4413      	add	r3, r2
 80029bc:	460a      	mov	r2, r1
 80029be:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer3[i] == debounceButtonBuffer2[i] && debounceButtonBuffer2[i] == debounceButtonBuffer1[i]){
 80029c0:	4a2d      	ldr	r2, [pc, #180]	; (8002a78 <button_reading+0x114>)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4413      	add	r3, r2
 80029c6:	781a      	ldrb	r2, [r3, #0]
 80029c8:	492a      	ldr	r1, [pc, #168]	; (8002a74 <button_reading+0x110>)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	440b      	add	r3, r1
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d144      	bne.n	8002a5e <button_reading+0xfa>
 80029d4:	4a27      	ldr	r2, [pc, #156]	; (8002a74 <button_reading+0x110>)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4413      	add	r3, r2
 80029da:	781a      	ldrb	r2, [r3, #0]
 80029dc:	4927      	ldr	r1, [pc, #156]	; (8002a7c <button_reading+0x118>)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	440b      	add	r3, r1
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d13a      	bne.n	8002a5e <button_reading+0xfa>
			// Het Rung
			if(debounceButtonBuffer4[i]!=debounceButtonBuffer3[i]){
 80029e8:	4a25      	ldr	r2, [pc, #148]	; (8002a80 <button_reading+0x11c>)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4413      	add	r3, r2
 80029ee:	781a      	ldrb	r2, [r3, #0]
 80029f0:	4921      	ldr	r1, [pc, #132]	; (8002a78 <button_reading+0x114>)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	440b      	add	r3, r1
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d018      	beq.n	8002a2e <button_reading+0xca>
				// Dong bo lai tin hieu
				debounceButtonBuffer4[i]=debounceButtonBuffer3[i];
 80029fc:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <button_reading+0x114>)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4413      	add	r3, r2
 8002a02:	7819      	ldrb	r1, [r3, #0]
 8002a04:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <button_reading+0x11c>)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4413      	add	r3, r2
 8002a0a:	460a      	mov	r2, r1
 8002a0c:	701a      	strb	r2, [r3, #0]
				if(debounceButtonBuffer4[i] == BUTTON_IS_PRESSED){
 8002a0e:	4a1c      	ldr	r2, [pc, #112]	; (8002a80 <button_reading+0x11c>)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4413      	add	r3, r2
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d121      	bne.n	8002a5e <button_reading+0xfa>
					// Vua chuyen sang trang thai nhan
					flagForButtonPress[i] = 1;
 8002a1a:	4a1a      	ldr	r2, [pc, #104]	; (8002a84 <button_reading+0x120>)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4413      	add	r3, r2
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
					time_out_input = 500;
 8002a24:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <button_reading+0x124>)
 8002a26:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	e017      	b.n	8002a5e <button_reading+0xfa>
				}
			}
			else{
				// Dang trong qua trinh nhan de hoac nha
				time_out_input -- ;
 8002a2e:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <button_reading+0x124>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	4a14      	ldr	r2, [pc, #80]	; (8002a88 <button_reading+0x124>)
 8002a36:	6013      	str	r3, [r2, #0]
				if(time_out_input <= 0 ){
 8002a38:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <button_reading+0x124>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	dc0e      	bgt.n	8002a5e <button_reading+0xfa>
					// Nhan du 5s hoac tha 5s
					time_out_input = 500;
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <button_reading+0x124>)
 8002a42:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a46:	601a      	str	r2, [r3, #0]
					if(debounceButtonBuffer4[i] == BUTTON_IS_PRESSED){
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <button_reading+0x11c>)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d104      	bne.n	8002a5e <button_reading+0xfa>
						// Truong hop la nhan de
						flagForButton_longPress[i] = 1;
 8002a54:	4a0d      	ldr	r2, [pc, #52]	; (8002a8c <button_reading+0x128>)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4413      	add	r3, r2
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i< N0_OF_BUTTONS ; i ++ ){
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	3301      	adds	r3, #1
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	dd84      	ble.n	8002974 <button_reading+0x10>
					}
				}
			}
		}
	}
}
 8002a6a:	bf00      	nop
 8002a6c:	bf00      	nop
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000068 	.word	0x20000068
 8002a78:	2000006c 	.word	0x2000006c
 8002a7c:	20000064 	.word	0x20000064
 8002a80:	20000070 	.word	0x20000070
 8002a84:	20000074 	.word	0x20000074
 8002a88:	2000003c 	.word	0x2000003c
 8002a8c:	20000078 	.word	0x20000078

08002a90 <is_button_pressed>:
unsigned int is_button_pressed ( unsigned int index ){
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	// Tra ve trang thai nut nhan co dang bat hay khong
	if(index>= N0_OF_BUTTONS){
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <is_button_pressed+0x12>
		return 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e00d      	b.n	8002abe <is_button_pressed+0x2e>
	}
	if(flagForButtonPress[index] == 1){
 8002aa2:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <is_button_pressed+0x38>)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d106      	bne.n	8002abc <is_button_pressed+0x2c>
		flagForButtonPress[index] = 0;
 8002aae:	4a06      	ldr	r2, [pc, #24]	; (8002ac8 <is_button_pressed+0x38>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
		return 1;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <is_button_pressed+0x2e>
	}
	return 0;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	20000074 	.word	0x20000074

08002acc <manual_run>:
 */
#include "manual.h"
void manual_init(){
	setTimer1(2, 500); // Danh cho nhap nhay den khi set thoi gian
}
void manual_run(){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
	switch(status){
 8002ad0:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <manual_run+0x5c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3b08      	subs	r3, #8
 8002ad6:	2b07      	cmp	r3, #7
 8002ad8:	d823      	bhi.n	8002b22 <manual_run+0x56>
 8002ada:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <manual_run+0x14>)
 8002adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae0:	08002b01 	.word	0x08002b01
 8002ae4:	08002b07 	.word	0x08002b07
 8002ae8:	08002b0d 	.word	0x08002b0d
 8002aec:	08002b23 	.word	0x08002b23
 8002af0:	08002b13 	.word	0x08002b13
 8002af4:	08002b17 	.word	0x08002b17
 8002af8:	08002b1b 	.word	0x08002b1b
 8002afc:	08002b1f 	.word	0x08002b1f
	case SET_TIME_RED:
		traffic_set_time_red();
 8002b00:	f7ff fd9c 	bl	800263c <traffic_set_time_red>
		break;
 8002b04:	e00e      	b.n	8002b24 <manual_run+0x58>
	case SET_TIME_YELLOW:
		traffic_set_time_yellow();
 8002b06:	f7ff fe0f 	bl	8002728 <traffic_set_time_yellow>
		break;
 8002b0a:	e00b      	b.n	8002b24 <manual_run+0x58>
	case SET_TIME_GREEN:
		traffic_set_time_green();
 8002b0c:	f7ff fe7c 	bl	8002808 <traffic_set_time_green>
		break;
 8002b10:	e008      	b.n	8002b24 <manual_run+0x58>
	case MAN_GREEN_RED:
		traffic_mannual_green_red();
 8002b12:	f7ff fd33 	bl	800257c <traffic_mannual_green_red>
	case MAN_YELLOW_RED:
		traffic_mannual_yellow_red();
 8002b16:	f7ff fd49 	bl	80025ac <traffic_mannual_yellow_red>
	case MAN_RED_GREEN:
		traffic_mannual_red_green();
 8002b1a:	f7ff fd5f 	bl	80025dc <traffic_mannual_red_green>
	case MAN_RED_YELLOW:
		traffic_mannual_red_yellow();
 8002b1e:	f7ff fd75 	bl	800260c <traffic_mannual_red_yellow>
	default :
		break;
 8002b22:	bf00      	nop
	}

}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000038 	.word	0x20000038

08002b2c <setTimer1>:
#include "software_timer.h"
	int time_cycle = 10;
	int timer1_counter[10];
	int timer1_flag[10];

	void setTimer1(int index,int duration){
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
		timer1_counter[index]=duration / time_cycle;
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <setTimer1+0x30>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	fb92 f2f3 	sdiv	r2, r2, r3
 8002b40:	4907      	ldr	r1, [pc, #28]	; (8002b60 <setTimer1+0x34>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		timer1_flag[index] = 0;
 8002b48:	4a06      	ldr	r2, [pc, #24]	; (8002b64 <setTimer1+0x38>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr
 8002b5c:	20000040 	.word	0x20000040
 8002b60:	200000fc 	.word	0x200000fc
 8002b64:	200000d4 	.word	0x200000d4

08002b68 <SetTimerForTimerSet>:
	void SetTimerForTimerSet(int index,int duration,int timer_set){
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
		time_cycle = timer_set;
 8002b74:	4a05      	ldr	r2, [pc, #20]	; (8002b8c <SetTimerForTimerSet+0x24>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6013      	str	r3, [r2, #0]
		setTimer1(index, duration);
 8002b7a:	68b9      	ldr	r1, [r7, #8]
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f7ff ffd5 	bl	8002b2c <setTimer1>
	}
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000040 	.word	0x20000040

08002b90 <timerRun>:
	void timerRun(){
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
		for (int i = 0 ; i <10 ; i++){
 8002b96:	2300      	movs	r3, #0
 8002b98:	607b      	str	r3, [r7, #4]
 8002b9a:	e01c      	b.n	8002bd6 <timerRun+0x46>
			if(timer1_counter[i] >  0 ){
 8002b9c:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <timerRun+0x58>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	dd08      	ble.n	8002bba <timerRun+0x2a>
					timer1_counter[i]--;
 8002ba8:	4a0f      	ldr	r2, [pc, #60]	; (8002be8 <timerRun+0x58>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb0:	1e5a      	subs	r2, r3, #1
 8002bb2:	490d      	ldr	r1, [pc, #52]	; (8002be8 <timerRun+0x58>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 }
			if(timer1_counter[i]<=0){
 8002bba:	4a0b      	ldr	r2, [pc, #44]	; (8002be8 <timerRun+0x58>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	dc04      	bgt.n	8002bd0 <timerRun+0x40>
					timer1_flag[i]=1;
 8002bc6:	4a09      	ldr	r2, [pc, #36]	; (8002bec <timerRun+0x5c>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2101      	movs	r1, #1
 8002bcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0 ; i <10 ; i++){
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b09      	cmp	r3, #9
 8002bda:	dddf      	ble.n	8002b9c <timerRun+0xc>
			}
		}


	}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	200000fc 	.word	0x200000fc
 8002bec:	200000d4 	.word	0x200000d4

08002bf0 <__libc_init_array>:
 8002bf0:	b570      	push	{r4, r5, r6, lr}
 8002bf2:	2600      	movs	r6, #0
 8002bf4:	4d0c      	ldr	r5, [pc, #48]	; (8002c28 <__libc_init_array+0x38>)
 8002bf6:	4c0d      	ldr	r4, [pc, #52]	; (8002c2c <__libc_init_array+0x3c>)
 8002bf8:	1b64      	subs	r4, r4, r5
 8002bfa:	10a4      	asrs	r4, r4, #2
 8002bfc:	42a6      	cmp	r6, r4
 8002bfe:	d109      	bne.n	8002c14 <__libc_init_array+0x24>
 8002c00:	f000 f822 	bl	8002c48 <_init>
 8002c04:	2600      	movs	r6, #0
 8002c06:	4d0a      	ldr	r5, [pc, #40]	; (8002c30 <__libc_init_array+0x40>)
 8002c08:	4c0a      	ldr	r4, [pc, #40]	; (8002c34 <__libc_init_array+0x44>)
 8002c0a:	1b64      	subs	r4, r4, r5
 8002c0c:	10a4      	asrs	r4, r4, #2
 8002c0e:	42a6      	cmp	r6, r4
 8002c10:	d105      	bne.n	8002c1e <__libc_init_array+0x2e>
 8002c12:	bd70      	pop	{r4, r5, r6, pc}
 8002c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c18:	4798      	blx	r3
 8002c1a:	3601      	adds	r6, #1
 8002c1c:	e7ee      	b.n	8002bfc <__libc_init_array+0xc>
 8002c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c22:	4798      	blx	r3
 8002c24:	3601      	adds	r6, #1
 8002c26:	e7f2      	b.n	8002c0e <__libc_init_array+0x1e>
 8002c28:	08002c84 	.word	0x08002c84
 8002c2c:	08002c84 	.word	0x08002c84
 8002c30:	08002c84 	.word	0x08002c84
 8002c34:	08002c88 	.word	0x08002c88

08002c38 <memset>:
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4402      	add	r2, r0
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d100      	bne.n	8002c42 <memset+0xa>
 8002c40:	4770      	bx	lr
 8002c42:	f803 1b01 	strb.w	r1, [r3], #1
 8002c46:	e7f9      	b.n	8002c3c <memset+0x4>

08002c48 <_init>:
 8002c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4a:	bf00      	nop
 8002c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4e:	bc08      	pop	{r3}
 8002c50:	469e      	mov	lr, r3
 8002c52:	4770      	bx	lr

08002c54 <_fini>:
 8002c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c56:	bf00      	nop
 8002c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5a:	bc08      	pop	{r3}
 8002c5c:	469e      	mov	lr, r3
 8002c5e:	4770      	bx	lr


lab3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b9c  08002b9c  00012b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bc0  08002bc0  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08002bc0  08002bc0  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bc0  08002bc0  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bc0  08002bc0  00012bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bc4  08002bc4  00012bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08002bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000044  08002c0c  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002c0c  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009db6  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e36  00000000  00000000  00029e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002bc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002c760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017763  00000000  00000000  0002d120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d938  00000000  00000000  00044883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000828e2  00000000  00000000  000521bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4a9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a30  00000000  00000000  000d4af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000044 	.word	0x20000044
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b84 	.word	0x08002b84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000048 	.word	0x20000048
 8000148:	08002b84 	.word	0x08002b84

0800014c <ex4_init>:
 *
 *  Created on: Sep 27, 2024
 *      Author: thuyh
 */
#include <ex4.h>
void ex4_init(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	SetTimerForTimerSet(0, 500,10);
 8000150:	220a      	movs	r2, #10
 8000152:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000156:	2000      	movs	r0, #0
 8000158:	f002 fca4 	bl	8002aa4 <SetTimerForTimerSet>
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}

08000160 <ex5_init>:
 *      Author: thuyh
 */


#include "ex5.h"
void ex5_init(){
 8000160:	b480      	push	{r7}
 8000162:	af00      	add	r7, sp, #0

}
 8000164:	bf00      	nop
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr

0800016c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	b086      	sub	sp, #24
 8000170:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000172:	f000 f9ff 	bl	8000574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000176:	f000 f837 	bl	80001e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017a:	f000 f8bd 	bl	80002f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800017e:	f000 f86f 	bl	8000260 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000182:	4815      	ldr	r0, [pc, #84]	; (80001d8 <main+0x6c>)
 8000184:	f001 f954 	bl	8001430 <HAL_TIM_Base_Start_IT>
  ex4_init();
 8000188:	f7ff ffe0 	bl	800014c <ex4_init>
  ex5_init();
 800018c:	f7ff ffe8 	bl	8000160 <ex5_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 8000190:	2200      	movs	r2, #0
 8000192:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000196:	4811      	ldr	r0, [pc, #68]	; (80001dc <main+0x70>)
 8000198:	f000 fced 	bl	8000b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001a2:	480e      	ldr	r0, [pc, #56]	; (80001dc <main+0x70>)
 80001a4:	f000 fce7 	bl	8000b76 <HAL_GPIO_WritePin>
	  automatic_run();
 80001a8:	f002 fb4c 	bl	8002844 <automatic_run>
	  manual_run();
 80001ac:	f002 fc2c 	bl	8002a08 <manual_run>
	  traffic_double_display(GPIOA, RED_1_Pin, YELLOW_1_Pin, GREEN_1_Pin, GPIOA, RED_2_Pin, YELLOW_2_Pin, GREEN_2_Pin, status);
 80001b0:	4b0b      	ldr	r3, [pc, #44]	; (80001e0 <main+0x74>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	9304      	str	r3, [sp, #16]
 80001b6:	2340      	movs	r3, #64	; 0x40
 80001b8:	9303      	str	r3, [sp, #12]
 80001ba:	2380      	movs	r3, #128	; 0x80
 80001bc:	9302      	str	r3, [sp, #8]
 80001be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001c2:	9301      	str	r3, [sp, #4]
 80001c4:	4b07      	ldr	r3, [pc, #28]	; (80001e4 <main+0x78>)
 80001c6:	9300      	str	r3, [sp, #0]
 80001c8:	2302      	movs	r3, #2
 80001ca:	2204      	movs	r2, #4
 80001cc:	2108      	movs	r1, #8
 80001ce:	4805      	ldr	r0, [pc, #20]	; (80001e4 <main+0x78>)
 80001d0:	f001 fec2 	bl	8001f58 <traffic_double_display>
	  HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 80001d4:	e7dc      	b.n	8000190 <main+0x24>
 80001d6:	bf00      	nop
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	40010c00 	.word	0x40010c00
 80001e0:	20000038 	.word	0x20000038
 80001e4:	40010800 	.word	0x40010800

080001e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b090      	sub	sp, #64	; 0x40
 80001ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0318 	add.w	r3, r7, #24
 80001f2:	2228      	movs	r2, #40	; 0x28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f002 fcbc 	bl	8002b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]
 8000208:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800020a:	2302      	movs	r3, #2
 800020c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020e:	2301      	movs	r3, #1
 8000210:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000212:	2310      	movs	r3, #16
 8000214:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000216:	2300      	movs	r3, #0
 8000218:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021a:	f107 0318 	add.w	r3, r7, #24
 800021e:	4618      	mov	r0, r3
 8000220:	f000 fcda 	bl	8000bd8 <HAL_RCC_OscConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800022a:	f000 f8e9 	bl	8000400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022e:	230f      	movs	r3, #15
 8000230:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000232:	2300      	movs	r3, #0
 8000234:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f000 ff46 	bl	80010d8 <HAL_RCC_ClockConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000252:	f000 f8d5 	bl	8000400 <Error_Handler>
  }
}
 8000256:	bf00      	nop
 8000258:	3740      	adds	r7, #64	; 0x40
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000266:	f107 0308 	add.w	r3, r7, #8
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000274:	463b      	mov	r3, r7
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800027c:	4b1d      	ldr	r3, [pc, #116]	; (80002f4 <MX_TIM2_Init+0x94>)
 800027e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000282:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000284:	4b1b      	ldr	r3, [pc, #108]	; (80002f4 <MX_TIM2_Init+0x94>)
 8000286:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800028a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800028c:	4b19      	ldr	r3, [pc, #100]	; (80002f4 <MX_TIM2_Init+0x94>)
 800028e:	2200      	movs	r2, #0
 8000290:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000292:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <MX_TIM2_Init+0x94>)
 8000294:	2209      	movs	r2, #9
 8000296:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000298:	4b16      	ldr	r3, [pc, #88]	; (80002f4 <MX_TIM2_Init+0x94>)
 800029a:	2200      	movs	r2, #0
 800029c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800029e:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <MX_TIM2_Init+0x94>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002a4:	4813      	ldr	r0, [pc, #76]	; (80002f4 <MX_TIM2_Init+0x94>)
 80002a6:	f001 f873 	bl	8001390 <HAL_TIM_Base_Init>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002b0:	f000 f8a6 	bl	8000400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002ba:	f107 0308 	add.w	r3, r7, #8
 80002be:	4619      	mov	r1, r3
 80002c0:	480c      	ldr	r0, [pc, #48]	; (80002f4 <MX_TIM2_Init+0x94>)
 80002c2:	f001 f9f1 	bl	80016a8 <HAL_TIM_ConfigClockSource>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002cc:	f000 f898 	bl	8000400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002d0:	2300      	movs	r3, #0
 80002d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002d4:	2300      	movs	r3, #0
 80002d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002d8:	463b      	mov	r3, r7
 80002da:	4619      	mov	r1, r3
 80002dc:	4805      	ldr	r0, [pc, #20]	; (80002f4 <MX_TIM2_Init+0x94>)
 80002de:	f001 fbc9 	bl	8001a74 <HAL_TIMEx_MasterConfigSynchronization>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002e8:	f000 f88a 	bl	8000400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002ec:	bf00      	nop
 80002ee:	3718      	adds	r7, #24
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	2000007c 	.word	0x2000007c

080002f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b088      	sub	sp, #32
 80002fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fe:	f107 0310 	add.w	r3, r7, #16
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030c:	4b2f      	ldr	r3, [pc, #188]	; (80003cc <MX_GPIO_Init+0xd4>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a2e      	ldr	r2, [pc, #184]	; (80003cc <MX_GPIO_Init+0xd4>)
 8000312:	f043 0310 	orr.w	r3, r3, #16
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b2c      	ldr	r3, [pc, #176]	; (80003cc <MX_GPIO_Init+0xd4>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0310 	and.w	r3, r3, #16
 8000320:	60fb      	str	r3, [r7, #12]
 8000322:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000324:	4b29      	ldr	r3, [pc, #164]	; (80003cc <MX_GPIO_Init+0xd4>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a28      	ldr	r2, [pc, #160]	; (80003cc <MX_GPIO_Init+0xd4>)
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b26      	ldr	r3, [pc, #152]	; (80003cc <MX_GPIO_Init+0xd4>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0304 	and.w	r3, r3, #4
 8000338:	60bb      	str	r3, [r7, #8]
 800033a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800033c:	4b23      	ldr	r3, [pc, #140]	; (80003cc <MX_GPIO_Init+0xd4>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a22      	ldr	r2, [pc, #136]	; (80003cc <MX_GPIO_Init+0xd4>)
 8000342:	f043 0308 	orr.w	r3, r3, #8
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b20      	ldr	r3, [pc, #128]	; (80003cc <MX_GPIO_Init+0xd4>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0308 	and.w	r3, r3, #8
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin|YELLOW_1_Pin|RED_1_Pin|LED_RED_Pin
 8000354:	2200      	movs	r2, #0
 8000356:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 800035a:	481d      	ldr	r0, [pc, #116]	; (80003d0 <MX_GPIO_Init+0xd8>)
 800035c:	f000 fc0b 	bl	8000b76 <HAL_GPIO_WritePin>
                          |GREEN_2_Pin|YELLOW_2_Pin|RED_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEGLED1_0_Pin|SEGLED1_1_Pin|SEGLED1_2_Pin|SEGLED2_3_Pin
 8000360:	2200      	movs	r2, #0
 8000362:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000366:	481b      	ldr	r0, [pc, #108]	; (80003d4 <MX_GPIO_Init+0xdc>)
 8000368:	f000 fc05 	bl	8000b76 <HAL_GPIO_WritePin>
                          |SEGLED2_4_Pin|SEGLED2_5_Pin|SEGLED2_6_Pin|EN1_Pin
                          |EN2_Pin|SEGLED1_3_Pin|SEGLED1_4_Pin|SEGLED1_5_Pin
                          |SEGLED1_6_Pin|SEGLED2_0_Pin|SEGLED2_1_Pin|SEGLED2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 800036c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000372:	2300      	movs	r3, #0
 8000374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000376:	2301      	movs	r3, #1
 8000378:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800037a:	f107 0310 	add.w	r3, r7, #16
 800037e:	4619      	mov	r1, r3
 8000380:	4815      	ldr	r0, [pc, #84]	; (80003d8 <MX_GPIO_Init+0xe0>)
 8000382:	f000 fa67 	bl	8000854 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_1_Pin YELLOW_1_Pin RED_1_Pin LED_RED_Pin
                           GREEN_2_Pin YELLOW_2_Pin RED_2_Pin */
  GPIO_InitStruct.Pin = GREEN_1_Pin|YELLOW_1_Pin|RED_1_Pin|LED_RED_Pin
 8000386:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
 800038a:	613b      	str	r3, [r7, #16]
                          |GREEN_2_Pin|YELLOW_2_Pin|RED_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038c:	2301      	movs	r3, #1
 800038e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000390:	2300      	movs	r3, #0
 8000392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000394:	2302      	movs	r3, #2
 8000396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000398:	f107 0310 	add.w	r3, r7, #16
 800039c:	4619      	mov	r1, r3
 800039e:	480c      	ldr	r0, [pc, #48]	; (80003d0 <MX_GPIO_Init+0xd8>)
 80003a0:	f000 fa58 	bl	8000854 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEGLED1_0_Pin SEGLED1_1_Pin SEGLED1_2_Pin SEGLED2_3_Pin
                           SEGLED2_4_Pin SEGLED2_5_Pin SEGLED2_6_Pin EN1_Pin
                           EN2_Pin SEGLED1_3_Pin SEGLED1_4_Pin SEGLED1_5_Pin
                           SEGLED1_6_Pin SEGLED2_0_Pin SEGLED2_1_Pin SEGLED2_2_Pin */
  GPIO_InitStruct.Pin = SEGLED1_0_Pin|SEGLED1_1_Pin|SEGLED1_2_Pin|SEGLED2_3_Pin
 80003a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003a8:	613b      	str	r3, [r7, #16]
                          |SEGLED2_4_Pin|SEGLED2_5_Pin|SEGLED2_6_Pin|EN1_Pin
                          |EN2_Pin|SEGLED1_3_Pin|SEGLED1_4_Pin|SEGLED1_5_Pin
                          |SEGLED1_6_Pin|SEGLED2_0_Pin|SEGLED2_1_Pin|SEGLED2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b2:	2302      	movs	r3, #2
 80003b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b6:	f107 0310 	add.w	r3, r7, #16
 80003ba:	4619      	mov	r1, r3
 80003bc:	4805      	ldr	r0, [pc, #20]	; (80003d4 <MX_GPIO_Init+0xdc>)
 80003be:	f000 fa49 	bl	8000854 <HAL_GPIO_Init>

}
 80003c2:	bf00      	nop
 80003c4:	3720      	adds	r7, #32
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40010800 	.word	0x40010800
 80003d4:	40010c00 	.word	0x40010c00
 80003d8:	40011000 	.word	0x40011000

080003dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	timerRun();
 80003e4:	f002 fb72 	bl	8002acc <timerRun>
	button_reading(GPIOx, GPIO_Pin);
 80003e8:	4903      	ldr	r1, [pc, #12]	; (80003f8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80003ea:	4804      	ldr	r0, [pc, #16]	; (80003fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003ec:	f002 fa58 	bl	80028a0 <button_reading>
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	2000000c 	.word	0x2000000c
 80003fc:	20000000 	.word	0x20000000

08000400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000404:	b672      	cpsid	i
}
 8000406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000408:	e7fe      	b.n	8000408 <Error_Handler+0x8>
	...

0800040c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000412:	4b15      	ldr	r3, [pc, #84]	; (8000468 <HAL_MspInit+0x5c>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	4a14      	ldr	r2, [pc, #80]	; (8000468 <HAL_MspInit+0x5c>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6193      	str	r3, [r2, #24]
 800041e:	4b12      	ldr	r3, [pc, #72]	; (8000468 <HAL_MspInit+0x5c>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <HAL_MspInit+0x5c>)
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	4a0e      	ldr	r2, [pc, #56]	; (8000468 <HAL_MspInit+0x5c>)
 8000430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000434:	61d3      	str	r3, [r2, #28]
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <HAL_MspInit+0x5c>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000442:	4b0a      	ldr	r3, [pc, #40]	; (800046c <HAL_MspInit+0x60>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	4a04      	ldr	r2, [pc, #16]	; (800046c <HAL_MspInit+0x60>)
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	bf00      	nop
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	40021000 	.word	0x40021000
 800046c:	40010000 	.word	0x40010000

08000470 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000480:	d113      	bne.n	80004aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <HAL_TIM_Base_MspInit+0x44>)
 8000484:	69db      	ldr	r3, [r3, #28]
 8000486:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <HAL_TIM_Base_MspInit+0x44>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	61d3      	str	r3, [r2, #28]
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <HAL_TIM_Base_MspInit+0x44>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2100      	movs	r1, #0
 800049e:	201c      	movs	r0, #28
 80004a0:	f000 f9a1 	bl	80007e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004a4:	201c      	movs	r0, #28
 80004a6:	f000 f9ba 	bl	800081e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004aa:	bf00      	nop
 80004ac:	3710      	adds	r7, #16
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000

080004b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004bc:	e7fe      	b.n	80004bc <NMI_Handler+0x4>

080004be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <HardFault_Handler+0x4>

080004c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <MemManage_Handler+0x4>

080004ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ce:	e7fe      	b.n	80004ce <BusFault_Handler+0x4>

080004d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <UsageFault_Handler+0x4>

080004d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr

080004e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr

080004ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr

080004fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004fe:	f000 f87f 	bl	8000600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800050c:	4802      	ldr	r0, [pc, #8]	; (8000518 <TIM2_IRQHandler+0x10>)
 800050e:	f000 ffdb 	bl	80014c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	2000007c 	.word	0x2000007c

0800051c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000528:	f7ff fff8 	bl	800051c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800052c:	480b      	ldr	r0, [pc, #44]	; (800055c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800052e:	490c      	ldr	r1, [pc, #48]	; (8000560 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000534:	e002      	b.n	800053c <LoopCopyDataInit>

08000536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053a:	3304      	adds	r3, #4

0800053c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800053c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000540:	d3f9      	bcc.n	8000536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000542:	4a09      	ldr	r2, [pc, #36]	; (8000568 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000544:	4c09      	ldr	r4, [pc, #36]	; (800056c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000548:	e001      	b.n	800054e <LoopFillZerobss>

0800054a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800054c:	3204      	adds	r2, #4

0800054e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000550:	d3fb      	bcc.n	800054a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000552:	f002 faeb 	bl	8002b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000556:	f7ff fe09 	bl	800016c <main>
  bx lr
 800055a:	4770      	bx	lr
  ldr r0, =_sdata
 800055c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000560:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8000564:	08002bc8 	.word	0x08002bc8
  ldr r2, =_sbss
 8000568:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 800056c:	20000124 	.word	0x20000124

08000570 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000570:	e7fe      	b.n	8000570 <ADC1_2_IRQHandler>
	...

08000574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <HAL_Init+0x28>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a07      	ldr	r2, [pc, #28]	; (800059c <HAL_Init+0x28>)
 800057e:	f043 0310 	orr.w	r3, r3, #16
 8000582:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000584:	2003      	movs	r0, #3
 8000586:	f000 f923 	bl	80007d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800058a:	200f      	movs	r0, #15
 800058c:	f000 f808 	bl	80005a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000590:	f7ff ff3c 	bl	800040c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40022000 	.word	0x40022000

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <HAL_InitTick+0x54>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <HAL_InitTick+0x58>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4619      	mov	r1, r3
 80005b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f93b 	bl	800083a <HAL_SYSTICK_Config>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ca:	2301      	movs	r3, #1
 80005cc:	e00e      	b.n	80005ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b0f      	cmp	r3, #15
 80005d2:	d80a      	bhi.n	80005ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d4:	2200      	movs	r2, #0
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	f04f 30ff 	mov.w	r0, #4294967295
 80005dc:	f000 f903 	bl	80007e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e0:	4a06      	ldr	r2, [pc, #24]	; (80005fc <HAL_InitTick+0x5c>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005e6:	2300      	movs	r3, #0
 80005e8:	e000      	b.n	80005ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ea:	2301      	movs	r3, #1
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000014 	.word	0x20000014
 80005f8:	2000001c 	.word	0x2000001c
 80005fc:	20000018 	.word	0x20000018

08000600 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_IncTick+0x1c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_IncTick+0x20>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4413      	add	r3, r2
 8000610:	4a03      	ldr	r2, [pc, #12]	; (8000620 <HAL_IncTick+0x20>)
 8000612:	6013      	str	r3, [r2, #0]
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	2000001c 	.word	0x2000001c
 8000620:	200000c4 	.word	0x200000c4

08000624 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return uwTick;
 8000628:	4b02      	ldr	r3, [pc, #8]	; (8000634 <HAL_GetTick+0x10>)
 800062a:	681b      	ldr	r3, [r3, #0]
}
 800062c:	4618      	mov	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	200000c4 	.word	0x200000c4

08000638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000654:	4013      	ands	r3, r2
 8000656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066a:	4a04      	ldr	r2, [pc, #16]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	60d3      	str	r3, [r2, #12]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <__NVIC_GetPriorityGrouping+0x18>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	f003 0307 	and.w	r3, r3, #7
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db0b      	blt.n	80006c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 021f 	and.w	r2, r3, #31
 80006b4:	4906      	ldr	r1, [pc, #24]	; (80006d0 <__NVIC_EnableIRQ+0x34>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	095b      	lsrs	r3, r3, #5
 80006bc:	2001      	movs	r0, #1
 80006be:	fa00 f202 	lsl.w	r2, r0, r2
 80006c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	e000e100 	.word	0xe000e100

080006d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	db0a      	blt.n	80006fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	490c      	ldr	r1, [pc, #48]	; (8000720 <__NVIC_SetPriority+0x4c>)
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	0112      	lsls	r2, r2, #4
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	440b      	add	r3, r1
 80006f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006fc:	e00a      	b.n	8000714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4908      	ldr	r1, [pc, #32]	; (8000724 <__NVIC_SetPriority+0x50>)
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	f003 030f 	and.w	r3, r3, #15
 800070a:	3b04      	subs	r3, #4
 800070c:	0112      	lsls	r2, r2, #4
 800070e:	b2d2      	uxtb	r2, r2
 8000710:	440b      	add	r3, r1
 8000712:	761a      	strb	r2, [r3, #24]
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000e100 	.word	0xe000e100
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000728:	b480      	push	{r7}
 800072a:	b089      	sub	sp, #36	; 0x24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	f1c3 0307 	rsb	r3, r3, #7
 8000742:	2b04      	cmp	r3, #4
 8000744:	bf28      	it	cs
 8000746:	2304      	movcs	r3, #4
 8000748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3304      	adds	r3, #4
 800074e:	2b06      	cmp	r3, #6
 8000750:	d902      	bls.n	8000758 <NVIC_EncodePriority+0x30>
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3b03      	subs	r3, #3
 8000756:	e000      	b.n	800075a <NVIC_EncodePriority+0x32>
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800075c:	f04f 32ff 	mov.w	r2, #4294967295
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	43da      	mvns	r2, r3
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	401a      	ands	r2, r3
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000770:	f04f 31ff 	mov.w	r1, #4294967295
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	fa01 f303 	lsl.w	r3, r1, r3
 800077a:	43d9      	mvns	r1, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	4313      	orrs	r3, r2
         );
}
 8000782:	4618      	mov	r0, r3
 8000784:	3724      	adds	r7, #36	; 0x24
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr

0800078c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3b01      	subs	r3, #1
 8000798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800079c:	d301      	bcc.n	80007a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079e:	2301      	movs	r3, #1
 80007a0:	e00f      	b.n	80007c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <SysTick_Config+0x40>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007aa:	210f      	movs	r1, #15
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295
 80007b0:	f7ff ff90 	bl	80006d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <SysTick_Config+0x40>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <SysTick_Config+0x40>)
 80007bc:	2207      	movs	r2, #7
 80007be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	e000e010 	.word	0xe000e010

080007d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff2d 	bl	8000638 <__NVIC_SetPriorityGrouping>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b086      	sub	sp, #24
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f8:	f7ff ff42 	bl	8000680 <__NVIC_GetPriorityGrouping>
 80007fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	68b9      	ldr	r1, [r7, #8]
 8000802:	6978      	ldr	r0, [r7, #20]
 8000804:	f7ff ff90 	bl	8000728 <NVIC_EncodePriority>
 8000808:	4602      	mov	r2, r0
 800080a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff5f 	bl	80006d4 <__NVIC_SetPriority>
}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff35 	bl	800069c <__NVIC_EnableIRQ>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffa2 	bl	800078c <SysTick_Config>
 8000848:	4603      	mov	r3, r0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000854:	b480      	push	{r7}
 8000856:	b08b      	sub	sp, #44	; 0x2c
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000866:	e148      	b.n	8000afa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000868:	2201      	movs	r2, #1
 800086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	69fa      	ldr	r2, [r7, #28]
 8000878:	4013      	ands	r3, r2
 800087a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	429a      	cmp	r2, r3
 8000882:	f040 8137 	bne.w	8000af4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	4aa3      	ldr	r2, [pc, #652]	; (8000b18 <HAL_GPIO_Init+0x2c4>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d05e      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 8000890:	4aa1      	ldr	r2, [pc, #644]	; (8000b18 <HAL_GPIO_Init+0x2c4>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d875      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 8000896:	4aa1      	ldr	r2, [pc, #644]	; (8000b1c <HAL_GPIO_Init+0x2c8>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d058      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 800089c:	4a9f      	ldr	r2, [pc, #636]	; (8000b1c <HAL_GPIO_Init+0x2c8>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d86f      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008a2:	4a9f      	ldr	r2, [pc, #636]	; (8000b20 <HAL_GPIO_Init+0x2cc>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d052      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 80008a8:	4a9d      	ldr	r2, [pc, #628]	; (8000b20 <HAL_GPIO_Init+0x2cc>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d869      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008ae:	4a9d      	ldr	r2, [pc, #628]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d04c      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 80008b4:	4a9b      	ldr	r2, [pc, #620]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d863      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008ba:	4a9b      	ldr	r2, [pc, #620]	; (8000b28 <HAL_GPIO_Init+0x2d4>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d046      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 80008c0:	4a99      	ldr	r2, [pc, #612]	; (8000b28 <HAL_GPIO_Init+0x2d4>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d85d      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008c6:	2b12      	cmp	r3, #18
 80008c8:	d82a      	bhi.n	8000920 <HAL_GPIO_Init+0xcc>
 80008ca:	2b12      	cmp	r3, #18
 80008cc:	d859      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008ce:	a201      	add	r2, pc, #4	; (adr r2, 80008d4 <HAL_GPIO_Init+0x80>)
 80008d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d4:	0800094f 	.word	0x0800094f
 80008d8:	08000929 	.word	0x08000929
 80008dc:	0800093b 	.word	0x0800093b
 80008e0:	0800097d 	.word	0x0800097d
 80008e4:	08000983 	.word	0x08000983
 80008e8:	08000983 	.word	0x08000983
 80008ec:	08000983 	.word	0x08000983
 80008f0:	08000983 	.word	0x08000983
 80008f4:	08000983 	.word	0x08000983
 80008f8:	08000983 	.word	0x08000983
 80008fc:	08000983 	.word	0x08000983
 8000900:	08000983 	.word	0x08000983
 8000904:	08000983 	.word	0x08000983
 8000908:	08000983 	.word	0x08000983
 800090c:	08000983 	.word	0x08000983
 8000910:	08000983 	.word	0x08000983
 8000914:	08000983 	.word	0x08000983
 8000918:	08000931 	.word	0x08000931
 800091c:	08000945 	.word	0x08000945
 8000920:	4a82      	ldr	r2, [pc, #520]	; (8000b2c <HAL_GPIO_Init+0x2d8>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d013      	beq.n	800094e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000926:	e02c      	b.n	8000982 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	623b      	str	r3, [r7, #32]
          break;
 800092e:	e029      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	3304      	adds	r3, #4
 8000936:	623b      	str	r3, [r7, #32]
          break;
 8000938:	e024      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	3308      	adds	r3, #8
 8000940:	623b      	str	r3, [r7, #32]
          break;
 8000942:	e01f      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	330c      	adds	r3, #12
 800094a:	623b      	str	r3, [r7, #32]
          break;
 800094c:	e01a      	b.n	8000984 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d102      	bne.n	800095c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000956:	2304      	movs	r3, #4
 8000958:	623b      	str	r3, [r7, #32]
          break;
 800095a:	e013      	b.n	8000984 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d105      	bne.n	8000970 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000964:	2308      	movs	r3, #8
 8000966:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	69fa      	ldr	r2, [r7, #28]
 800096c:	611a      	str	r2, [r3, #16]
          break;
 800096e:	e009      	b.n	8000984 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000970:	2308      	movs	r3, #8
 8000972:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	69fa      	ldr	r2, [r7, #28]
 8000978:	615a      	str	r2, [r3, #20]
          break;
 800097a:	e003      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
          break;
 8000980:	e000      	b.n	8000984 <HAL_GPIO_Init+0x130>
          break;
 8000982:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	2bff      	cmp	r3, #255	; 0xff
 8000988:	d801      	bhi.n	800098e <HAL_GPIO_Init+0x13a>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	e001      	b.n	8000992 <HAL_GPIO_Init+0x13e>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3304      	adds	r3, #4
 8000992:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	2bff      	cmp	r3, #255	; 0xff
 8000998:	d802      	bhi.n	80009a0 <HAL_GPIO_Init+0x14c>
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	e002      	b.n	80009a6 <HAL_GPIO_Init+0x152>
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	3b08      	subs	r3, #8
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	210f      	movs	r1, #15
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	fa01 f303 	lsl.w	r3, r1, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	401a      	ands	r2, r3
 80009b8:	6a39      	ldr	r1, [r7, #32]
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	fa01 f303 	lsl.w	r3, r1, r3
 80009c0:	431a      	orrs	r2, r3
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f000 8090 	beq.w	8000af4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009d4:	4b56      	ldr	r3, [pc, #344]	; (8000b30 <HAL_GPIO_Init+0x2dc>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a55      	ldr	r2, [pc, #340]	; (8000b30 <HAL_GPIO_Init+0x2dc>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b53      	ldr	r3, [pc, #332]	; (8000b30 <HAL_GPIO_Init+0x2dc>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009ec:	4a51      	ldr	r2, [pc, #324]	; (8000b34 <HAL_GPIO_Init+0x2e0>)
 80009ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f0:	089b      	lsrs	r3, r3, #2
 80009f2:	3302      	adds	r3, #2
 80009f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	f003 0303 	and.w	r3, r3, #3
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	220f      	movs	r2, #15
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a49      	ldr	r2, [pc, #292]	; (8000b38 <HAL_GPIO_Init+0x2e4>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d00d      	beq.n	8000a34 <HAL_GPIO_Init+0x1e0>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a48      	ldr	r2, [pc, #288]	; (8000b3c <HAL_GPIO_Init+0x2e8>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d007      	beq.n	8000a30 <HAL_GPIO_Init+0x1dc>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a47      	ldr	r2, [pc, #284]	; (8000b40 <HAL_GPIO_Init+0x2ec>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d101      	bne.n	8000a2c <HAL_GPIO_Init+0x1d8>
 8000a28:	2302      	movs	r3, #2
 8000a2a:	e004      	b.n	8000a36 <HAL_GPIO_Init+0x1e2>
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	e002      	b.n	8000a36 <HAL_GPIO_Init+0x1e2>
 8000a30:	2301      	movs	r3, #1
 8000a32:	e000      	b.n	8000a36 <HAL_GPIO_Init+0x1e2>
 8000a34:	2300      	movs	r3, #0
 8000a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a38:	f002 0203 	and.w	r2, r2, #3
 8000a3c:	0092      	lsls	r2, r2, #2
 8000a3e:	4093      	lsls	r3, r2
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a46:	493b      	ldr	r1, [pc, #236]	; (8000b34 <HAL_GPIO_Init+0x2e0>)
 8000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4a:	089b      	lsrs	r3, r3, #2
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d006      	beq.n	8000a6e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a60:	4b38      	ldr	r3, [pc, #224]	; (8000b44 <HAL_GPIO_Init+0x2f0>)
 8000a62:	689a      	ldr	r2, [r3, #8]
 8000a64:	4937      	ldr	r1, [pc, #220]	; (8000b44 <HAL_GPIO_Init+0x2f0>)
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	608b      	str	r3, [r1, #8]
 8000a6c:	e006      	b.n	8000a7c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a6e:	4b35      	ldr	r3, [pc, #212]	; (8000b44 <HAL_GPIO_Init+0x2f0>)
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	43db      	mvns	r3, r3
 8000a76:	4933      	ldr	r1, [pc, #204]	; (8000b44 <HAL_GPIO_Init+0x2f0>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d006      	beq.n	8000a96 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a88:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <HAL_GPIO_Init+0x2f0>)
 8000a8a:	68da      	ldr	r2, [r3, #12]
 8000a8c:	492d      	ldr	r1, [pc, #180]	; (8000b44 <HAL_GPIO_Init+0x2f0>)
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	60cb      	str	r3, [r1, #12]
 8000a94:	e006      	b.n	8000aa4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a96:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <HAL_GPIO_Init+0x2f0>)
 8000a98:	68da      	ldr	r2, [r3, #12]
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	4929      	ldr	r1, [pc, #164]	; (8000b44 <HAL_GPIO_Init+0x2f0>)
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d006      	beq.n	8000abe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ab0:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <HAL_GPIO_Init+0x2f0>)
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	4923      	ldr	r1, [pc, #140]	; (8000b44 <HAL_GPIO_Init+0x2f0>)
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	604b      	str	r3, [r1, #4]
 8000abc:	e006      	b.n	8000acc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <HAL_GPIO_Init+0x2f0>)
 8000ac0:	685a      	ldr	r2, [r3, #4]
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	491f      	ldr	r1, [pc, #124]	; (8000b44 <HAL_GPIO_Init+0x2f0>)
 8000ac8:	4013      	ands	r3, r2
 8000aca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d006      	beq.n	8000ae6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_GPIO_Init+0x2f0>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4919      	ldr	r1, [pc, #100]	; (8000b44 <HAL_GPIO_Init+0x2f0>)
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	600b      	str	r3, [r1, #0]
 8000ae4:	e006      	b.n	8000af4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_GPIO_Init+0x2f0>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	43db      	mvns	r3, r3
 8000aee:	4915      	ldr	r1, [pc, #84]	; (8000b44 <HAL_GPIO_Init+0x2f0>)
 8000af0:	4013      	ands	r3, r2
 8000af2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af6:	3301      	adds	r3, #1
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	fa22 f303 	lsr.w	r3, r2, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f47f aeaf 	bne.w	8000868 <HAL_GPIO_Init+0x14>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	bf00      	nop
 8000b0e:	372c      	adds	r7, #44	; 0x2c
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	10320000 	.word	0x10320000
 8000b1c:	10310000 	.word	0x10310000
 8000b20:	10220000 	.word	0x10220000
 8000b24:	10210000 	.word	0x10210000
 8000b28:	10120000 	.word	0x10120000
 8000b2c:	10110000 	.word	0x10110000
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40010000 	.word	0x40010000
 8000b38:	40010800 	.word	0x40010800
 8000b3c:	40010c00 	.word	0x40010c00
 8000b40:	40011000 	.word	0x40011000
 8000b44:	40010400 	.word	0x40010400

08000b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689a      	ldr	r2, [r3, #8]
 8000b58:	887b      	ldrh	r3, [r7, #2]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e001      	b.n	8000b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr

08000b76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	807b      	strh	r3, [r7, #2]
 8000b82:	4613      	mov	r3, r2
 8000b84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b86:	787b      	ldrb	r3, [r7, #1]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d003      	beq.n	8000b94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b8c:	887a      	ldrh	r2, [r7, #2]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b92:	e003      	b.n	8000b9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b94:	887b      	ldrh	r3, [r7, #2]
 8000b96:	041a      	lsls	r2, r3, #16
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	611a      	str	r2, [r3, #16]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr

08000ba6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b085      	sub	sp, #20
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bb8:	887a      	ldrh	r2, [r7, #2]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	041a      	lsls	r2, r3, #16
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	43d9      	mvns	r1, r3
 8000bc4:	887b      	ldrh	r3, [r7, #2]
 8000bc6:	400b      	ands	r3, r1
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	611a      	str	r2, [r3, #16]
}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e26c      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f000 8087 	beq.w	8000d06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bf8:	4b92      	ldr	r3, [pc, #584]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 030c 	and.w	r3, r3, #12
 8000c00:	2b04      	cmp	r3, #4
 8000c02:	d00c      	beq.n	8000c1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c04:	4b8f      	ldr	r3, [pc, #572]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 030c 	and.w	r3, r3, #12
 8000c0c:	2b08      	cmp	r3, #8
 8000c0e:	d112      	bne.n	8000c36 <HAL_RCC_OscConfig+0x5e>
 8000c10:	4b8c      	ldr	r3, [pc, #560]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c1c:	d10b      	bne.n	8000c36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c1e:	4b89      	ldr	r3, [pc, #548]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d06c      	beq.n	8000d04 <HAL_RCC_OscConfig+0x12c>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d168      	bne.n	8000d04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e246      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c3e:	d106      	bne.n	8000c4e <HAL_RCC_OscConfig+0x76>
 8000c40:	4b80      	ldr	r3, [pc, #512]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a7f      	ldr	r2, [pc, #508]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	e02e      	b.n	8000cac <HAL_RCC_OscConfig+0xd4>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10c      	bne.n	8000c70 <HAL_RCC_OscConfig+0x98>
 8000c56:	4b7b      	ldr	r3, [pc, #492]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a7a      	ldr	r2, [pc, #488]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	4b78      	ldr	r3, [pc, #480]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a77      	ldr	r2, [pc, #476]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	e01d      	b.n	8000cac <HAL_RCC_OscConfig+0xd4>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c78:	d10c      	bne.n	8000c94 <HAL_RCC_OscConfig+0xbc>
 8000c7a:	4b72      	ldr	r3, [pc, #456]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a71      	ldr	r2, [pc, #452]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	4b6f      	ldr	r3, [pc, #444]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a6e      	ldr	r2, [pc, #440]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	e00b      	b.n	8000cac <HAL_RCC_OscConfig+0xd4>
 8000c94:	4b6b      	ldr	r3, [pc, #428]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a6a      	ldr	r2, [pc, #424]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	4b68      	ldr	r3, [pc, #416]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a67      	ldr	r2, [pc, #412]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000caa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d013      	beq.n	8000cdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb4:	f7ff fcb6 	bl	8000624 <HAL_GetTick>
 8000cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cba:	e008      	b.n	8000cce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cbc:	f7ff fcb2 	bl	8000624 <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b64      	cmp	r3, #100	; 0x64
 8000cc8:	d901      	bls.n	8000cce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e1fa      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cce:	4b5d      	ldr	r3, [pc, #372]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f0      	beq.n	8000cbc <HAL_RCC_OscConfig+0xe4>
 8000cda:	e014      	b.n	8000d06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fca2 	bl	8000624 <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ce4:	f7ff fc9e 	bl	8000624 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b64      	cmp	r3, #100	; 0x64
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e1e6      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf6:	4b53      	ldr	r3, [pc, #332]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f0      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x10c>
 8000d02:	e000      	b.n	8000d06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d063      	beq.n	8000dda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d12:	4b4c      	ldr	r3, [pc, #304]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 030c 	and.w	r3, r3, #12
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d00b      	beq.n	8000d36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d1e:	4b49      	ldr	r3, [pc, #292]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 030c 	and.w	r3, r3, #12
 8000d26:	2b08      	cmp	r3, #8
 8000d28:	d11c      	bne.n	8000d64 <HAL_RCC_OscConfig+0x18c>
 8000d2a:	4b46      	ldr	r3, [pc, #280]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d116      	bne.n	8000d64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d36:	4b43      	ldr	r3, [pc, #268]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d005      	beq.n	8000d4e <HAL_RCC_OscConfig+0x176>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d001      	beq.n	8000d4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e1ba      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d4e:	4b3d      	ldr	r3, [pc, #244]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	4939      	ldr	r1, [pc, #228]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d62:	e03a      	b.n	8000dda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d020      	beq.n	8000dae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d6c:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <HAL_RCC_OscConfig+0x270>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d72:	f7ff fc57 	bl	8000624 <HAL_GetTick>
 8000d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d78:	e008      	b.n	8000d8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d7a:	f7ff fc53 	bl	8000624 <HAL_GetTick>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d901      	bls.n	8000d8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e19b      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0f0      	beq.n	8000d7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d98:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	4927      	ldr	r1, [pc, #156]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	4313      	orrs	r3, r2
 8000daa:	600b      	str	r3, [r1, #0]
 8000dac:	e015      	b.n	8000dda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dae:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <HAL_RCC_OscConfig+0x270>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db4:	f7ff fc36 	bl	8000624 <HAL_GetTick>
 8000db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dba:	e008      	b.n	8000dce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dbc:	f7ff fc32 	bl	8000624 <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e17a      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1f0      	bne.n	8000dbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0308 	and.w	r3, r3, #8
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d03a      	beq.n	8000e5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d019      	beq.n	8000e22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_RCC_OscConfig+0x274>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df4:	f7ff fc16 	bl	8000624 <HAL_GetTick>
 8000df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dfc:	f7ff fc12 	bl	8000624 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e15a      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0f0      	beq.n	8000dfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f000 fa9a 	bl	8001354 <RCC_Delay>
 8000e20:	e01c      	b.n	8000e5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_RCC_OscConfig+0x274>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e28:	f7ff fbfc 	bl	8000624 <HAL_GetTick>
 8000e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e2e:	e00f      	b.n	8000e50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e30:	f7ff fbf8 	bl	8000624 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d908      	bls.n	8000e50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e140      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
 8000e42:	bf00      	nop
 8000e44:	40021000 	.word	0x40021000
 8000e48:	42420000 	.word	0x42420000
 8000e4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e50:	4b9e      	ldr	r3, [pc, #632]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1e9      	bne.n	8000e30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f000 80a6 	beq.w	8000fb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e6e:	4b97      	ldr	r3, [pc, #604]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10d      	bne.n	8000e96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	4b94      	ldr	r3, [pc, #592]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a93      	ldr	r2, [pc, #588]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e84:	61d3      	str	r3, [r2, #28]
 8000e86:	4b91      	ldr	r3, [pc, #580]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e92:	2301      	movs	r3, #1
 8000e94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e96:	4b8e      	ldr	r3, [pc, #568]	; (80010d0 <HAL_RCC_OscConfig+0x4f8>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d118      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ea2:	4b8b      	ldr	r3, [pc, #556]	; (80010d0 <HAL_RCC_OscConfig+0x4f8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a8a      	ldr	r2, [pc, #552]	; (80010d0 <HAL_RCC_OscConfig+0x4f8>)
 8000ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eae:	f7ff fbb9 	bl	8000624 <HAL_GetTick>
 8000eb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb4:	e008      	b.n	8000ec8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eb6:	f7ff fbb5 	bl	8000624 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b64      	cmp	r3, #100	; 0x64
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e0fd      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec8:	4b81      	ldr	r3, [pc, #516]	; (80010d0 <HAL_RCC_OscConfig+0x4f8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0f0      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d106      	bne.n	8000eea <HAL_RCC_OscConfig+0x312>
 8000edc:	4b7b      	ldr	r3, [pc, #492]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	4a7a      	ldr	r2, [pc, #488]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6213      	str	r3, [r2, #32]
 8000ee8:	e02d      	b.n	8000f46 <HAL_RCC_OscConfig+0x36e>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10c      	bne.n	8000f0c <HAL_RCC_OscConfig+0x334>
 8000ef2:	4b76      	ldr	r3, [pc, #472]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000ef4:	6a1b      	ldr	r3, [r3, #32]
 8000ef6:	4a75      	ldr	r2, [pc, #468]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000ef8:	f023 0301 	bic.w	r3, r3, #1
 8000efc:	6213      	str	r3, [r2, #32]
 8000efe:	4b73      	ldr	r3, [pc, #460]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	4a72      	ldr	r2, [pc, #456]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f04:	f023 0304 	bic.w	r3, r3, #4
 8000f08:	6213      	str	r3, [r2, #32]
 8000f0a:	e01c      	b.n	8000f46 <HAL_RCC_OscConfig+0x36e>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	2b05      	cmp	r3, #5
 8000f12:	d10c      	bne.n	8000f2e <HAL_RCC_OscConfig+0x356>
 8000f14:	4b6d      	ldr	r3, [pc, #436]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	4a6c      	ldr	r2, [pc, #432]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	6213      	str	r3, [r2, #32]
 8000f20:	4b6a      	ldr	r3, [pc, #424]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	4a69      	ldr	r2, [pc, #420]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	6213      	str	r3, [r2, #32]
 8000f2c:	e00b      	b.n	8000f46 <HAL_RCC_OscConfig+0x36e>
 8000f2e:	4b67      	ldr	r3, [pc, #412]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f30:	6a1b      	ldr	r3, [r3, #32]
 8000f32:	4a66      	ldr	r2, [pc, #408]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f34:	f023 0301 	bic.w	r3, r3, #1
 8000f38:	6213      	str	r3, [r2, #32]
 8000f3a:	4b64      	ldr	r3, [pc, #400]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	4a63      	ldr	r2, [pc, #396]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f40:	f023 0304 	bic.w	r3, r3, #4
 8000f44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d015      	beq.n	8000f7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f4e:	f7ff fb69 	bl	8000624 <HAL_GetTick>
 8000f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f54:	e00a      	b.n	8000f6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f56:	f7ff fb65 	bl	8000624 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e0ab      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f6c:	4b57      	ldr	r3, [pc, #348]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0ee      	beq.n	8000f56 <HAL_RCC_OscConfig+0x37e>
 8000f78:	e014      	b.n	8000fa4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7a:	f7ff fb53 	bl	8000624 <HAL_GetTick>
 8000f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f80:	e00a      	b.n	8000f98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f82:	f7ff fb4f 	bl	8000624 <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e095      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f98:	4b4c      	ldr	r3, [pc, #304]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1ee      	bne.n	8000f82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fa4:	7dfb      	ldrb	r3, [r7, #23]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d105      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000faa:	4b48      	ldr	r3, [pc, #288]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	4a47      	ldr	r2, [pc, #284]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 8081 	beq.w	80010c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fc0:	4b42      	ldr	r3, [pc, #264]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 030c 	and.w	r3, r3, #12
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d061      	beq.n	8001090 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69db      	ldr	r3, [r3, #28]
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d146      	bne.n	8001062 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd4:	4b3f      	ldr	r3, [pc, #252]	; (80010d4 <HAL_RCC_OscConfig+0x4fc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fda:	f7ff fb23 	bl	8000624 <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe2:	f7ff fb1f 	bl	8000624 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e067      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff4:	4b35      	ldr	r3, [pc, #212]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f0      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001008:	d108      	bne.n	800101c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800100a:	4b30      	ldr	r3, [pc, #192]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	492d      	ldr	r1, [pc, #180]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800101c:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a19      	ldr	r1, [r3, #32]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	430b      	orrs	r3, r1
 800102e:	4927      	ldr	r1, [pc, #156]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8001030:	4313      	orrs	r3, r2
 8001032:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <HAL_RCC_OscConfig+0x4fc>)
 8001036:	2201      	movs	r2, #1
 8001038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103a:	f7ff faf3 	bl	8000624 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001042:	f7ff faef 	bl	8000624 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e037      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0f0      	beq.n	8001042 <HAL_RCC_OscConfig+0x46a>
 8001060:	e02f      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <HAL_RCC_OscConfig+0x4fc>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fadc 	bl	8000624 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001070:	f7ff fad8 	bl	8000624 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e020      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x498>
 800108e:	e018      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d101      	bne.n	800109c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e013      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d106      	bne.n	80010be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d001      	beq.n	80010c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40007000 	.word	0x40007000
 80010d4:	42420060 	.word	0x42420060

080010d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0d0      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010ec:	4b6a      	ldr	r3, [pc, #424]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d910      	bls.n	800111c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fa:	4b67      	ldr	r3, [pc, #412]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f023 0207 	bic.w	r2, r3, #7
 8001102:	4965      	ldr	r1, [pc, #404]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	4313      	orrs	r3, r2
 8001108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800110a:	4b63      	ldr	r3, [pc, #396]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d001      	beq.n	800111c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e0b8      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d020      	beq.n	800116a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001134:	4b59      	ldr	r3, [pc, #356]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	4a58      	ldr	r2, [pc, #352]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800113e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800114c:	4b53      	ldr	r3, [pc, #332]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	4a52      	ldr	r2, [pc, #328]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001152:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001156:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001158:	4b50      	ldr	r3, [pc, #320]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	494d      	ldr	r1, [pc, #308]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	4313      	orrs	r3, r2
 8001168:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d040      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d107      	bne.n	800118e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	4b47      	ldr	r3, [pc, #284]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d115      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e07f      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b02      	cmp	r3, #2
 8001194:	d107      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001196:	4b41      	ldr	r3, [pc, #260]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d109      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e073      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a6:	4b3d      	ldr	r3, [pc, #244]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e06b      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011b6:	4b39      	ldr	r3, [pc, #228]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f023 0203 	bic.w	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4936      	ldr	r1, [pc, #216]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011c8:	f7ff fa2c 	bl	8000624 <HAL_GetTick>
 80011cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ce:	e00a      	b.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d0:	f7ff fa28 	bl	8000624 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	f241 3288 	movw	r2, #5000	; 0x1388
 80011de:	4293      	cmp	r3, r2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e053      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e6:	4b2d      	ldr	r3, [pc, #180]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 020c 	and.w	r2, r3, #12
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d1eb      	bne.n	80011d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d210      	bcs.n	8001228 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001206:	4b24      	ldr	r3, [pc, #144]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f023 0207 	bic.w	r2, r3, #7
 800120e:	4922      	ldr	r1, [pc, #136]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	4313      	orrs	r3, r2
 8001214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	429a      	cmp	r2, r3
 8001222:	d001      	beq.n	8001228 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e032      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d008      	beq.n	8001246 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001234:	4b19      	ldr	r3, [pc, #100]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	4916      	ldr	r1, [pc, #88]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	4313      	orrs	r3, r2
 8001244:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d009      	beq.n	8001266 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	490e      	ldr	r1, [pc, #56]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	4313      	orrs	r3, r2
 8001264:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001266:	f000 f821 	bl	80012ac <HAL_RCC_GetSysClockFreq>
 800126a:	4602      	mov	r2, r0
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	490a      	ldr	r1, [pc, #40]	; (80012a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001278:	5ccb      	ldrb	r3, [r1, r3]
 800127a:	fa22 f303 	lsr.w	r3, r2, r3
 800127e:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <HAL_RCC_ClockConfig+0x1cc>)
 8001280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_RCC_ClockConfig+0x1d0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f98a 	bl	80005a0 <HAL_InitTick>

  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40022000 	.word	0x40022000
 800129c:	40021000 	.word	0x40021000
 80012a0:	08002b9c 	.word	0x08002b9c
 80012a4:	20000014 	.word	0x20000014
 80012a8:	20000018 	.word	0x20000018

080012ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <HAL_RCC_GetSysClockFreq+0x94>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d002      	beq.n	80012dc <HAL_RCC_GetSysClockFreq+0x30>
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d003      	beq.n	80012e2 <HAL_RCC_GetSysClockFreq+0x36>
 80012da:	e027      	b.n	800132c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_RCC_GetSysClockFreq+0x98>)
 80012de:	613b      	str	r3, [r7, #16]
      break;
 80012e0:	e027      	b.n	8001332 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	0c9b      	lsrs	r3, r3, #18
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	4a17      	ldr	r2, [pc, #92]	; (8001348 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012ec:	5cd3      	ldrb	r3, [r2, r3]
 80012ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d010      	beq.n	800131c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_RCC_GetSysClockFreq+0x94>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	0c5b      	lsrs	r3, r3, #17
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	4a11      	ldr	r2, [pc, #68]	; (800134c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001306:	5cd3      	ldrb	r3, [r2, r3]
 8001308:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <HAL_RCC_GetSysClockFreq+0x98>)
 800130e:	fb02 f203 	mul.w	r2, r2, r3
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	fbb2 f3f3 	udiv	r3, r2, r3
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	e004      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	613b      	str	r3, [r7, #16]
      break;
 800132a:	e002      	b.n	8001332 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_RCC_GetSysClockFreq+0x98>)
 800132e:	613b      	str	r3, [r7, #16]
      break;
 8001330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001332:	693b      	ldr	r3, [r7, #16]
}
 8001334:	4618      	mov	r0, r3
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	007a1200 	.word	0x007a1200
 8001348:	08002bac 	.word	0x08002bac
 800134c:	08002bbc 	.word	0x08002bbc
 8001350:	003d0900 	.word	0x003d0900

08001354 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <RCC_Delay+0x34>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0a      	ldr	r2, [pc, #40]	; (800138c <RCC_Delay+0x38>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	0a5b      	lsrs	r3, r3, #9
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	fb02 f303 	mul.w	r3, r2, r3
 800136e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001370:	bf00      	nop
  }
  while (Delay --);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1e5a      	subs	r2, r3, #1
 8001376:	60fa      	str	r2, [r7, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f9      	bne.n	8001370 <RCC_Delay+0x1c>
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	20000014 	.word	0x20000014
 800138c:	10624dd3 	.word	0x10624dd3

08001390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e041      	b.n	8001426 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d106      	bne.n	80013bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff f85a 	bl	8000470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2202      	movs	r2, #2
 80013c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3304      	adds	r3, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	4610      	mov	r0, r2
 80013d0:	f000 fa56 	bl	8001880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b01      	cmp	r3, #1
 8001442:	d001      	beq.n	8001448 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e035      	b.n	80014b4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2202      	movs	r2, #2
 800144c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0201 	orr.w	r2, r2, #1
 800145e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a16      	ldr	r2, [pc, #88]	; (80014c0 <HAL_TIM_Base_Start_IT+0x90>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d009      	beq.n	800147e <HAL_TIM_Base_Start_IT+0x4e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001472:	d004      	beq.n	800147e <HAL_TIM_Base_Start_IT+0x4e>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <HAL_TIM_Base_Start_IT+0x94>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d111      	bne.n	80014a2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b06      	cmp	r3, #6
 800148e:	d010      	beq.n	80014b2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0201 	orr.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014a0:	e007      	b.n	80014b2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 0201 	orr.w	r2, r2, #1
 80014b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40012c00 	.word	0x40012c00
 80014c4:	40000400 	.word	0x40000400

080014c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d020      	beq.n	800152c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d01b      	beq.n	800152c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f06f 0202 	mvn.w	r2, #2
 80014fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f998 	bl	8001848 <HAL_TIM_IC_CaptureCallback>
 8001518:	e005      	b.n	8001526 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f98b 	bl	8001836 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f99a 	bl	800185a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	2b00      	cmp	r3, #0
 8001534:	d020      	beq.n	8001578 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	d01b      	beq.n	8001578 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f06f 0204 	mvn.w	r2, #4
 8001548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2202      	movs	r2, #2
 800154e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f972 	bl	8001848 <HAL_TIM_IC_CaptureCallback>
 8001564:	e005      	b.n	8001572 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f965 	bl	8001836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f974 	bl	800185a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d020      	beq.n	80015c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b00      	cmp	r3, #0
 800158a:	d01b      	beq.n	80015c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f06f 0208 	mvn.w	r2, #8
 8001594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2204      	movs	r2, #4
 800159a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f94c 	bl	8001848 <HAL_TIM_IC_CaptureCallback>
 80015b0:	e005      	b.n	80015be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f93f 	bl	8001836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 f94e 	bl	800185a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d020      	beq.n	8001610 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d01b      	beq.n	8001610 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f06f 0210 	mvn.w	r2, #16
 80015e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2208      	movs	r2, #8
 80015e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f926 	bl	8001848 <HAL_TIM_IC_CaptureCallback>
 80015fc:	e005      	b.n	800160a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f919 	bl	8001836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 f928 	bl	800185a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00c      	beq.n	8001634 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	2b00      	cmp	r3, #0
 8001622:	d007      	beq.n	8001634 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f06f 0201 	mvn.w	r2, #1
 800162c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7fe fed4 	bl	80003dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00c      	beq.n	8001658 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001644:	2b00      	cmp	r3, #0
 8001646:	d007      	beq.n	8001658 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fa6f 	bl	8001b36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00c      	beq.n	800167c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001668:	2b00      	cmp	r3, #0
 800166a:	d007      	beq.n	800167c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f8f8 	bl	800186c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	f003 0320 	and.w	r3, r3, #32
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00c      	beq.n	80016a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f003 0320 	and.w	r3, r3, #32
 800168c:	2b00      	cmp	r3, #0
 800168e:	d007      	beq.n	80016a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f06f 0220 	mvn.w	r2, #32
 8001698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fa42 	bl	8001b24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_TIM_ConfigClockSource+0x1c>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e0b4      	b.n	800182e <HAL_TIM_ConfigClockSource+0x186>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2202      	movs	r2, #2
 80016d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80016e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68ba      	ldr	r2, [r7, #8]
 80016f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016fc:	d03e      	beq.n	800177c <HAL_TIM_ConfigClockSource+0xd4>
 80016fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001702:	f200 8087 	bhi.w	8001814 <HAL_TIM_ConfigClockSource+0x16c>
 8001706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800170a:	f000 8086 	beq.w	800181a <HAL_TIM_ConfigClockSource+0x172>
 800170e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001712:	d87f      	bhi.n	8001814 <HAL_TIM_ConfigClockSource+0x16c>
 8001714:	2b70      	cmp	r3, #112	; 0x70
 8001716:	d01a      	beq.n	800174e <HAL_TIM_ConfigClockSource+0xa6>
 8001718:	2b70      	cmp	r3, #112	; 0x70
 800171a:	d87b      	bhi.n	8001814 <HAL_TIM_ConfigClockSource+0x16c>
 800171c:	2b60      	cmp	r3, #96	; 0x60
 800171e:	d050      	beq.n	80017c2 <HAL_TIM_ConfigClockSource+0x11a>
 8001720:	2b60      	cmp	r3, #96	; 0x60
 8001722:	d877      	bhi.n	8001814 <HAL_TIM_ConfigClockSource+0x16c>
 8001724:	2b50      	cmp	r3, #80	; 0x50
 8001726:	d03c      	beq.n	80017a2 <HAL_TIM_ConfigClockSource+0xfa>
 8001728:	2b50      	cmp	r3, #80	; 0x50
 800172a:	d873      	bhi.n	8001814 <HAL_TIM_ConfigClockSource+0x16c>
 800172c:	2b40      	cmp	r3, #64	; 0x40
 800172e:	d058      	beq.n	80017e2 <HAL_TIM_ConfigClockSource+0x13a>
 8001730:	2b40      	cmp	r3, #64	; 0x40
 8001732:	d86f      	bhi.n	8001814 <HAL_TIM_ConfigClockSource+0x16c>
 8001734:	2b30      	cmp	r3, #48	; 0x30
 8001736:	d064      	beq.n	8001802 <HAL_TIM_ConfigClockSource+0x15a>
 8001738:	2b30      	cmp	r3, #48	; 0x30
 800173a:	d86b      	bhi.n	8001814 <HAL_TIM_ConfigClockSource+0x16c>
 800173c:	2b20      	cmp	r3, #32
 800173e:	d060      	beq.n	8001802 <HAL_TIM_ConfigClockSource+0x15a>
 8001740:	2b20      	cmp	r3, #32
 8001742:	d867      	bhi.n	8001814 <HAL_TIM_ConfigClockSource+0x16c>
 8001744:	2b00      	cmp	r3, #0
 8001746:	d05c      	beq.n	8001802 <HAL_TIM_ConfigClockSource+0x15a>
 8001748:	2b10      	cmp	r3, #16
 800174a:	d05a      	beq.n	8001802 <HAL_TIM_ConfigClockSource+0x15a>
 800174c:	e062      	b.n	8001814 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	6899      	ldr	r1, [r3, #8]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f000 f96a 	bl	8001a36 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001770:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	609a      	str	r2, [r3, #8]
      break;
 800177a:	e04f      	b.n	800181c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	6899      	ldr	r1, [r3, #8]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f000 f953 	bl	8001a36 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800179e:	609a      	str	r2, [r3, #8]
      break;
 80017a0:	e03c      	b.n	800181c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	6859      	ldr	r1, [r3, #4]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	461a      	mov	r2, r3
 80017b0:	f000 f8ca 	bl	8001948 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2150      	movs	r1, #80	; 0x50
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f921 	bl	8001a02 <TIM_ITRx_SetConfig>
      break;
 80017c0:	e02c      	b.n	800181c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	6859      	ldr	r1, [r3, #4]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	461a      	mov	r2, r3
 80017d0:	f000 f8e8 	bl	80019a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2160      	movs	r1, #96	; 0x60
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f911 	bl	8001a02 <TIM_ITRx_SetConfig>
      break;
 80017e0:	e01c      	b.n	800181c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	6859      	ldr	r1, [r3, #4]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	461a      	mov	r2, r3
 80017f0:	f000 f8aa 	bl	8001948 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2140      	movs	r1, #64	; 0x40
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f901 	bl	8001a02 <TIM_ITRx_SetConfig>
      break;
 8001800:	e00c      	b.n	800181c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4619      	mov	r1, r3
 800180c:	4610      	mov	r0, r2
 800180e:	f000 f8f8 	bl	8001a02 <TIM_ITRx_SetConfig>
      break;
 8001812:	e003      	b.n	800181c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
      break;
 8001818:	e000      	b.n	800181c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800181a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800182c:	7bfb      	ldrb	r3, [r7, #15]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
	...

08001880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a2b      	ldr	r2, [pc, #172]	; (8001940 <TIM_Base_SetConfig+0xc0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d007      	beq.n	80018a8 <TIM_Base_SetConfig+0x28>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800189e:	d003      	beq.n	80018a8 <TIM_Base_SetConfig+0x28>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a28      	ldr	r2, [pc, #160]	; (8001944 <TIM_Base_SetConfig+0xc4>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d108      	bne.n	80018ba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a20      	ldr	r2, [pc, #128]	; (8001940 <TIM_Base_SetConfig+0xc0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d007      	beq.n	80018d2 <TIM_Base_SetConfig+0x52>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c8:	d003      	beq.n	80018d2 <TIM_Base_SetConfig+0x52>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a1d      	ldr	r2, [pc, #116]	; (8001944 <TIM_Base_SetConfig+0xc4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d108      	bne.n	80018e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <TIM_Base_SetConfig+0xc0>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d103      	bne.n	8001918 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	f023 0201 	bic.w	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	611a      	str	r2, [r3, #16]
  }
}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	40012c00 	.word	0x40012c00
 8001944:	40000400 	.word	0x40000400

08001948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	f023 0201 	bic.w	r2, r3, #1
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f023 030a 	bic.w	r3, r3, #10
 8001984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4313      	orrs	r3, r2
 800198c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	621a      	str	r2, [r3, #32]
}
 800199a:	bf00      	nop
 800199c:	371c      	adds	r7, #28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	f023 0210 	bic.w	r2, r3, #16
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80019ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	031b      	lsls	r3, r3, #12
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80019e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	011b      	lsls	r3, r3, #4
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	621a      	str	r2, [r3, #32]
}
 80019f8:	bf00      	nop
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b085      	sub	sp, #20
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	f043 0307 	orr.w	r3, r3, #7
 8001a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	609a      	str	r2, [r3, #8]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr

08001a36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b087      	sub	sp, #28
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	021a      	lsls	r2, r3, #8
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	609a      	str	r2, [r3, #8]
}
 8001a6a:	bf00      	nop
 8001a6c:	371c      	adds	r7, #28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e041      	b.n	8001b10 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ab2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d009      	beq.n	8001ae4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad8:	d004      	beq.n	8001ae4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a10      	ldr	r2, [pc, #64]	; (8001b20 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d10c      	bne.n	8001afe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001aea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40012c00 	.word	0x40012c00
 8001b20:	40000400 	.word	0x40000400

08001b24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <DISPLAY_LED_7_SEGMENT>:
 *  Created on: Sep 2, 2024
 *      Author: thuyh
 */
#include "LED7_SEGMENT.h"
void DISPLAY_LED_7_SEGMENT(GPIO_TypeDef* GPIOx,uint16_t LED_7_0,uint16_t LED_7_1,uint16_t LED_7_2,uint16_t LED_7_3,uint16_t LED_7_4
		,uint16_t LED_7_5,uint16_t LED_7_6 ,uint8_t digit){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	4608      	mov	r0, r1
 8001b52:	4611      	mov	r1, r2
 8001b54:	461a      	mov	r2, r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	817b      	strh	r3, [r7, #10]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	813b      	strh	r3, [r7, #8]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	80fb      	strh	r3, [r7, #6]
		switch(digit){
 8001b62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b66:	2b09      	cmp	r3, #9
 8001b68:	f200 81c6 	bhi.w	8001ef8 <DISPLAY_LED_7_SEGMENT+0x3b0>
 8001b6c:	a201      	add	r2, pc, #4	; (adr r2, 8001b74 <DISPLAY_LED_7_SEGMENT+0x2c>)
 8001b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b72:	bf00      	nop
 8001b74:	08001b9d 	.word	0x08001b9d
 8001b78:	08001bf3 	.word	0x08001bf3
 8001b7c:	08001c49 	.word	0x08001c49
 8001b80:	08001c9f 	.word	0x08001c9f
 8001b84:	08001cf5 	.word	0x08001cf5
 8001b88:	08001d4b 	.word	0x08001d4b
 8001b8c:	08001da1 	.word	0x08001da1
 8001b90:	08001df7 	.word	0x08001df7
 8001b94:	08001e4d 	.word	0x08001e4d
 8001b98:	08001ea3 	.word	0x08001ea3
			case 0:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001b9c:	897b      	ldrh	r3, [r7, #10]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f7fe ffe7 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001ba8:	893b      	ldrh	r3, [r7, #8]
 8001baa:	2200      	movs	r2, #0
 8001bac:	4619      	mov	r1, r3
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f7fe ffe1 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	4619      	mov	r1, r3
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f7fe ffdb 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001bc0:	8b3b      	ldrh	r3, [r7, #24]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f7fe ffd5 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, RESET);
 8001bcc:	8bbb      	ldrh	r3, [r7, #28]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f7fe ffcf 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8001bd8:	8c3b      	ldrh	r3, [r7, #32]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	4619      	mov	r1, r3
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f7fe ffc9 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, SET);
 8001be4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001be6:	2201      	movs	r2, #1
 8001be8:	4619      	mov	r1, r3
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f7fe ffc3 	bl	8000b76 <HAL_GPIO_WritePin>
					break;
 8001bf0:	e1ad      	b.n	8001f4e <DISPLAY_LED_7_SEGMENT+0x406>
			case 1:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, SET);
 8001bf2:	897b      	ldrh	r3, [r7, #10]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f7fe ffbc 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001bfe:	893b      	ldrh	r3, [r7, #8]
 8001c00:	2200      	movs	r2, #0
 8001c02:	4619      	mov	r1, r3
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f7fe ffb6 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	4619      	mov	r1, r3
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f7fe ffb0 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, SET);
 8001c16:	8b3b      	ldrh	r3, [r7, #24]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f7fe ffaa 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001c22:	8bbb      	ldrh	r3, [r7, #28]
 8001c24:	2201      	movs	r2, #1
 8001c26:	4619      	mov	r1, r3
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f7fe ffa4 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 8001c2e:	8c3b      	ldrh	r3, [r7, #32]
 8001c30:	2201      	movs	r2, #1
 8001c32:	4619      	mov	r1, r3
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f7fe ff9e 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, SET);
 8001c3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4619      	mov	r1, r3
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f7fe ff98 	bl	8000b76 <HAL_GPIO_WritePin>
					break;
 8001c46:	e182      	b.n	8001f4e <DISPLAY_LED_7_SEGMENT+0x406>
			case 2:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001c48:	897b      	ldrh	r3, [r7, #10]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f7fe ff91 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001c54:	893b      	ldrh	r3, [r7, #8]
 8001c56:	2200      	movs	r2, #0
 8001c58:	4619      	mov	r1, r3
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f7fe ff8b 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, SET);
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	2201      	movs	r2, #1
 8001c64:	4619      	mov	r1, r3
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f7fe ff85 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001c6c:	8b3b      	ldrh	r3, [r7, #24]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	4619      	mov	r1, r3
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f7fe ff7f 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, RESET);
 8001c78:	8bbb      	ldrh	r3, [r7, #28]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f7fe ff79 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 8001c84:	8c3b      	ldrh	r3, [r7, #32]
 8001c86:	2201      	movs	r2, #1
 8001c88:	4619      	mov	r1, r3
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f7fe ff73 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001c90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c92:	2200      	movs	r2, #0
 8001c94:	4619      	mov	r1, r3
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f7fe ff6d 	bl	8000b76 <HAL_GPIO_WritePin>
				    break;
 8001c9c:	e157      	b.n	8001f4e <DISPLAY_LED_7_SEGMENT+0x406>
			case 3:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001c9e:	897b      	ldrh	r3, [r7, #10]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f7fe ff66 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001caa:	893b      	ldrh	r3, [r7, #8]
 8001cac:	2200      	movs	r2, #0
 8001cae:	4619      	mov	r1, r3
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f7fe ff60 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	4619      	mov	r1, r3
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f7fe ff5a 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001cc2:	8b3b      	ldrh	r3, [r7, #24]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f7fe ff54 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001cce:	8bbb      	ldrh	r3, [r7, #28]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f7fe ff4e 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 8001cda:	8c3b      	ldrh	r3, [r7, #32]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4619      	mov	r1, r3
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f7fe ff48 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ce8:	2200      	movs	r2, #0
 8001cea:	4619      	mov	r1, r3
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7fe ff42 	bl	8000b76 <HAL_GPIO_WritePin>
					break;
 8001cf2:	e12c      	b.n	8001f4e <DISPLAY_LED_7_SEGMENT+0x406>
			case 4:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, SET);
 8001cf4:	897b      	ldrh	r3, [r7, #10]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f7fe ff3b 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001d00:	893b      	ldrh	r3, [r7, #8]
 8001d02:	2200      	movs	r2, #0
 8001d04:	4619      	mov	r1, r3
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f7fe ff35 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	4619      	mov	r1, r3
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f7fe ff2f 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, SET);
 8001d18:	8b3b      	ldrh	r3, [r7, #24]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f7fe ff29 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001d24:	8bbb      	ldrh	r3, [r7, #28]
 8001d26:	2201      	movs	r2, #1
 8001d28:	4619      	mov	r1, r3
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f7fe ff23 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8001d30:	8c3b      	ldrh	r3, [r7, #32]
 8001d32:	2200      	movs	r2, #0
 8001d34:	4619      	mov	r1, r3
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f7fe ff1d 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001d3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d3e:	2200      	movs	r2, #0
 8001d40:	4619      	mov	r1, r3
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f7fe ff17 	bl	8000b76 <HAL_GPIO_WritePin>
					break;
 8001d48:	e101      	b.n	8001f4e <DISPLAY_LED_7_SEGMENT+0x406>
			case 5:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001d4a:	897b      	ldrh	r3, [r7, #10]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	4619      	mov	r1, r3
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f7fe ff10 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, SET);
 8001d56:	893b      	ldrh	r3, [r7, #8]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7fe ff0a 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	2200      	movs	r2, #0
 8001d66:	4619      	mov	r1, r3
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f7fe ff04 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001d6e:	8b3b      	ldrh	r3, [r7, #24]
 8001d70:	2200      	movs	r2, #0
 8001d72:	4619      	mov	r1, r3
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f7fe fefe 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001d7a:	8bbb      	ldrh	r3, [r7, #28]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	4619      	mov	r1, r3
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f7fe fef8 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8001d86:	8c3b      	ldrh	r3, [r7, #32]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7fe fef2 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001d92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d94:	2200      	movs	r2, #0
 8001d96:	4619      	mov	r1, r3
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f7fe feec 	bl	8000b76 <HAL_GPIO_WritePin>
					break;
 8001d9e:	e0d6      	b.n	8001f4e <DISPLAY_LED_7_SEGMENT+0x406>
			case 6:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001da0:	897b      	ldrh	r3, [r7, #10]
 8001da2:	2200      	movs	r2, #0
 8001da4:	4619      	mov	r1, r3
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f7fe fee5 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, SET);
 8001dac:	893b      	ldrh	r3, [r7, #8]
 8001dae:	2201      	movs	r2, #1
 8001db0:	4619      	mov	r1, r3
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f7fe fedf 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f7fe fed9 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001dc4:	8b3b      	ldrh	r3, [r7, #24]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	4619      	mov	r1, r3
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7fe fed3 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, RESET);
 8001dd0:	8bbb      	ldrh	r3, [r7, #28]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f7fe fecd 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8001ddc:	8c3b      	ldrh	r3, [r7, #32]
 8001dde:	2200      	movs	r2, #0
 8001de0:	4619      	mov	r1, r3
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f7fe fec7 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001de8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dea:	2200      	movs	r2, #0
 8001dec:	4619      	mov	r1, r3
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f7fe fec1 	bl	8000b76 <HAL_GPIO_WritePin>
					break;
 8001df4:	e0ab      	b.n	8001f4e <DISPLAY_LED_7_SEGMENT+0x406>
			case 7:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001df6:	897b      	ldrh	r3, [r7, #10]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f7fe feba 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001e02:	893b      	ldrh	r3, [r7, #8]
 8001e04:	2200      	movs	r2, #0
 8001e06:	4619      	mov	r1, r3
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f7fe feb4 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	2200      	movs	r2, #0
 8001e12:	4619      	mov	r1, r3
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f7fe feae 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, SET);
 8001e1a:	8b3b      	ldrh	r3, [r7, #24]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4619      	mov	r1, r3
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7fe fea8 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001e26:	8bbb      	ldrh	r3, [r7, #28]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f7fe fea2 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 8001e32:	8c3b      	ldrh	r3, [r7, #32]
 8001e34:	2201      	movs	r2, #1
 8001e36:	4619      	mov	r1, r3
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f7fe fe9c 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, SET);
 8001e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e40:	2201      	movs	r2, #1
 8001e42:	4619      	mov	r1, r3
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f7fe fe96 	bl	8000b76 <HAL_GPIO_WritePin>
					break;
 8001e4a:	e080      	b.n	8001f4e <DISPLAY_LED_7_SEGMENT+0x406>
			case 8:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001e4c:	897b      	ldrh	r3, [r7, #10]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	4619      	mov	r1, r3
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f7fe fe8f 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001e58:	893b      	ldrh	r3, [r7, #8]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7fe fe89 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	2200      	movs	r2, #0
 8001e68:	4619      	mov	r1, r3
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7fe fe83 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001e70:	8b3b      	ldrh	r3, [r7, #24]
 8001e72:	2200      	movs	r2, #0
 8001e74:	4619      	mov	r1, r3
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f7fe fe7d 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, RESET);
 8001e7c:	8bbb      	ldrh	r3, [r7, #28]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	4619      	mov	r1, r3
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f7fe fe77 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8001e88:	8c3b      	ldrh	r3, [r7, #32]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f7fe fe71 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001e94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e96:	2200      	movs	r2, #0
 8001e98:	4619      	mov	r1, r3
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f7fe fe6b 	bl	8000b76 <HAL_GPIO_WritePin>
					break;
 8001ea0:	e055      	b.n	8001f4e <DISPLAY_LED_7_SEGMENT+0x406>
			case 9:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001ea2:	897b      	ldrh	r3, [r7, #10]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f7fe fe64 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001eae:	893b      	ldrh	r3, [r7, #8]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f7fe fe5e 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f7fe fe58 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001ec6:	8b3b      	ldrh	r3, [r7, #24]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	4619      	mov	r1, r3
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f7fe fe52 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001ed2:	8bbb      	ldrh	r3, [r7, #28]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f7fe fe4c 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8001ede:	8c3b      	ldrh	r3, [r7, #32]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f7fe fe46 	bl	8000b76 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8001eea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001eec:	2200      	movs	r2, #0
 8001eee:	4619      	mov	r1, r3
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f7fe fe40 	bl	8000b76 <HAL_GPIO_WritePin>
					break;
 8001ef6:	e02a      	b.n	8001f4e <DISPLAY_LED_7_SEGMENT+0x406>
			default:
								HAL_GPIO_WritePin(GPIOx, LED_7_0, SET);
 8001ef8:	897b      	ldrh	r3, [r7, #10]
 8001efa:	2201      	movs	r2, #1
 8001efc:	4619      	mov	r1, r3
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f7fe fe39 	bl	8000b76 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_1, SET);
 8001f04:	893b      	ldrh	r3, [r7, #8]
 8001f06:	2201      	movs	r2, #1
 8001f08:	4619      	mov	r1, r3
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f7fe fe33 	bl	8000b76 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_2, SET);
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	2201      	movs	r2, #1
 8001f14:	4619      	mov	r1, r3
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f7fe fe2d 	bl	8000b76 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_3, SET);
 8001f1c:	8b3b      	ldrh	r3, [r7, #24]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	4619      	mov	r1, r3
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f7fe fe27 	bl	8000b76 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001f28:	8bbb      	ldrh	r3, [r7, #28]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f7fe fe21 	bl	8000b76 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 8001f34:	8c3b      	ldrh	r3, [r7, #32]
 8001f36:	2201      	movs	r2, #1
 8001f38:	4619      	mov	r1, r3
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f7fe fe1b 	bl	8000b76 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_6, SET);
 8001f40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f42:	2201      	movs	r2, #1
 8001f44:	4619      	mov	r1, r3
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f7fe fe15 	bl	8000b76 <HAL_GPIO_WritePin>
				break;
 8001f4c:	bf00      	nop
			}

}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop

08001f58 <traffic_double_display>:
uint8_t redred ;
int time_red_select ;
int time_green_select;
int time_yellow_select = 0;
void traffic_double_display(GPIO_TypeDef * GPIOx1, uint16_t LED_RED1, uint16_t LED_YELLOW1, uint16_t LED_GREEN1,
                            GPIO_TypeDef * GPIOx2, uint16_t LED_RED2, uint16_t LED_YELLOW2, uint16_t LED_GREEN2, int status) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	4608      	mov	r0, r1
 8001f62:	4611      	mov	r1, r2
 8001f64:	461a      	mov	r2, r3
 8001f66:	4603      	mov	r3, r0
 8001f68:	817b      	strh	r3, [r7, #10]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	813b      	strh	r3, [r7, #8]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	80fb      	strh	r3, [r7, #6]
 8001f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f74:	3b01      	subs	r3, #1
 8001f76:	2b0e      	cmp	r3, #14
 8001f78:	f200 8121 	bhi.w	80021be <traffic_double_display+0x266>
 8001f7c:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <traffic_double_display+0x2c>)
 8001f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f82:	bf00      	nop
 8001f84:	08002049 	.word	0x08002049
 8001f88:	08001fc1 	.word	0x08001fc1
 8001f8c:	08001fe3 	.word	0x08001fe3
 8001f90:	08002005 	.word	0x08002005
 8001f94:	08002027 	.word	0x08002027
 8001f98:	08002093 	.word	0x08002093
 8001f9c:	080021bf 	.word	0x080021bf
 8001fa0:	080020b5 	.word	0x080020b5
 8001fa4:	0800210f 	.word	0x0800210f
 8001fa8:	08002167 	.word	0x08002167
 8001fac:	080021bf 	.word	0x080021bf
 8001fb0:	08001fc1 	.word	0x08001fc1
 8001fb4:	08001fe3 	.word	0x08001fe3
 8001fb8:	08002005 	.word	0x08002005
 8001fbc:	08002027 	.word	0x08002027
    switch(status) {
        case GREEN_RED:
        case MAN_GREEN_RED:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, GREEN);
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	893a      	ldrh	r2, [r7, #8]
 8001fc4:	8979      	ldrh	r1, [r7, #10]
 8001fc6:	2002      	movs	r0, #2
 8001fc8:	9000      	str	r0, [sp, #0]
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 f928 	bl	8002220 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
 8001fd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fd2:	8c3a      	ldrh	r2, [r7, #32]
 8001fd4:	8bb9      	ldrh	r1, [r7, #28]
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	9000      	str	r0, [sp, #0]
 8001fda:	69b8      	ldr	r0, [r7, #24]
 8001fdc:	f000 f920 	bl	8002220 <traffic_display>
            break;
 8001fe0:	e117      	b.n	8002212 <traffic_double_display+0x2ba>
        case YELLOW_RED:
        case MAN_YELLOW_RED:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, YELLOW);
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	893a      	ldrh	r2, [r7, #8]
 8001fe6:	8979      	ldrh	r1, [r7, #10]
 8001fe8:	2001      	movs	r0, #1
 8001fea:	9000      	str	r0, [sp, #0]
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 f917 	bl	8002220 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
 8001ff2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ff4:	8c3a      	ldrh	r2, [r7, #32]
 8001ff6:	8bb9      	ldrh	r1, [r7, #28]
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	9000      	str	r0, [sp, #0]
 8001ffc:	69b8      	ldr	r0, [r7, #24]
 8001ffe:	f000 f90f 	bl	8002220 <traffic_display>
            break;
 8002002:	e106      	b.n	8002212 <traffic_double_display+0x2ba>
        case RED_GREEN:
        case MAN_RED_GREEN:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	893a      	ldrh	r2, [r7, #8]
 8002008:	8979      	ldrh	r1, [r7, #10]
 800200a:	2000      	movs	r0, #0
 800200c:	9000      	str	r0, [sp, #0]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f906 	bl	8002220 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, GREEN);
 8002014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002016:	8c3a      	ldrh	r2, [r7, #32]
 8002018:	8bb9      	ldrh	r1, [r7, #28]
 800201a:	2002      	movs	r0, #2
 800201c:	9000      	str	r0, [sp, #0]
 800201e:	69b8      	ldr	r0, [r7, #24]
 8002020:	f000 f8fe 	bl	8002220 <traffic_display>
            break;
 8002024:	e0f5      	b.n	8002212 <traffic_double_display+0x2ba>
        case RED_YELLOW:
        case MAN_RED_YELLOW:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	893a      	ldrh	r2, [r7, #8]
 800202a:	8979      	ldrh	r1, [r7, #10]
 800202c:	2000      	movs	r0, #0
 800202e:	9000      	str	r0, [sp, #0]
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f8f5 	bl	8002220 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, YELLOW);
 8002036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002038:	8c3a      	ldrh	r2, [r7, #32]
 800203a:	8bb9      	ldrh	r1, [r7, #28]
 800203c:	2001      	movs	r0, #1
 800203e:	9000      	str	r0, [sp, #0]
 8002040:	69b8      	ldr	r0, [r7, #24]
 8002042:	f000 f8ed 	bl	8002220 <traffic_display>
            break;
 8002046:	e0e4      	b.n	8002212 <traffic_double_display+0x2ba>
        case INIT:
            HAL_GPIO_WritePin(GPIOx1, LED_RED1, RESET);
 8002048:	897b      	ldrh	r3, [r7, #10]
 800204a:	2200      	movs	r2, #0
 800204c:	4619      	mov	r1, r3
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f7fe fd91 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_YELLOW1, RESET);
 8002054:	893b      	ldrh	r3, [r7, #8]
 8002056:	2200      	movs	r2, #0
 8002058:	4619      	mov	r1, r3
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f7fe fd8b 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_GREEN1, RESET);
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	2200      	movs	r2, #0
 8002064:	4619      	mov	r1, r3
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f7fe fd85 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_RED2, RESET);
 800206c:	8bbb      	ldrh	r3, [r7, #28]
 800206e:	2200      	movs	r2, #0
 8002070:	4619      	mov	r1, r3
 8002072:	69b8      	ldr	r0, [r7, #24]
 8002074:	f7fe fd7f 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_YELLOW2, RESET);
 8002078:	8c3b      	ldrh	r3, [r7, #32]
 800207a:	2200      	movs	r2, #0
 800207c:	4619      	mov	r1, r3
 800207e:	69b8      	ldr	r0, [r7, #24]
 8002080:	f7fe fd79 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_GREEN2, RESET);
 8002084:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002086:	2200      	movs	r2, #0
 8002088:	4619      	mov	r1, r3
 800208a:	69b8      	ldr	r0, [r7, #24]
 800208c:	f7fe fd73 	bl	8000b76 <HAL_GPIO_WritePin>
            break;
 8002090:	e0bf      	b.n	8002212 <traffic_double_display+0x2ba>
        case RED_RED1:
    //	    case RED_RED2:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	893a      	ldrh	r2, [r7, #8]
 8002096:	8979      	ldrh	r1, [r7, #10]
 8002098:	2000      	movs	r0, #0
 800209a:	9000      	str	r0, [sp, #0]
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 f8bf 	bl	8002220 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
 80020a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020a4:	8c3a      	ldrh	r2, [r7, #32]
 80020a6:	8bb9      	ldrh	r1, [r7, #28]
 80020a8:	2000      	movs	r0, #0
 80020aa:	9000      	str	r0, [sp, #0]
 80020ac:	69b8      	ldr	r0, [r7, #24]
 80020ae:	f000 f8b7 	bl	8002220 <traffic_display>
            break;
 80020b2:	e0ae      	b.n	8002212 <traffic_double_display+0x2ba>
        case SET_TIME_RED:
            HAL_GPIO_WritePin(GPIOx1, LED_YELLOW1, SET);
 80020b4:	893b      	ldrh	r3, [r7, #8]
 80020b6:	2201      	movs	r2, #1
 80020b8:	4619      	mov	r1, r3
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f7fe fd5b 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_GREEN1, SET);
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	2201      	movs	r2, #1
 80020c4:	4619      	mov	r1, r3
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f7fe fd55 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_YELLOW2, SET);
 80020cc:	8c3b      	ldrh	r3, [r7, #32]
 80020ce:	2201      	movs	r2, #1
 80020d0:	4619      	mov	r1, r3
 80020d2:	69b8      	ldr	r0, [r7, #24]
 80020d4:	f7fe fd4f 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_GREEN2, SET);
 80020d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020da:	2201      	movs	r2, #1
 80020dc:	4619      	mov	r1, r3
 80020de:	69b8      	ldr	r0, [r7, #24]
 80020e0:	f7fe fd49 	bl	8000b76 <HAL_GPIO_WritePin>
        	if(timer1_flag[2] == 1){
 80020e4:	4b4d      	ldr	r3, [pc, #308]	; (800221c <traffic_double_display+0x2c4>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	f040 808d 	bne.w	8002208 <traffic_double_display+0x2b0>
        		HAL_GPIO_TogglePin(GPIOx1, LED_RED1);
 80020ee:	897b      	ldrh	r3, [r7, #10]
 80020f0:	4619      	mov	r1, r3
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f7fe fd57 	bl	8000ba6 <HAL_GPIO_TogglePin>
        		HAL_GPIO_TogglePin(GPIOx2, LED_RED2);
 80020f8:	8bbb      	ldrh	r3, [r7, #28]
 80020fa:	4619      	mov	r1, r3
 80020fc:	69b8      	ldr	r0, [r7, #24]
 80020fe:	f7fe fd52 	bl	8000ba6 <HAL_GPIO_TogglePin>
        		setTimer1(2, 500);
 8002102:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002106:	2002      	movs	r0, #2
 8002108:	f000 fcae 	bl	8002a68 <setTimer1>
        	}
            break;
 800210c:	e07c      	b.n	8002208 <traffic_double_display+0x2b0>

        case SET_TIME_YELLOW:
            HAL_GPIO_WritePin(GPIOx1, LED_RED1, SET);
 800210e:	897b      	ldrh	r3, [r7, #10]
 8002110:	2201      	movs	r2, #1
 8002112:	4619      	mov	r1, r3
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f7fe fd2e 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_GREEN1, SET);
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	2201      	movs	r2, #1
 800211e:	4619      	mov	r1, r3
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f7fe fd28 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_RED2, SET);
 8002126:	8bbb      	ldrh	r3, [r7, #28]
 8002128:	2201      	movs	r2, #1
 800212a:	4619      	mov	r1, r3
 800212c:	69b8      	ldr	r0, [r7, #24]
 800212e:	f7fe fd22 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_GREEN2, SET);
 8002132:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002134:	2201      	movs	r2, #1
 8002136:	4619      	mov	r1, r3
 8002138:	69b8      	ldr	r0, [r7, #24]
 800213a:	f7fe fd1c 	bl	8000b76 <HAL_GPIO_WritePin>
        	if(timer1_flag[2] == 1){
 800213e:	4b37      	ldr	r3, [pc, #220]	; (800221c <traffic_double_display+0x2c4>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d162      	bne.n	800220c <traffic_double_display+0x2b4>
        		HAL_GPIO_TogglePin(GPIOx1, LED_YELLOW1);
 8002146:	893b      	ldrh	r3, [r7, #8]
 8002148:	4619      	mov	r1, r3
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f7fe fd2b 	bl	8000ba6 <HAL_GPIO_TogglePin>
        		HAL_GPIO_TogglePin(GPIOx2, LED_YELLOW2);
 8002150:	8c3b      	ldrh	r3, [r7, #32]
 8002152:	4619      	mov	r1, r3
 8002154:	69b8      	ldr	r0, [r7, #24]
 8002156:	f7fe fd26 	bl	8000ba6 <HAL_GPIO_TogglePin>
        		setTimer1(2, 500);
 800215a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800215e:	2002      	movs	r0, #2
 8002160:	f000 fc82 	bl	8002a68 <setTimer1>
        	}
            break;
 8002164:	e052      	b.n	800220c <traffic_double_display+0x2b4>

        case SET_TIME_GREEN:
            HAL_GPIO_WritePin(GPIOx1, LED_RED1, SET);
 8002166:	897b      	ldrh	r3, [r7, #10]
 8002168:	2201      	movs	r2, #1
 800216a:	4619      	mov	r1, r3
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f7fe fd02 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_YELLOW1, SET);
 8002172:	893b      	ldrh	r3, [r7, #8]
 8002174:	2201      	movs	r2, #1
 8002176:	4619      	mov	r1, r3
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f7fe fcfc 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_RED2, SET);
 800217e:	8bbb      	ldrh	r3, [r7, #28]
 8002180:	2201      	movs	r2, #1
 8002182:	4619      	mov	r1, r3
 8002184:	69b8      	ldr	r0, [r7, #24]
 8002186:	f7fe fcf6 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_YELLOW2, SET);
 800218a:	8c3b      	ldrh	r3, [r7, #32]
 800218c:	2201      	movs	r2, #1
 800218e:	4619      	mov	r1, r3
 8002190:	69b8      	ldr	r0, [r7, #24]
 8002192:	f7fe fcf0 	bl	8000b76 <HAL_GPIO_WritePin>
        	if(timer1_flag[2] == 1){
 8002196:	4b21      	ldr	r3, [pc, #132]	; (800221c <traffic_double_display+0x2c4>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d138      	bne.n	8002210 <traffic_double_display+0x2b8>
        		HAL_GPIO_TogglePin(GPIOx1, LED_GREEN1);
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	4619      	mov	r1, r3
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7fe fcff 	bl	8000ba6 <HAL_GPIO_TogglePin>
        		HAL_GPIO_TogglePin(GPIOx2, LED_GREEN2);
 80021a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021aa:	4619      	mov	r1, r3
 80021ac:	69b8      	ldr	r0, [r7, #24]
 80021ae:	f7fe fcfa 	bl	8000ba6 <HAL_GPIO_TogglePin>
        		setTimer1(2, 500);
 80021b2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80021b6:	2002      	movs	r0, #2
 80021b8:	f000 fc56 	bl	8002a68 <setTimer1>
        	}
            break;
 80021bc:	e028      	b.n	8002210 <traffic_double_display+0x2b8>
        default:
            HAL_GPIO_WritePin(GPIOx1, LED_RED1, GPIO_PIN_SET);
 80021be:	897b      	ldrh	r3, [r7, #10]
 80021c0:	2201      	movs	r2, #1
 80021c2:	4619      	mov	r1, r3
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f7fe fcd6 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_YELLOW1, GPIO_PIN_SET);
 80021ca:	893b      	ldrh	r3, [r7, #8]
 80021cc:	2201      	movs	r2, #1
 80021ce:	4619      	mov	r1, r3
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f7fe fcd0 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_GREEN1, GPIO_PIN_SET);
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	2201      	movs	r2, #1
 80021da:	4619      	mov	r1, r3
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f7fe fcca 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_RED2, GPIO_PIN_SET);
 80021e2:	8bbb      	ldrh	r3, [r7, #28]
 80021e4:	2201      	movs	r2, #1
 80021e6:	4619      	mov	r1, r3
 80021e8:	69b8      	ldr	r0, [r7, #24]
 80021ea:	f7fe fcc4 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_YELLOW2, GPIO_PIN_SET);
 80021ee:	8c3b      	ldrh	r3, [r7, #32]
 80021f0:	2201      	movs	r2, #1
 80021f2:	4619      	mov	r1, r3
 80021f4:	69b8      	ldr	r0, [r7, #24]
 80021f6:	f7fe fcbe 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_GREEN2, GPIO_PIN_SET);
 80021fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021fc:	2201      	movs	r2, #1
 80021fe:	4619      	mov	r1, r3
 8002200:	69b8      	ldr	r0, [r7, #24]
 8002202:	f7fe fcb8 	bl	8000b76 <HAL_GPIO_WritePin>
        	break;
 8002206:	e004      	b.n	8002212 <traffic_double_display+0x2ba>
            break;
 8002208:	bf00      	nop
 800220a:	e002      	b.n	8002212 <traffic_double_display+0x2ba>
            break;
 800220c:	bf00      	nop
 800220e:	e000      	b.n	8002212 <traffic_double_display+0x2ba>
            break;
 8002210:	bf00      	nop
    }
}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200000d4 	.word	0x200000d4

08002220 <traffic_display>:
void traffic_display(GPIO_TypeDef * GPIOx, uint16_t LED_RED, uint16_t LED_YELLOW, uint16_t LED_GREEN, State type) {
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	4608      	mov	r0, r1
 800222a:	4611      	mov	r1, r2
 800222c:	461a      	mov	r2, r3
 800222e:	4603      	mov	r3, r0
 8002230:	817b      	strh	r3, [r7, #10]
 8002232:	460b      	mov	r3, r1
 8002234:	813b      	strh	r3, [r7, #8]
 8002236:	4613      	mov	r3, r2
 8002238:	80fb      	strh	r3, [r7, #6]
    switch(type) {
 800223a:	7e3b      	ldrb	r3, [r7, #24]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d02c      	beq.n	800229a <traffic_display+0x7a>
 8002240:	2b02      	cmp	r3, #2
 8002242:	dc3d      	bgt.n	80022c0 <traffic_display+0xa0>
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <traffic_display+0x2e>
 8002248:	2b01      	cmp	r3, #1
 800224a:	d013      	beq.n	8002274 <traffic_display+0x54>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_RESET);
            break;
        default:
            break;
 800224c:	e038      	b.n	80022c0 <traffic_display+0xa0>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_RESET);
 800224e:	897b      	ldrh	r3, [r7, #10]
 8002250:	2200      	movs	r2, #0
 8002252:	4619      	mov	r1, r3
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7fe fc8e 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_SET);
 800225a:	893b      	ldrh	r3, [r7, #8]
 800225c:	2201      	movs	r2, #1
 800225e:	4619      	mov	r1, r3
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f7fe fc88 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_SET);
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	2201      	movs	r2, #1
 800226a:	4619      	mov	r1, r3
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f7fe fc82 	bl	8000b76 <HAL_GPIO_WritePin>
            break;
 8002272:	e026      	b.n	80022c2 <traffic_display+0xa2>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_SET);
 8002274:	897b      	ldrh	r3, [r7, #10]
 8002276:	2201      	movs	r2, #1
 8002278:	4619      	mov	r1, r3
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f7fe fc7b 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_RESET);
 8002280:	893b      	ldrh	r3, [r7, #8]
 8002282:	2200      	movs	r2, #0
 8002284:	4619      	mov	r1, r3
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f7fe fc75 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_SET);
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	2201      	movs	r2, #1
 8002290:	4619      	mov	r1, r3
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f7fe fc6f 	bl	8000b76 <HAL_GPIO_WritePin>
            break;
 8002298:	e013      	b.n	80022c2 <traffic_display+0xa2>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_SET);
 800229a:	897b      	ldrh	r3, [r7, #10]
 800229c:	2201      	movs	r2, #1
 800229e:	4619      	mov	r1, r3
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f7fe fc68 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_SET);
 80022a6:	893b      	ldrh	r3, [r7, #8]
 80022a8:	2201      	movs	r2, #1
 80022aa:	4619      	mov	r1, r3
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f7fe fc62 	bl	8000b76 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_RESET);
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	2200      	movs	r2, #0
 80022b6:	4619      	mov	r1, r3
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f7fe fc5c 	bl	8000b76 <HAL_GPIO_WritePin>
            break;
 80022be:	e000      	b.n	80022c2 <traffic_display+0xa2>
            break;
 80022c0:	bf00      	nop
    }
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <traffic_init>:
void traffic_init() {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
	 redred = (time_yellow_set + time_green_set) == time_red_set ? 0 : 1;
 80022d0:	4b16      	ldr	r3, [pc, #88]	; (800232c <traffic_init+0x60>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b16      	ldr	r3, [pc, #88]	; (8002330 <traffic_init+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	441a      	add	r2, r3
 80022da:	4b16      	ldr	r3, [pc, #88]	; (8002334 <traffic_init+0x68>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	bf14      	ite	ne
 80022e2:	2301      	movne	r3, #1
 80022e4:	2300      	moveq	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <traffic_init+0x6c>)
 80022ec:	701a      	strb	r2, [r3, #0]
	if (time_1 <= 0 || time_2<=0) {
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <traffic_init+0x70>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	dd03      	ble.n	80022fe <traffic_init+0x32>
 80022f6:	4b12      	ldr	r3, [pc, #72]	; (8002340 <traffic_init+0x74>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	dc0a      	bgt.n	8002314 <traffic_init+0x48>
		time_1 = time_green_set;
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <traffic_init+0x64>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a0e      	ldr	r2, [pc, #56]	; (800233c <traffic_init+0x70>)
 8002304:	6013      	str	r3, [r2, #0]
		time_2 = time_red_set;
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <traffic_init+0x68>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <traffic_init+0x74>)
 800230c:	6013      	str	r3, [r2, #0]
		status = GREEN_RED;
 800230e:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <traffic_init+0x78>)
 8002310:	2202      	movs	r2, #2
 8002312:	601a      	str	r2, [r3, #0]
	}
	if (is_button_pressed(0)) {
 8002314:	2000      	movs	r0, #0
 8002316:	f000 fb59 	bl	80029cc <is_button_pressed>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <traffic_init+0x5a>
		status = SET_TIME_RED;
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <traffic_init+0x78>)
 8002322:	2208      	movs	r2, #8
 8002324:	601a      	str	r2, [r3, #0]
	}



}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000024 	.word	0x20000024
 8002330:	20000020 	.word	0x20000020
 8002334:	20000028 	.word	0x20000028
 8002338:	200000d0 	.word	0x200000d0
 800233c:	20000030 	.word	0x20000030
 8002340:	20000034 	.word	0x20000034
 8002344:	20000038 	.word	0x20000038

08002348 <traffic_green_red>:

void traffic_green_red() {
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0

    if (time_1 <= 0) {
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <traffic_green_red+0x30>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	dc06      	bgt.n	8002362 <traffic_green_red+0x1a>
        time_1 = time_yellow_set;
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <traffic_green_red+0x34>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a07      	ldr	r2, [pc, #28]	; (8002378 <traffic_green_red+0x30>)
 800235a:	6013      	str	r3, [r2, #0]
        status = YELLOW_RED;
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <traffic_green_red+0x38>)
 800235e:	2203      	movs	r2, #3
 8002360:	601a      	str	r2, [r3, #0]
    }
    if (is_button_pressed(0)) {
 8002362:	2000      	movs	r0, #0
 8002364:	f000 fb32 	bl	80029cc <is_button_pressed>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <traffic_green_red+0x2c>
        status = SET_TIME_RED;
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <traffic_green_red+0x38>)
 8002370:	2208      	movs	r2, #8
 8002372:	601a      	str	r2, [r3, #0]
    }

}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000030 	.word	0x20000030
 800237c:	20000024 	.word	0x20000024
 8002380:	20000038 	.word	0x20000038

08002384 <traffic_yellow_red>:

void traffic_yellow_red() {
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0

    if (redred == 1) {
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <traffic_yellow_red+0x58>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d10b      	bne.n	80023a8 <traffic_yellow_red+0x24>
        if (time_1 <= 0) {
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <traffic_yellow_red+0x5c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	dc16      	bgt.n	80023c6 <traffic_yellow_red+0x42>
            time_1 = time_red_set;
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <traffic_yellow_red+0x60>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a10      	ldr	r2, [pc, #64]	; (80023e0 <traffic_yellow_red+0x5c>)
 800239e:	6013      	str	r3, [r2, #0]
            status = RED_RED1;
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <traffic_yellow_red+0x64>)
 80023a2:	2206      	movs	r2, #6
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	e00e      	b.n	80023c6 <traffic_yellow_red+0x42>
        }
    } else {
        if (time_2 <= 0) {
 80023a8:	4b10      	ldr	r3, [pc, #64]	; (80023ec <traffic_yellow_red+0x68>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	dc0a      	bgt.n	80023c6 <traffic_yellow_red+0x42>
            time_1 = time_red_set;
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <traffic_yellow_red+0x60>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <traffic_yellow_red+0x5c>)
 80023b6:	6013      	str	r3, [r2, #0]
            time_2 = time_green_set;
 80023b8:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <traffic_yellow_red+0x6c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0b      	ldr	r2, [pc, #44]	; (80023ec <traffic_yellow_red+0x68>)
 80023be:	6013      	str	r3, [r2, #0]
            status = RED_GREEN;
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <traffic_yellow_red+0x64>)
 80023c2:	2204      	movs	r2, #4
 80023c4:	601a      	str	r2, [r3, #0]
        }
    }
    if (is_button_pressed(0)) {
 80023c6:	2000      	movs	r0, #0
 80023c8:	f000 fb00 	bl	80029cc <is_button_pressed>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <traffic_yellow_red+0x54>
        status = SET_TIME_RED;
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <traffic_yellow_red+0x64>)
 80023d4:	2208      	movs	r2, #8
 80023d6:	601a      	str	r2, [r3, #0]
    }

}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	200000d0 	.word	0x200000d0
 80023e0:	20000030 	.word	0x20000030
 80023e4:	20000028 	.word	0x20000028
 80023e8:	20000038 	.word	0x20000038
 80023ec:	20000034 	.word	0x20000034
 80023f0:	20000020 	.word	0x20000020

080023f4 <traffic_red_red1>:

void traffic_red_red1() {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0

    if (time_2 <= 0) {
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <traffic_red_red1+0x30>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	dc06      	bgt.n	800240e <traffic_red_red1+0x1a>
    	// time_1 = time_red_set;
        time_2 = time_green_set;
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <traffic_red_red1+0x34>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a07      	ldr	r2, [pc, #28]	; (8002424 <traffic_red_red1+0x30>)
 8002406:	6013      	str	r3, [r2, #0]
        status = RED_GREEN;
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <traffic_red_red1+0x38>)
 800240a:	2204      	movs	r2, #4
 800240c:	601a      	str	r2, [r3, #0]
    }
    if (is_button_pressed(0)) {
 800240e:	2000      	movs	r0, #0
 8002410:	f000 fadc 	bl	80029cc <is_button_pressed>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <traffic_red_red1+0x2c>
        status = SET_TIME_RED;
 800241a:	4b04      	ldr	r3, [pc, #16]	; (800242c <traffic_red_red1+0x38>)
 800241c:	2208      	movs	r2, #8
 800241e:	601a      	str	r2, [r3, #0]
    }

}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000034 	.word	0x20000034
 8002428:	20000020 	.word	0x20000020
 800242c:	20000038 	.word	0x20000038

08002430 <traffic_red_green>:

void traffic_red_green() {
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0

    if (time_2 <= 0) {
 8002434:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <traffic_red_green+0x30>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	dc06      	bgt.n	800244a <traffic_red_green+0x1a>
        time_2 = time_yellow_set;
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <traffic_red_green+0x34>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a07      	ldr	r2, [pc, #28]	; (8002460 <traffic_red_green+0x30>)
 8002442:	6013      	str	r3, [r2, #0]
        status = RED_YELLOW;
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <traffic_red_green+0x38>)
 8002446:	2205      	movs	r2, #5
 8002448:	601a      	str	r2, [r3, #0]
    }
    if (is_button_pressed(0)) {
 800244a:	2000      	movs	r0, #0
 800244c:	f000 fabe 	bl	80029cc <is_button_pressed>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <traffic_red_green+0x2c>
        status = SET_TIME_RED;
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <traffic_red_green+0x38>)
 8002458:	2208      	movs	r2, #8
 800245a:	601a      	str	r2, [r3, #0]
    }

}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000034 	.word	0x20000034
 8002464:	20000024 	.word	0x20000024
 8002468:	20000038 	.word	0x20000038

0800246c <traffic_red_yellow>:

void traffic_red_yellow() {
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0

	if (time_1 <= 0) {
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <traffic_red_yellow+0x38>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	dc0a      	bgt.n	800248e <traffic_red_yellow+0x22>
		time_1 = time_green_set;
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <traffic_red_yellow+0x3c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a09      	ldr	r2, [pc, #36]	; (80024a4 <traffic_red_yellow+0x38>)
 800247e:	6013      	str	r3, [r2, #0]
		time_2 = time_red_set;
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <traffic_red_yellow+0x40>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <traffic_red_yellow+0x44>)
 8002486:	6013      	str	r3, [r2, #0]
		status = GREEN_RED;
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <traffic_red_yellow+0x48>)
 800248a:	2202      	movs	r2, #2
 800248c:	601a      	str	r2, [r3, #0]
	}
    if (is_button_pressed(0)) {
 800248e:	2000      	movs	r0, #0
 8002490:	f000 fa9c 	bl	80029cc <is_button_pressed>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <traffic_red_yellow+0x34>
        status = SET_TIME_RED;
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <traffic_red_yellow+0x48>)
 800249c:	2208      	movs	r2, #8
 800249e:	601a      	str	r2, [r3, #0]
    }

}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000030 	.word	0x20000030
 80024a8:	20000020 	.word	0x20000020
 80024ac:	20000028 	.word	0x20000028
 80024b0:	20000034 	.word	0x20000034
 80024b4:	20000038 	.word	0x20000038

080024b8 <traffic_mannual_green_red>:
}
*/



void traffic_mannual_green_red(){
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	if(timer1_flag[1]  == 1){
 80024bc:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <traffic_mannual_green_red+0x28>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d102      	bne.n	80024ca <traffic_mannual_green_red+0x12>
		status = GREEN_RED;
 80024c4:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <traffic_mannual_green_red+0x2c>)
 80024c6:	2202      	movs	r2, #2
 80024c8:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(0)){
 80024ca:	2000      	movs	r0, #0
 80024cc:	f000 fa7e 	bl	80029cc <is_button_pressed>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <traffic_mannual_green_red+0x24>
		status = SET_TIME_RED;
 80024d6:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <traffic_mannual_green_red+0x2c>)
 80024d8:	2208      	movs	r2, #8
 80024da:	601a      	str	r2, [r3, #0]
	}
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	200000d4 	.word	0x200000d4
 80024e4:	20000038 	.word	0x20000038

080024e8 <traffic_mannual_yellow_red>:
void traffic_mannual_yellow_red(){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
	if(timer1_flag[1]  == 1){
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <traffic_mannual_yellow_red+0x28>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d102      	bne.n	80024fa <traffic_mannual_yellow_red+0x12>
		status = YELLOW_RED;
 80024f4:	4b07      	ldr	r3, [pc, #28]	; (8002514 <traffic_mannual_yellow_red+0x2c>)
 80024f6:	2203      	movs	r2, #3
 80024f8:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(0)){
 80024fa:	2000      	movs	r0, #0
 80024fc:	f000 fa66 	bl	80029cc <is_button_pressed>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <traffic_mannual_yellow_red+0x24>
		status = SET_TIME_RED;
 8002506:	4b03      	ldr	r3, [pc, #12]	; (8002514 <traffic_mannual_yellow_red+0x2c>)
 8002508:	2208      	movs	r2, #8
 800250a:	601a      	str	r2, [r3, #0]
	}
}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}
 8002510:	200000d4 	.word	0x200000d4
 8002514:	20000038 	.word	0x20000038

08002518 <traffic_mannual_red_green>:
void traffic_mannual_red_green(){
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	if(timer1_flag[1]  == 1){
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <traffic_mannual_red_green+0x28>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d102      	bne.n	800252a <traffic_mannual_red_green+0x12>
		status = RED_GREEN;
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <traffic_mannual_red_green+0x2c>)
 8002526:	2204      	movs	r2, #4
 8002528:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(0)){
 800252a:	2000      	movs	r0, #0
 800252c:	f000 fa4e 	bl	80029cc <is_button_pressed>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <traffic_mannual_red_green+0x24>
		status = SET_TIME_RED;
 8002536:	4b03      	ldr	r3, [pc, #12]	; (8002544 <traffic_mannual_red_green+0x2c>)
 8002538:	2208      	movs	r2, #8
 800253a:	601a      	str	r2, [r3, #0]
	}
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}
 8002540:	200000d4 	.word	0x200000d4
 8002544:	20000038 	.word	0x20000038

08002548 <traffic_mannual_red_yellow>:
void traffic_mannual_red_yellow(){
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
	if(timer1_flag[1]  == 1){
 800254c:	4b08      	ldr	r3, [pc, #32]	; (8002570 <traffic_mannual_red_yellow+0x28>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d102      	bne.n	800255a <traffic_mannual_red_yellow+0x12>
		status = RED_YELLOW;
 8002554:	4b07      	ldr	r3, [pc, #28]	; (8002574 <traffic_mannual_red_yellow+0x2c>)
 8002556:	2205      	movs	r2, #5
 8002558:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(0)){
 800255a:	2000      	movs	r0, #0
 800255c:	f000 fa36 	bl	80029cc <is_button_pressed>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <traffic_mannual_red_yellow+0x24>
		status = SET_TIME_RED;
 8002566:	4b03      	ldr	r3, [pc, #12]	; (8002574 <traffic_mannual_red_yellow+0x2c>)
 8002568:	2208      	movs	r2, #8
 800256a:	601a      	str	r2, [r3, #0]
	}
}
 800256c:	bf00      	nop
 800256e:	bd80      	pop	{r7, pc}
 8002570:	200000d4 	.word	0x200000d4
 8002574:	20000038 	.word	0x20000038

08002578 <traffic_set_time_red>:
void traffic_set_time_red(){
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af06      	add	r7, sp, #24
	DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED1_0_Pin, SEGLED1_1_Pin, SEGLED1_2_Pin, SEGLED1_3_Pin, SEGLED1_4_Pin, SEGLED1_5_Pin, SEGLED1_6_Pin, time_red_select-1);
 800257e:	4b32      	ldr	r3, [pc, #200]	; (8002648 <traffic_set_time_red+0xd0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	3b01      	subs	r3, #1
 8002586:	b2db      	uxtb	r3, r3
 8002588:	9304      	str	r3, [sp, #16]
 800258a:	2340      	movs	r3, #64	; 0x40
 800258c:	9303      	str	r3, [sp, #12]
 800258e:	2320      	movs	r3, #32
 8002590:	9302      	str	r3, [sp, #8]
 8002592:	2310      	movs	r3, #16
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	2308      	movs	r3, #8
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2304      	movs	r3, #4
 800259c:	2202      	movs	r2, #2
 800259e:	2101      	movs	r1, #1
 80025a0:	482a      	ldr	r0, [pc, #168]	; (800264c <traffic_set_time_red+0xd4>)
 80025a2:	f7ff fad1 	bl	8001b48 <DISPLAY_LED_7_SEGMENT>
    DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED2_0_Pin, SEGLED2_1_Pin, SEGLED2_2_Pin, SEGLED2_3_Pin, SEGLED2_4_Pin, SEGLED2_5_Pin, SEGLED2_6_Pin, 2);
 80025a6:	2302      	movs	r3, #2
 80025a8:	9304      	str	r3, [sp, #16]
 80025aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025ae:	9303      	str	r3, [sp, #12]
 80025b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b4:	9302      	str	r3, [sp, #8]
 80025b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ca:	2180      	movs	r1, #128	; 0x80
 80025cc:	481f      	ldr	r0, [pc, #124]	; (800264c <traffic_set_time_red+0xd4>)
 80025ce:	f7ff fabb 	bl	8001b48 <DISPLAY_LED_7_SEGMENT>
	if(time_red_select< time_red_set){
 80025d2:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <traffic_set_time_red+0xd0>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	4b1e      	ldr	r3, [pc, #120]	; (8002650 <traffic_set_time_red+0xd8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	da03      	bge.n	80025e6 <traffic_set_time_red+0x6e>
		time_red_select = time_red_set;
 80025de:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <traffic_set_time_red+0xd8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a19      	ldr	r2, [pc, #100]	; (8002648 <traffic_set_time_red+0xd0>)
 80025e4:	6013      	str	r3, [r2, #0]
	}
	if(is_button_pressed(1)){
 80025e6:	2001      	movs	r0, #1
 80025e8:	f000 f9f0 	bl	80029cc <is_button_pressed>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d010      	beq.n	8002614 <traffic_set_time_red+0x9c>
		// Tang gia tri
		if(time_red_select<100)
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <traffic_set_time_red+0xd0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b63      	cmp	r3, #99	; 0x63
 80025f8:	dc05      	bgt.n	8002606 <traffic_set_time_red+0x8e>
		{
			time_red_select ++;
 80025fa:	4b13      	ldr	r3, [pc, #76]	; (8002648 <traffic_set_time_red+0xd0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3301      	adds	r3, #1
 8002600:	4a11      	ldr	r2, [pc, #68]	; (8002648 <traffic_set_time_red+0xd0>)
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	e006      	b.n	8002614 <traffic_set_time_red+0x9c>
		}
		else {
			time_red_select = time_green_set + time_yellow_set;
 8002606:	4b13      	ldr	r3, [pc, #76]	; (8002654 <traffic_set_time_red+0xdc>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	4b13      	ldr	r3, [pc, #76]	; (8002658 <traffic_set_time_red+0xe0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4413      	add	r3, r2
 8002610:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <traffic_set_time_red+0xd0>)
 8002612:	6013      	str	r3, [r2, #0]
		}
	}
	if(is_button_pressed(2)){
 8002614:	2002      	movs	r0, #2
 8002616:	f000 f9d9 	bl	80029cc <is_button_pressed>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <traffic_set_time_red+0xb0>
		// Chon gia tri
		time_red_set = time_red_select;
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <traffic_set_time_red+0xd0>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <traffic_set_time_red+0xd8>)
 8002626:	6013      	str	r3, [r2, #0]
	}
	if(is_button_pressed(0)){
 8002628:	2000      	movs	r0, #0
 800262a:	f000 f9cf 	bl	80029cc <is_button_pressed>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d006      	beq.n	8002642 <traffic_set_time_red+0xca>
		time_yellow_select = time_yellow_set;
 8002634:	4b08      	ldr	r3, [pc, #32]	; (8002658 <traffic_set_time_red+0xe0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a08      	ldr	r2, [pc, #32]	; (800265c <traffic_set_time_red+0xe4>)
 800263a:	6013      	str	r3, [r2, #0]
		status = SET_TIME_YELLOW;
 800263c:	4b08      	ldr	r3, [pc, #32]	; (8002660 <traffic_set_time_red+0xe8>)
 800263e:	2209      	movs	r2, #9
 8002640:	601a      	str	r2, [r3, #0]
	}
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	200000cc 	.word	0x200000cc
 800264c:	40010c00 	.word	0x40010c00
 8002650:	20000028 	.word	0x20000028
 8002654:	20000020 	.word	0x20000020
 8002658:	20000024 	.word	0x20000024
 800265c:	20000060 	.word	0x20000060
 8002660:	20000038 	.word	0x20000038

08002664 <traffic_set_time_yellow>:

void traffic_set_time_yellow() {
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af06      	add	r7, sp, #24
    DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED1_0_Pin, SEGLED1_1_Pin, SEGLED1_2_Pin, SEGLED1_3_Pin, SEGLED1_4_Pin, SEGLED1_5_Pin, SEGLED1_6_Pin, time_yellow_select - 1);
 800266a:	4b30      	ldr	r3, [pc, #192]	; (800272c <traffic_set_time_yellow+0xc8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b2db      	uxtb	r3, r3
 8002674:	9304      	str	r3, [sp, #16]
 8002676:	2340      	movs	r3, #64	; 0x40
 8002678:	9303      	str	r3, [sp, #12]
 800267a:	2320      	movs	r3, #32
 800267c:	9302      	str	r3, [sp, #8]
 800267e:	2310      	movs	r3, #16
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	2308      	movs	r3, #8
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	2304      	movs	r3, #4
 8002688:	2202      	movs	r2, #2
 800268a:	2101      	movs	r1, #1
 800268c:	4828      	ldr	r0, [pc, #160]	; (8002730 <traffic_set_time_yellow+0xcc>)
 800268e:	f7ff fa5b 	bl	8001b48 <DISPLAY_LED_7_SEGMENT>
    DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED2_0_Pin, SEGLED2_1_Pin, SEGLED2_2_Pin, SEGLED2_3_Pin, SEGLED2_4_Pin, SEGLED2_5_Pin, SEGLED2_6_Pin, 3);
 8002692:	2303      	movs	r3, #3
 8002694:	9304      	str	r3, [sp, #16]
 8002696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800269a:	9303      	str	r3, [sp, #12]
 800269c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a0:	9302      	str	r3, [sp, #8]
 80026a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026b6:	2180      	movs	r1, #128	; 0x80
 80026b8:	481d      	ldr	r0, [pc, #116]	; (8002730 <traffic_set_time_yellow+0xcc>)
 80026ba:	f7ff fa45 	bl	8001b48 <DISPLAY_LED_7_SEGMENT>

    if (time_yellow_select < 1) {
 80026be:	4b1b      	ldr	r3, [pc, #108]	; (800272c <traffic_set_time_yellow+0xc8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	dc02      	bgt.n	80026cc <traffic_set_time_yellow+0x68>
        time_yellow_select = 1;
 80026c6:	4b19      	ldr	r3, [pc, #100]	; (800272c <traffic_set_time_yellow+0xc8>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
    }

    if (is_button_pressed(1)) {
 80026cc:	2001      	movs	r0, #1
 80026ce:	f000 f97d 	bl	80029cc <is_button_pressed>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00e      	beq.n	80026f6 <traffic_set_time_yellow+0x92>
        // Tăng giá trị
        if (time_yellow_select < time_green_set) {
 80026d8:	4b14      	ldr	r3, [pc, #80]	; (800272c <traffic_set_time_yellow+0xc8>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <traffic_set_time_yellow+0xd0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	da05      	bge.n	80026f0 <traffic_set_time_yellow+0x8c>
            time_yellow_select++;
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <traffic_set_time_yellow+0xc8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	3301      	adds	r3, #1
 80026ea:	4a10      	ldr	r2, [pc, #64]	; (800272c <traffic_set_time_yellow+0xc8>)
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e002      	b.n	80026f6 <traffic_set_time_yellow+0x92>
        } else {
            time_yellow_select = 0;
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <traffic_set_time_yellow+0xc8>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
        }
    }

    if (is_button_pressed(2)) {
 80026f6:	2002      	movs	r0, #2
 80026f8:	f000 f968 	bl	80029cc <is_button_pressed>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <traffic_set_time_yellow+0xa6>
        // Chọn giá trị
        time_yellow_set = time_yellow_select;
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <traffic_set_time_yellow+0xc8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a0c      	ldr	r2, [pc, #48]	; (8002738 <traffic_set_time_yellow+0xd4>)
 8002708:	6013      	str	r3, [r2, #0]
    }
    if (is_button_pressed(0)) {
 800270a:	2000      	movs	r0, #0
 800270c:	f000 f95e 	bl	80029cc <is_button_pressed>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d006      	beq.n	8002724 <traffic_set_time_yellow+0xc0>
    	time_green_select = time_green_set;
 8002716:	4b07      	ldr	r3, [pc, #28]	; (8002734 <traffic_set_time_yellow+0xd0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a08      	ldr	r2, [pc, #32]	; (800273c <traffic_set_time_yellow+0xd8>)
 800271c:	6013      	str	r3, [r2, #0]
        status = SET_TIME_GREEN;
 800271e:	4b08      	ldr	r3, [pc, #32]	; (8002740 <traffic_set_time_yellow+0xdc>)
 8002720:	220a      	movs	r2, #10
 8002722:	601a      	str	r2, [r3, #0]
    }

}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000060 	.word	0x20000060
 8002730:	40010c00 	.word	0x40010c00
 8002734:	20000020 	.word	0x20000020
 8002738:	20000024 	.word	0x20000024
 800273c:	200000c8 	.word	0x200000c8
 8002740:	20000038 	.word	0x20000038

08002744 <traffic_set_time_green>:

void traffic_set_time_green() {
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af06      	add	r7, sp, #24
    DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED1_0_Pin, SEGLED1_1_Pin, SEGLED1_2_Pin, SEGLED1_3_Pin, SEGLED1_4_Pin, SEGLED1_5_Pin, SEGLED1_6_Pin, time_green_select - 1);
 800274a:	4b35      	ldr	r3, [pc, #212]	; (8002820 <traffic_set_time_green+0xdc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b2db      	uxtb	r3, r3
 8002754:	9304      	str	r3, [sp, #16]
 8002756:	2340      	movs	r3, #64	; 0x40
 8002758:	9303      	str	r3, [sp, #12]
 800275a:	2320      	movs	r3, #32
 800275c:	9302      	str	r3, [sp, #8]
 800275e:	2310      	movs	r3, #16
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	2308      	movs	r3, #8
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	2304      	movs	r3, #4
 8002768:	2202      	movs	r2, #2
 800276a:	2101      	movs	r1, #1
 800276c:	482d      	ldr	r0, [pc, #180]	; (8002824 <traffic_set_time_green+0xe0>)
 800276e:	f7ff f9eb 	bl	8001b48 <DISPLAY_LED_7_SEGMENT>
    DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED2_0_Pin, SEGLED2_1_Pin, SEGLED2_2_Pin, SEGLED2_3_Pin, SEGLED2_4_Pin, SEGLED2_5_Pin, SEGLED2_6_Pin, 4);
 8002772:	2304      	movs	r3, #4
 8002774:	9304      	str	r3, [sp, #16]
 8002776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800277a:	9303      	str	r3, [sp, #12]
 800277c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002780:	9302      	str	r3, [sp, #8]
 8002782:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002796:	2180      	movs	r1, #128	; 0x80
 8002798:	4822      	ldr	r0, [pc, #136]	; (8002824 <traffic_set_time_green+0xe0>)
 800279a:	f7ff f9d5 	bl	8001b48 <DISPLAY_LED_7_SEGMENT>

    if (time_green_select < time_yellow_set) {
 800279e:	4b20      	ldr	r3, [pc, #128]	; (8002820 <traffic_set_time_green+0xdc>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4b21      	ldr	r3, [pc, #132]	; (8002828 <traffic_set_time_green+0xe4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	da03      	bge.n	80027b2 <traffic_set_time_green+0x6e>
        time_green_select = time_yellow_set;
 80027aa:	4b1f      	ldr	r3, [pc, #124]	; (8002828 <traffic_set_time_green+0xe4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1c      	ldr	r2, [pc, #112]	; (8002820 <traffic_set_time_green+0xdc>)
 80027b0:	6013      	str	r3, [r2, #0]
    }

    if (is_button_pressed(1)) {
 80027b2:	2001      	movs	r0, #1
 80027b4:	f000 f90a 	bl	80029cc <is_button_pressed>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d012      	beq.n	80027e4 <traffic_set_time_green+0xa0>
        // Tăng giá trị
        if (time_green_select + time_yellow_set < time_red_set) {
 80027be:	4b18      	ldr	r3, [pc, #96]	; (8002820 <traffic_set_time_green+0xdc>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	4b19      	ldr	r3, [pc, #100]	; (8002828 <traffic_set_time_green+0xe4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	441a      	add	r2, r3
 80027c8:	4b18      	ldr	r3, [pc, #96]	; (800282c <traffic_set_time_green+0xe8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	da05      	bge.n	80027dc <traffic_set_time_green+0x98>
            time_green_select++;
 80027d0:	4b13      	ldr	r3, [pc, #76]	; (8002820 <traffic_set_time_green+0xdc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3301      	adds	r3, #1
 80027d6:	4a12      	ldr	r2, [pc, #72]	; (8002820 <traffic_set_time_green+0xdc>)
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e003      	b.n	80027e4 <traffic_set_time_green+0xa0>
        } else {
            time_green_select = time_yellow_set;
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <traffic_set_time_green+0xe4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0f      	ldr	r2, [pc, #60]	; (8002820 <traffic_set_time_green+0xdc>)
 80027e2:	6013      	str	r3, [r2, #0]
        }
    }

    if (is_button_pressed(2)) {
 80027e4:	2002      	movs	r0, #2
 80027e6:	f000 f8f1 	bl	80029cc <is_button_pressed>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <traffic_set_time_green+0xb4>
        // Chọn giá trị
        time_green_set = time_green_select;
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <traffic_set_time_green+0xdc>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <traffic_set_time_green+0xec>)
 80027f6:	6013      	str	r3, [r2, #0]
    }

    if (is_button_pressed(0)) {
 80027f8:	2000      	movs	r0, #0
 80027fa:	f000 f8e7 	bl	80029cc <is_button_pressed>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <traffic_set_time_green+0xd6>
        time_1 = time_init;
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <traffic_set_time_green+0xf0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a0b      	ldr	r2, [pc, #44]	; (8002838 <traffic_set_time_green+0xf4>)
 800280a:	6013      	str	r3, [r2, #0]
        time_2 = time_init;
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <traffic_set_time_green+0xf0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0a      	ldr	r2, [pc, #40]	; (800283c <traffic_set_time_green+0xf8>)
 8002812:	6013      	str	r3, [r2, #0]
        status = INIT;
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <traffic_set_time_green+0xfc>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]
    }
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	200000c8 	.word	0x200000c8
 8002824:	40010c00 	.word	0x40010c00
 8002828:	20000024 	.word	0x20000024
 800282c:	20000028 	.word	0x20000028
 8002830:	20000020 	.word	0x20000020
 8002834:	2000002c 	.word	0x2000002c
 8002838:	20000030 	.word	0x20000030
 800283c:	20000034 	.word	0x20000034
 8002840:	20000038 	.word	0x20000038

08002844 <automatic_run>:
void automatic_init(){
	if(status == INIT){
		setTimer1(1, 1000);
	}
}
void automatic_run(){
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
 	switch(status)
 8002848:	4b14      	ldr	r3, [pc, #80]	; (800289c <automatic_run+0x58>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3b01      	subs	r3, #1
 800284e:	2b05      	cmp	r3, #5
 8002850:	d820      	bhi.n	8002894 <automatic_run+0x50>
 8002852:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <automatic_run+0x14>)
 8002854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002858:	08002871 	.word	0x08002871
 800285c:	08002877 	.word	0x08002877
 8002860:	0800287d 	.word	0x0800287d
 8002864:	08002889 	.word	0x08002889
 8002868:	0800288f 	.word	0x0800288f
 800286c:	08002883 	.word	0x08002883
	{
	case (INIT):
				traffic_init();
 8002870:	f7ff fd2c 	bl	80022cc <traffic_init>
			break;
 8002874:	e00f      	b.n	8002896 <automatic_run+0x52>
	case (GREEN_RED):
			// TODO
				traffic_green_red();
 8002876:	f7ff fd67 	bl	8002348 <traffic_green_red>
			break;
 800287a:	e00c      	b.n	8002896 <automatic_run+0x52>
	case (YELLOW_RED):
				traffic_yellow_red();
 800287c:	f7ff fd82 	bl	8002384 <traffic_yellow_red>
			break;
 8002880:	e009      	b.n	8002896 <automatic_run+0x52>
	case RED_RED1:
				traffic_red_red1();
 8002882:	f7ff fdb7 	bl	80023f4 <traffic_red_red1>
			break;
 8002886:	e006      	b.n	8002896 <automatic_run+0x52>
	case (RED_GREEN):
				traffic_red_green();
 8002888:	f7ff fdd2 	bl	8002430 <traffic_red_green>
			break;
 800288c:	e003      	b.n	8002896 <automatic_run+0x52>
	case (RED_YELLOW):
				traffic_red_yellow();
 800288e:	f7ff fded 	bl	800246c <traffic_red_yellow>
			break;
 8002892:	e000      	b.n	8002896 <automatic_run+0x52>
	//case RED_RED2:
		//		traffic_red_red2();
			//break;
	default:
		break;
 8002894:	bf00      	nop
	}

}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000038 	.word	0x20000038

080028a0 <button_reading>:
static GPIO_PinState debounceButtonBuffer3[N0_OF_BUTTONS];
static GPIO_PinState debounceButtonBuffer4[N0_OF_BUTTONS];
static uint8_t flagForButtonPress[N0_OF_BUTTONS]; // flag for button pressed (AN) hon 1 giay
static uint8_t flagForButton_longPress[N0_OF_BUTTONS];
int time_out_input = 500;
void button_reading ( GPIO_TypeDef* GPIOx[] , uint16_t GPIO_Pin[] ) {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
	for (int i = 0 ; i< N0_OF_BUTTONS ; i ++ ){
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	e077      	b.n	80029a0 <button_reading+0x100>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 80028b0:	4a3f      	ldr	r2, [pc, #252]	; (80029b0 <button_reading+0x110>)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4413      	add	r3, r2
 80028b6:	7819      	ldrb	r1, [r3, #0]
 80028b8:	4a3e      	ldr	r2, [pc, #248]	; (80029b4 <button_reading+0x114>)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4413      	add	r3, r2
 80028be:	460a      	mov	r2, r1
 80028c0:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80028c2:	4a3d      	ldr	r2, [pc, #244]	; (80029b8 <button_reading+0x118>)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4413      	add	r3, r2
 80028c8:	7819      	ldrb	r1, [r3, #0]
 80028ca:	4a39      	ldr	r2, [pc, #228]	; (80029b0 <button_reading+0x110>)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	460a      	mov	r2, r1
 80028d2:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOx[i], GPIO_Pin[i]);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	4413      	add	r3, r2
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	4413      	add	r3, r2
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	4619      	mov	r1, r3
 80028ea:	f7fe f92d 	bl	8000b48 <HAL_GPIO_ReadPin>
 80028ee:	4603      	mov	r3, r0
 80028f0:	4619      	mov	r1, r3
 80028f2:	4a31      	ldr	r2, [pc, #196]	; (80029b8 <button_reading+0x118>)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	460a      	mov	r2, r1
 80028fa:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer3[i] == debounceButtonBuffer2[i] && debounceButtonBuffer2[i] == debounceButtonBuffer1[i]){
 80028fc:	4a2d      	ldr	r2, [pc, #180]	; (80029b4 <button_reading+0x114>)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4413      	add	r3, r2
 8002902:	781a      	ldrb	r2, [r3, #0]
 8002904:	492a      	ldr	r1, [pc, #168]	; (80029b0 <button_reading+0x110>)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	440b      	add	r3, r1
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d144      	bne.n	800299a <button_reading+0xfa>
 8002910:	4a27      	ldr	r2, [pc, #156]	; (80029b0 <button_reading+0x110>)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4413      	add	r3, r2
 8002916:	781a      	ldrb	r2, [r3, #0]
 8002918:	4927      	ldr	r1, [pc, #156]	; (80029b8 <button_reading+0x118>)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	440b      	add	r3, r1
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d13a      	bne.n	800299a <button_reading+0xfa>
			// Het Rung
			if(debounceButtonBuffer4[i]!=debounceButtonBuffer3[i]){
 8002924:	4a25      	ldr	r2, [pc, #148]	; (80029bc <button_reading+0x11c>)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4413      	add	r3, r2
 800292a:	781a      	ldrb	r2, [r3, #0]
 800292c:	4921      	ldr	r1, [pc, #132]	; (80029b4 <button_reading+0x114>)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	440b      	add	r3, r1
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d018      	beq.n	800296a <button_reading+0xca>
				// Dong bo lai tin hieu
				debounceButtonBuffer4[i]=debounceButtonBuffer3[i];
 8002938:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <button_reading+0x114>)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4413      	add	r3, r2
 800293e:	7819      	ldrb	r1, [r3, #0]
 8002940:	4a1e      	ldr	r2, [pc, #120]	; (80029bc <button_reading+0x11c>)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4413      	add	r3, r2
 8002946:	460a      	mov	r2, r1
 8002948:	701a      	strb	r2, [r3, #0]
				if(debounceButtonBuffer4[i] == BUTTON_IS_PRESSED){
 800294a:	4a1c      	ldr	r2, [pc, #112]	; (80029bc <button_reading+0x11c>)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d121      	bne.n	800299a <button_reading+0xfa>
					// Vua chuyen sang trang thai nhan
					flagForButtonPress[i] = 1;
 8002956:	4a1a      	ldr	r2, [pc, #104]	; (80029c0 <button_reading+0x120>)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4413      	add	r3, r2
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
					time_out_input = 500;
 8002960:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <button_reading+0x124>)
 8002962:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	e017      	b.n	800299a <button_reading+0xfa>
				}
			}
			else{
				// Dang trong qua trinh nhan de hoac nha
				time_out_input -- ;
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <button_reading+0x124>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3b01      	subs	r3, #1
 8002970:	4a14      	ldr	r2, [pc, #80]	; (80029c4 <button_reading+0x124>)
 8002972:	6013      	str	r3, [r2, #0]
				if(time_out_input <= 0 ){
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <button_reading+0x124>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	dc0e      	bgt.n	800299a <button_reading+0xfa>
					// Nhan du 5s hoac tha 5s
					time_out_input = 500;
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <button_reading+0x124>)
 800297e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002982:	601a      	str	r2, [r3, #0]
					if(debounceButtonBuffer4[i] == BUTTON_IS_PRESSED){
 8002984:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <button_reading+0x11c>)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4413      	add	r3, r2
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d104      	bne.n	800299a <button_reading+0xfa>
						// Truong hop la nhan de
						flagForButton_longPress[i] = 1;
 8002990:	4a0d      	ldr	r2, [pc, #52]	; (80029c8 <button_reading+0x128>)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4413      	add	r3, r2
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i< N0_OF_BUTTONS ; i ++ ){
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	3301      	adds	r3, #1
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	dd84      	ble.n	80028b0 <button_reading+0x10>
					}
				}
			}
		}
	}
}
 80029a6:	bf00      	nop
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000068 	.word	0x20000068
 80029b4:	2000006c 	.word	0x2000006c
 80029b8:	20000064 	.word	0x20000064
 80029bc:	20000070 	.word	0x20000070
 80029c0:	20000074 	.word	0x20000074
 80029c4:	2000003c 	.word	0x2000003c
 80029c8:	20000078 	.word	0x20000078

080029cc <is_button_pressed>:
unsigned int is_button_pressed ( unsigned int index ){
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
	// Tra ve trang thai nut nhan co dang bat hay khong
	if(index>= N0_OF_BUTTONS){
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <is_button_pressed+0x12>
		return 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	e00d      	b.n	80029fa <is_button_pressed+0x2e>
	}
	if(flagForButtonPress[index] == 1){
 80029de:	4a09      	ldr	r2, [pc, #36]	; (8002a04 <is_button_pressed+0x38>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d106      	bne.n	80029f8 <is_button_pressed+0x2c>
		flagForButtonPress[index] = 0;
 80029ea:	4a06      	ldr	r2, [pc, #24]	; (8002a04 <is_button_pressed+0x38>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4413      	add	r3, r2
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
		return 1;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <is_button_pressed+0x2e>
	}
	return 0;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	20000074 	.word	0x20000074

08002a08 <manual_run>:
 */
#include "manual.h"
void manual_init(){
	setTimer1(2, 500); // Danh cho nhap nhay den khi set thoi gian
}
void manual_run(){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
	switch(status){
 8002a0c:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <manual_run+0x5c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3b08      	subs	r3, #8
 8002a12:	2b07      	cmp	r3, #7
 8002a14:	d823      	bhi.n	8002a5e <manual_run+0x56>
 8002a16:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <manual_run+0x14>)
 8002a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1c:	08002a3d 	.word	0x08002a3d
 8002a20:	08002a43 	.word	0x08002a43
 8002a24:	08002a49 	.word	0x08002a49
 8002a28:	08002a5f 	.word	0x08002a5f
 8002a2c:	08002a4f 	.word	0x08002a4f
 8002a30:	08002a53 	.word	0x08002a53
 8002a34:	08002a57 	.word	0x08002a57
 8002a38:	08002a5b 	.word	0x08002a5b
	case SET_TIME_RED:
		traffic_set_time_red();
 8002a3c:	f7ff fd9c 	bl	8002578 <traffic_set_time_red>
		break;
 8002a40:	e00e      	b.n	8002a60 <manual_run+0x58>
	case SET_TIME_YELLOW:
		traffic_set_time_yellow();
 8002a42:	f7ff fe0f 	bl	8002664 <traffic_set_time_yellow>
		break;
 8002a46:	e00b      	b.n	8002a60 <manual_run+0x58>
	case SET_TIME_GREEN:
		traffic_set_time_green();
 8002a48:	f7ff fe7c 	bl	8002744 <traffic_set_time_green>
		break;
 8002a4c:	e008      	b.n	8002a60 <manual_run+0x58>
	case MAN_GREEN_RED:
		traffic_mannual_green_red();
 8002a4e:	f7ff fd33 	bl	80024b8 <traffic_mannual_green_red>
	case MAN_YELLOW_RED:
		traffic_mannual_yellow_red();
 8002a52:	f7ff fd49 	bl	80024e8 <traffic_mannual_yellow_red>
	case MAN_RED_GREEN:
		traffic_mannual_red_green();
 8002a56:	f7ff fd5f 	bl	8002518 <traffic_mannual_red_green>
	case MAN_RED_YELLOW:
		traffic_mannual_red_yellow();
 8002a5a:	f7ff fd75 	bl	8002548 <traffic_mannual_red_yellow>
	default :
		break;
 8002a5e:	bf00      	nop
	}

}
 8002a60:	bf00      	nop
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000038 	.word	0x20000038

08002a68 <setTimer1>:
#include "software_timer.h"
	int time_cycle = 10;
	int timer1_counter[10];
	int timer1_flag[10];

	void setTimer1(int index,int duration){
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
		timer1_counter[index]=duration / time_cycle;
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <setTimer1+0x30>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	fb92 f2f3 	sdiv	r2, r2, r3
 8002a7c:	4907      	ldr	r1, [pc, #28]	; (8002a9c <setTimer1+0x34>)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		timer1_flag[index] = 0;
 8002a84:	4a06      	ldr	r2, [pc, #24]	; (8002aa0 <setTimer1+0x38>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2100      	movs	r1, #0
 8002a8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	20000040 	.word	0x20000040
 8002a9c:	200000fc 	.word	0x200000fc
 8002aa0:	200000d4 	.word	0x200000d4

08002aa4 <SetTimerForTimerSet>:
	void SetTimerForTimerSet(int index,int duration,int timer_set){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
		time_cycle = timer_set;
 8002ab0:	4a05      	ldr	r2, [pc, #20]	; (8002ac8 <SetTimerForTimerSet+0x24>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6013      	str	r3, [r2, #0]
		setTimer1(index, duration);
 8002ab6:	68b9      	ldr	r1, [r7, #8]
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f7ff ffd5 	bl	8002a68 <setTimer1>
	}
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000040 	.word	0x20000040

08002acc <timerRun>:
	void timerRun(){
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
		for (int i = 0 ; i <10 ; i++){
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	e01c      	b.n	8002b12 <timerRun+0x46>
			if(timer1_counter[i] >  0 ){
 8002ad8:	4a12      	ldr	r2, [pc, #72]	; (8002b24 <timerRun+0x58>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	dd08      	ble.n	8002af6 <timerRun+0x2a>
					timer1_counter[i]--;
 8002ae4:	4a0f      	ldr	r2, [pc, #60]	; (8002b24 <timerRun+0x58>)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aec:	1e5a      	subs	r2, r3, #1
 8002aee:	490d      	ldr	r1, [pc, #52]	; (8002b24 <timerRun+0x58>)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 }
			if(timer1_counter[i]<=0){
 8002af6:	4a0b      	ldr	r2, [pc, #44]	; (8002b24 <timerRun+0x58>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	dc04      	bgt.n	8002b0c <timerRun+0x40>
					timer1_flag[i]=1;
 8002b02:	4a09      	ldr	r2, [pc, #36]	; (8002b28 <timerRun+0x5c>)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2101      	movs	r1, #1
 8002b08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0 ; i <10 ; i++){
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b09      	cmp	r3, #9
 8002b16:	dddf      	ble.n	8002ad8 <timerRun+0xc>
			}
		}


	}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	200000fc 	.word	0x200000fc
 8002b28:	200000d4 	.word	0x200000d4

08002b2c <__libc_init_array>:
 8002b2c:	b570      	push	{r4, r5, r6, lr}
 8002b2e:	2600      	movs	r6, #0
 8002b30:	4d0c      	ldr	r5, [pc, #48]	; (8002b64 <__libc_init_array+0x38>)
 8002b32:	4c0d      	ldr	r4, [pc, #52]	; (8002b68 <__libc_init_array+0x3c>)
 8002b34:	1b64      	subs	r4, r4, r5
 8002b36:	10a4      	asrs	r4, r4, #2
 8002b38:	42a6      	cmp	r6, r4
 8002b3a:	d109      	bne.n	8002b50 <__libc_init_array+0x24>
 8002b3c:	f000 f822 	bl	8002b84 <_init>
 8002b40:	2600      	movs	r6, #0
 8002b42:	4d0a      	ldr	r5, [pc, #40]	; (8002b6c <__libc_init_array+0x40>)
 8002b44:	4c0a      	ldr	r4, [pc, #40]	; (8002b70 <__libc_init_array+0x44>)
 8002b46:	1b64      	subs	r4, r4, r5
 8002b48:	10a4      	asrs	r4, r4, #2
 8002b4a:	42a6      	cmp	r6, r4
 8002b4c:	d105      	bne.n	8002b5a <__libc_init_array+0x2e>
 8002b4e:	bd70      	pop	{r4, r5, r6, pc}
 8002b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b54:	4798      	blx	r3
 8002b56:	3601      	adds	r6, #1
 8002b58:	e7ee      	b.n	8002b38 <__libc_init_array+0xc>
 8002b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b5e:	4798      	blx	r3
 8002b60:	3601      	adds	r6, #1
 8002b62:	e7f2      	b.n	8002b4a <__libc_init_array+0x1e>
 8002b64:	08002bc0 	.word	0x08002bc0
 8002b68:	08002bc0 	.word	0x08002bc0
 8002b6c:	08002bc0 	.word	0x08002bc0
 8002b70:	08002bc4 	.word	0x08002bc4

08002b74 <memset>:
 8002b74:	4603      	mov	r3, r0
 8002b76:	4402      	add	r2, r0
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d100      	bne.n	8002b7e <memset+0xa>
 8002b7c:	4770      	bx	lr
 8002b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b82:	e7f9      	b.n	8002b78 <memset+0x4>

08002b84 <_init>:
 8002b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b86:	bf00      	nop
 8002b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b8a:	bc08      	pop	{r3}
 8002b8c:	469e      	mov	lr, r3
 8002b8e:	4770      	bx	lr

08002b90 <_fini>:
 8002b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b92:	bf00      	nop
 8002b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b96:	bc08      	pop	{r3}
 8002b98:	469e      	mov	lr, r3
 8002b9a:	4770      	bx	lr

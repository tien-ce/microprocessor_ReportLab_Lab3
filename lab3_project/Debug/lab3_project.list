
lab3_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e40  08002e40  00012e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e64  08002e64  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e64  08002e64  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e64  08002e64  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e64  08002e64  00012e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e68  08002e68  00012e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08002e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000007c  08002ee8  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08002ee8  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fa3  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ead  00000000  00000000  0002a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  0002bef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002ca10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017763  00000000  00000000  0002d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da05  00000000  00000000  00044b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082971  00000000  00000000  00052550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4ec1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a78  00000000  00000000  000d4f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e28 	.word	0x08002e28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08002e28 	.word	0x08002e28

0800014c <ex4_init>:
 *
 *  Created on: Sep 27, 2024
 *      Author: thuyh
 */
#include <ex4.h>
void ex4_init(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	SetTimerForTimerSet(0, 500,10);
 8000150:	220a      	movs	r2, #10
 8000152:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000156:	2000      	movs	r0, #0
 8000158:	f002 fdf6 	bl	8002d48 <SetTimerForTimerSet>
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}

08000160 <ex5_init>:
 *      Author: thuyh
 */


#include "ex5.h"
void ex5_init(){
 8000160:	b480      	push	{r7}
 8000162:	af00      	add	r7, sp, #0

}
 8000164:	bf00      	nop
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr

0800016c <updateTime>:
int buffer2[] = {0,1};
int buffer_slect_red[] = {0,1};
int buffer_slect_yellow[] = {0,1};
int buffer_slect_green[] = {0,1};
int my_index = 1;
void updateTime(){
 800016c:	b580      	push	{r7, lr}
 800016e:	af00      	add	r7, sp, #0
	if(timer1_flag[1] == 1){
 8000170:	4b0a      	ldr	r3, [pc, #40]	; (800019c <updateTime+0x30>)
 8000172:	685b      	ldr	r3, [r3, #4]
 8000174:	2b01      	cmp	r3, #1
 8000176:	d10e      	bne.n	8000196 <updateTime+0x2a>
		setTimer1(1, 1000);
 8000178:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800017c:	2001      	movs	r0, #1
 800017e:	f002 fdc5 	bl	8002d0c <setTimer1>
		time_1 --;
 8000182:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <updateTime+0x34>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	3b01      	subs	r3, #1
 8000188:	4a05      	ldr	r2, [pc, #20]	; (80001a0 <updateTime+0x34>)
 800018a:	6013      	str	r3, [r2, #0]
		time_2 --;
 800018c:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <updateTime+0x38>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	3b01      	subs	r3, #1
 8000192:	4a04      	ldr	r2, [pc, #16]	; (80001a4 <updateTime+0x38>)
 8000194:	6013      	str	r3, [r2, #0]
	}
}
 8000196:	bf00      	nop
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	2000010c 	.word	0x2000010c
 80001a0:	20000068 	.word	0x20000068
 80001a4:	2000006c 	.word	0x2000006c

080001a8 <update_buffer>:
void update_buffer(){
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
	buffer1[0] = ( time_1 - 1 )/ 10;
 80001ac:	4b45      	ldr	r3, [pc, #276]	; (80002c4 <update_buffer+0x11c>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	3b01      	subs	r3, #1
 80001b2:	4a45      	ldr	r2, [pc, #276]	; (80002c8 <update_buffer+0x120>)
 80001b4:	fb82 1203 	smull	r1, r2, r2, r3
 80001b8:	1092      	asrs	r2, r2, #2
 80001ba:	17db      	asrs	r3, r3, #31
 80001bc:	1ad3      	subs	r3, r2, r3
 80001be:	4a43      	ldr	r2, [pc, #268]	; (80002cc <update_buffer+0x124>)
 80001c0:	6013      	str	r3, [r2, #0]
	buffer1[1] =  (time_1 - 1)% 10;
 80001c2:	4b40      	ldr	r3, [pc, #256]	; (80002c4 <update_buffer+0x11c>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	1e59      	subs	r1, r3, #1
 80001c8:	4b3f      	ldr	r3, [pc, #252]	; (80002c8 <update_buffer+0x120>)
 80001ca:	fb83 2301 	smull	r2, r3, r3, r1
 80001ce:	109a      	asrs	r2, r3, #2
 80001d0:	17cb      	asrs	r3, r1, #31
 80001d2:	1ad2      	subs	r2, r2, r3
 80001d4:	4613      	mov	r3, r2
 80001d6:	009b      	lsls	r3, r3, #2
 80001d8:	4413      	add	r3, r2
 80001da:	005b      	lsls	r3, r3, #1
 80001dc:	1aca      	subs	r2, r1, r3
 80001de:	4b3b      	ldr	r3, [pc, #236]	; (80002cc <update_buffer+0x124>)
 80001e0:	605a      	str	r2, [r3, #4]
	buffer2[0] = (time_2-1) / 10;
 80001e2:	4b3b      	ldr	r3, [pc, #236]	; (80002d0 <update_buffer+0x128>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	3b01      	subs	r3, #1
 80001e8:	4a37      	ldr	r2, [pc, #220]	; (80002c8 <update_buffer+0x120>)
 80001ea:	fb82 1203 	smull	r1, r2, r2, r3
 80001ee:	1092      	asrs	r2, r2, #2
 80001f0:	17db      	asrs	r3, r3, #31
 80001f2:	1ad3      	subs	r3, r2, r3
 80001f4:	4a37      	ldr	r2, [pc, #220]	; (80002d4 <update_buffer+0x12c>)
 80001f6:	6013      	str	r3, [r2, #0]
	buffer2[1] = (time_2 -1) % 10;
 80001f8:	4b35      	ldr	r3, [pc, #212]	; (80002d0 <update_buffer+0x128>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	1e59      	subs	r1, r3, #1
 80001fe:	4b32      	ldr	r3, [pc, #200]	; (80002c8 <update_buffer+0x120>)
 8000200:	fb83 2301 	smull	r2, r3, r3, r1
 8000204:	109a      	asrs	r2, r3, #2
 8000206:	17cb      	asrs	r3, r1, #31
 8000208:	1ad2      	subs	r2, r2, r3
 800020a:	4613      	mov	r3, r2
 800020c:	009b      	lsls	r3, r3, #2
 800020e:	4413      	add	r3, r2
 8000210:	005b      	lsls	r3, r3, #1
 8000212:	1aca      	subs	r2, r1, r3
 8000214:	4b2f      	ldr	r3, [pc, #188]	; (80002d4 <update_buffer+0x12c>)
 8000216:	605a      	str	r2, [r3, #4]
	buffer_slect_red[0] = (time_red_select-1) / 10;
 8000218:	4b2f      	ldr	r3, [pc, #188]	; (80002d8 <update_buffer+0x130>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	3b01      	subs	r3, #1
 800021e:	4a2a      	ldr	r2, [pc, #168]	; (80002c8 <update_buffer+0x120>)
 8000220:	fb82 1203 	smull	r1, r2, r2, r3
 8000224:	1092      	asrs	r2, r2, #2
 8000226:	17db      	asrs	r3, r3, #31
 8000228:	1ad3      	subs	r3, r2, r3
 800022a:	4a2c      	ldr	r2, [pc, #176]	; (80002dc <update_buffer+0x134>)
 800022c:	6013      	str	r3, [r2, #0]
	buffer_slect_red[1] = (time_red_select-1) % 10;
 800022e:	4b2a      	ldr	r3, [pc, #168]	; (80002d8 <update_buffer+0x130>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	1e59      	subs	r1, r3, #1
 8000234:	4b24      	ldr	r3, [pc, #144]	; (80002c8 <update_buffer+0x120>)
 8000236:	fb83 2301 	smull	r2, r3, r3, r1
 800023a:	109a      	asrs	r2, r3, #2
 800023c:	17cb      	asrs	r3, r1, #31
 800023e:	1ad2      	subs	r2, r2, r3
 8000240:	4613      	mov	r3, r2
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	4413      	add	r3, r2
 8000246:	005b      	lsls	r3, r3, #1
 8000248:	1aca      	subs	r2, r1, r3
 800024a:	4b24      	ldr	r3, [pc, #144]	; (80002dc <update_buffer+0x134>)
 800024c:	605a      	str	r2, [r3, #4]
	buffer_slect_yellow[0] = (time_yellow_select - 1) / 10;
 800024e:	4b24      	ldr	r3, [pc, #144]	; (80002e0 <update_buffer+0x138>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	3b01      	subs	r3, #1
 8000254:	4a1c      	ldr	r2, [pc, #112]	; (80002c8 <update_buffer+0x120>)
 8000256:	fb82 1203 	smull	r1, r2, r2, r3
 800025a:	1092      	asrs	r2, r2, #2
 800025c:	17db      	asrs	r3, r3, #31
 800025e:	1ad3      	subs	r3, r2, r3
 8000260:	4a20      	ldr	r2, [pc, #128]	; (80002e4 <update_buffer+0x13c>)
 8000262:	6013      	str	r3, [r2, #0]
	buffer_slect_yellow[1] = (time_yellow_select - 1) % 10;
 8000264:	4b1e      	ldr	r3, [pc, #120]	; (80002e0 <update_buffer+0x138>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	1e59      	subs	r1, r3, #1
 800026a:	4b17      	ldr	r3, [pc, #92]	; (80002c8 <update_buffer+0x120>)
 800026c:	fb83 2301 	smull	r2, r3, r3, r1
 8000270:	109a      	asrs	r2, r3, #2
 8000272:	17cb      	asrs	r3, r1, #31
 8000274:	1ad2      	subs	r2, r2, r3
 8000276:	4613      	mov	r3, r2
 8000278:	009b      	lsls	r3, r3, #2
 800027a:	4413      	add	r3, r2
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	1aca      	subs	r2, r1, r3
 8000280:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <update_buffer+0x13c>)
 8000282:	605a      	str	r2, [r3, #4]
	buffer_slect_green[0] = (time_green_select - 1) / 10;
 8000284:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <update_buffer+0x140>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	3b01      	subs	r3, #1
 800028a:	4a0f      	ldr	r2, [pc, #60]	; (80002c8 <update_buffer+0x120>)
 800028c:	fb82 1203 	smull	r1, r2, r2, r3
 8000290:	1092      	asrs	r2, r2, #2
 8000292:	17db      	asrs	r3, r3, #31
 8000294:	1ad3      	subs	r3, r2, r3
 8000296:	4a15      	ldr	r2, [pc, #84]	; (80002ec <update_buffer+0x144>)
 8000298:	6013      	str	r3, [r2, #0]
	buffer_slect_green[1] = (time_green_select - 1) % 10;
 800029a:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <update_buffer+0x140>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	1e59      	subs	r1, r3, #1
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <update_buffer+0x120>)
 80002a2:	fb83 2301 	smull	r2, r3, r3, r1
 80002a6:	109a      	asrs	r2, r3, #2
 80002a8:	17cb      	asrs	r3, r1, #31
 80002aa:	1ad2      	subs	r2, r2, r3
 80002ac:	4613      	mov	r3, r2
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	4413      	add	r3, r2
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	1aca      	subs	r2, r1, r3
 80002b6:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <update_buffer+0x144>)
 80002b8:	605a      	str	r2, [r3, #4]
}
 80002ba:	bf00      	nop
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	20000068 	.word	0x20000068
 80002c8:	66666667 	.word	0x66666667
 80002cc:	20000020 	.word	0x20000020
 80002d0:	2000006c 	.word	0x2000006c
 80002d4:	20000028 	.word	0x20000028
 80002d8:	20000104 	.word	0x20000104
 80002dc:	20000030 	.word	0x20000030
 80002e0:	20000098 	.word	0x20000098
 80002e4:	20000038 	.word	0x20000038
 80002e8:	20000100 	.word	0x20000100
 80002ec:	20000040 	.word	0x20000040

080002f0 <update_Display>:

void update_Display(){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af06      	add	r7, sp, #24
	HAL_GPIO_WritePin(GPIO_enable[my_index], GPIO_enable_Pin[my_index],RESET);
 80002f6:	4b72      	ldr	r3, [pc, #456]	; (80004c0 <update_Display+0x1d0>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a72      	ldr	r2, [pc, #456]	; (80004c4 <update_Display+0x1d4>)
 80002fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000300:	4b6f      	ldr	r3, [pc, #444]	; (80004c0 <update_Display+0x1d0>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a70      	ldr	r2, [pc, #448]	; (80004c8 <update_Display+0x1d8>)
 8000306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800030a:	2200      	movs	r2, #0
 800030c:	4619      	mov	r1, r3
 800030e:	f000 fe0e 	bl	8000f2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_enable[1-my_index], GPIO_enable_Pin[1-my_index],SET);
 8000312:	4b6b      	ldr	r3, [pc, #428]	; (80004c0 <update_Display+0x1d0>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f1c3 0301 	rsb	r3, r3, #1
 800031a:	4a6a      	ldr	r2, [pc, #424]	; (80004c4 <update_Display+0x1d4>)
 800031c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000320:	4b67      	ldr	r3, [pc, #412]	; (80004c0 <update_Display+0x1d0>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f1c3 0301 	rsb	r3, r3, #1
 8000328:	4a67      	ldr	r2, [pc, #412]	; (80004c8 <update_Display+0x1d8>)
 800032a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800032e:	2201      	movs	r2, #1
 8000330:	4619      	mov	r1, r3
 8000332:	f000 fdfc 	bl	8000f2e <HAL_GPIO_WritePin>
switch(status){
 8000336:	4b65      	ldr	r3, [pc, #404]	; (80004cc <update_Display+0x1dc>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b0a      	cmp	r3, #10
 800033c:	d05f      	beq.n	80003fe <update_Display+0x10e>
 800033e:	2b0a      	cmp	r3, #10
 8000340:	f300 8089 	bgt.w	8000456 <update_Display+0x166>
 8000344:	2b08      	cmp	r3, #8
 8000346:	d002      	beq.n	800034e <update_Display+0x5e>
 8000348:	2b09      	cmp	r3, #9
 800034a:	d02c      	beq.n	80003a6 <update_Display+0xb6>
 800034c:	e083      	b.n	8000456 <update_Display+0x166>

case SET_TIME_RED:
	DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED1_0_Pin, SEGLED1_1_Pin, SEGLED1_2_Pin,
			SEGLED1_3_Pin, SEGLED1_4_Pin, SEGLED1_5_Pin, SEGLED1_6_Pin, buffer_slect_red[my_index]);
 800034e:	4b5c      	ldr	r3, [pc, #368]	; (80004c0 <update_Display+0x1d0>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a5f      	ldr	r2, [pc, #380]	; (80004d0 <update_Display+0x1e0>)
 8000354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED1_0_Pin, SEGLED1_1_Pin, SEGLED1_2_Pin,
 8000358:	b2db      	uxtb	r3, r3
 800035a:	9304      	str	r3, [sp, #16]
 800035c:	2340      	movs	r3, #64	; 0x40
 800035e:	9303      	str	r3, [sp, #12]
 8000360:	2320      	movs	r3, #32
 8000362:	9302      	str	r3, [sp, #8]
 8000364:	2310      	movs	r3, #16
 8000366:	9301      	str	r3, [sp, #4]
 8000368:	2308      	movs	r3, #8
 800036a:	9300      	str	r3, [sp, #0]
 800036c:	2304      	movs	r3, #4
 800036e:	2202      	movs	r2, #2
 8000370:	2101      	movs	r1, #1
 8000372:	4858      	ldr	r0, [pc, #352]	; (80004d4 <update_Display+0x1e4>)
 8000374:	f001 fdc4 	bl	8001f00 <DISPLAY_LED_7_SEGMENT>
	DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED2_0_Pin, SEGLED2_1_Pin, SEGLED2_2_Pin, SEGLED2_3_Pin, SEGLED2_4_Pin, SEGLED2_5_Pin, SEGLED2_6_Pin, 2);
 8000378:	2302      	movs	r3, #2
 800037a:	9304      	str	r3, [sp, #16]
 800037c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000380:	9303      	str	r3, [sp, #12]
 8000382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000386:	9302      	str	r3, [sp, #8]
 8000388:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000392:	9300      	str	r3, [sp, #0]
 8000394:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000398:	f44f 7280 	mov.w	r2, #256	; 0x100
 800039c:	2180      	movs	r1, #128	; 0x80
 800039e:	484d      	ldr	r0, [pc, #308]	; (80004d4 <update_Display+0x1e4>)
 80003a0:	f001 fdae 	bl	8001f00 <DISPLAY_LED_7_SEGMENT>
	break;
 80003a4:	e088      	b.n	80004b8 <update_Display+0x1c8>
case SET_TIME_YELLOW:
	DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED1_0_Pin, SEGLED1_1_Pin, SEGLED1_2_Pin,
			SEGLED1_3_Pin, SEGLED1_4_Pin, SEGLED1_5_Pin, SEGLED1_6_Pin, buffer_slect_yellow[my_index]);
 80003a6:	4b46      	ldr	r3, [pc, #280]	; (80004c0 <update_Display+0x1d0>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a4b      	ldr	r2, [pc, #300]	; (80004d8 <update_Display+0x1e8>)
 80003ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED1_0_Pin, SEGLED1_1_Pin, SEGLED1_2_Pin,
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	9304      	str	r3, [sp, #16]
 80003b4:	2340      	movs	r3, #64	; 0x40
 80003b6:	9303      	str	r3, [sp, #12]
 80003b8:	2320      	movs	r3, #32
 80003ba:	9302      	str	r3, [sp, #8]
 80003bc:	2310      	movs	r3, #16
 80003be:	9301      	str	r3, [sp, #4]
 80003c0:	2308      	movs	r3, #8
 80003c2:	9300      	str	r3, [sp, #0]
 80003c4:	2304      	movs	r3, #4
 80003c6:	2202      	movs	r2, #2
 80003c8:	2101      	movs	r1, #1
 80003ca:	4842      	ldr	r0, [pc, #264]	; (80004d4 <update_Display+0x1e4>)
 80003cc:	f001 fd98 	bl	8001f00 <DISPLAY_LED_7_SEGMENT>
	DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED2_0_Pin, SEGLED2_1_Pin, SEGLED2_2_Pin, SEGLED2_3_Pin, SEGLED2_4_Pin, SEGLED2_5_Pin, SEGLED2_6_Pin, 3);
 80003d0:	2303      	movs	r3, #3
 80003d2:	9304      	str	r3, [sp, #16]
 80003d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003d8:	9303      	str	r3, [sp, #12]
 80003da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003de:	9302      	str	r3, [sp, #8]
 80003e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003e4:	9301      	str	r3, [sp, #4]
 80003e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ea:	9300      	str	r3, [sp, #0]
 80003ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003f4:	2180      	movs	r1, #128	; 0x80
 80003f6:	4837      	ldr	r0, [pc, #220]	; (80004d4 <update_Display+0x1e4>)
 80003f8:	f001 fd82 	bl	8001f00 <DISPLAY_LED_7_SEGMENT>
	break;
 80003fc:	e05c      	b.n	80004b8 <update_Display+0x1c8>
case SET_TIME_GREEN:
	DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED1_0_Pin, SEGLED1_1_Pin, SEGLED1_2_Pin,
			SEGLED1_3_Pin, SEGLED1_4_Pin, SEGLED1_5_Pin, SEGLED1_6_Pin, buffer_slect_green[my_index]);
 80003fe:	4b30      	ldr	r3, [pc, #192]	; (80004c0 <update_Display+0x1d0>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a36      	ldr	r2, [pc, #216]	; (80004dc <update_Display+0x1ec>)
 8000404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED1_0_Pin, SEGLED1_1_Pin, SEGLED1_2_Pin,
 8000408:	b2db      	uxtb	r3, r3
 800040a:	9304      	str	r3, [sp, #16]
 800040c:	2340      	movs	r3, #64	; 0x40
 800040e:	9303      	str	r3, [sp, #12]
 8000410:	2320      	movs	r3, #32
 8000412:	9302      	str	r3, [sp, #8]
 8000414:	2310      	movs	r3, #16
 8000416:	9301      	str	r3, [sp, #4]
 8000418:	2308      	movs	r3, #8
 800041a:	9300      	str	r3, [sp, #0]
 800041c:	2304      	movs	r3, #4
 800041e:	2202      	movs	r2, #2
 8000420:	2101      	movs	r1, #1
 8000422:	482c      	ldr	r0, [pc, #176]	; (80004d4 <update_Display+0x1e4>)
 8000424:	f001 fd6c 	bl	8001f00 <DISPLAY_LED_7_SEGMENT>
	DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED2_0_Pin, SEGLED2_1_Pin, SEGLED2_2_Pin, SEGLED2_3_Pin, SEGLED2_4_Pin, SEGLED2_5_Pin, SEGLED2_6_Pin, 4);
 8000428:	2304      	movs	r3, #4
 800042a:	9304      	str	r3, [sp, #16]
 800042c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000430:	9303      	str	r3, [sp, #12]
 8000432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000436:	9302      	str	r3, [sp, #8]
 8000438:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800043c:	9301      	str	r3, [sp, #4]
 800043e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000448:	f44f 7280 	mov.w	r2, #256	; 0x100
 800044c:	2180      	movs	r1, #128	; 0x80
 800044e:	4821      	ldr	r0, [pc, #132]	; (80004d4 <update_Display+0x1e4>)
 8000450:	f001 fd56 	bl	8001f00 <DISPLAY_LED_7_SEGMENT>
	break;
 8000454:	e030      	b.n	80004b8 <update_Display+0x1c8>
default :
    DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED1_0_Pin, SEGLED1_1_Pin, SEGLED1_2_Pin,
    		SEGLED1_3_Pin, SEGLED1_4_Pin, SEGLED1_5_Pin, SEGLED1_6_Pin, buffer1[my_index]);
 8000456:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <update_Display+0x1d0>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a21      	ldr	r2, [pc, #132]	; (80004e0 <update_Display+0x1f0>)
 800045c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED1_0_Pin, SEGLED1_1_Pin, SEGLED1_2_Pin,
 8000460:	b2db      	uxtb	r3, r3
 8000462:	9304      	str	r3, [sp, #16]
 8000464:	2340      	movs	r3, #64	; 0x40
 8000466:	9303      	str	r3, [sp, #12]
 8000468:	2320      	movs	r3, #32
 800046a:	9302      	str	r3, [sp, #8]
 800046c:	2310      	movs	r3, #16
 800046e:	9301      	str	r3, [sp, #4]
 8000470:	2308      	movs	r3, #8
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	2304      	movs	r3, #4
 8000476:	2202      	movs	r2, #2
 8000478:	2101      	movs	r1, #1
 800047a:	4816      	ldr	r0, [pc, #88]	; (80004d4 <update_Display+0x1e4>)
 800047c:	f001 fd40 	bl	8001f00 <DISPLAY_LED_7_SEGMENT>
    DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED2_0_Pin, SEGLED2_1_Pin, SEGLED2_2_Pin,
    		SEGLED2_3_Pin, SEGLED2_4_Pin, SEGLED2_5_Pin, SEGLED2_6_Pin, buffer2[my_index]);
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <update_Display+0x1d0>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a17      	ldr	r2, [pc, #92]	; (80004e4 <update_Display+0x1f4>)
 8000486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED2_0_Pin, SEGLED2_1_Pin, SEGLED2_2_Pin,
 800048a:	b2db      	uxtb	r3, r3
 800048c:	9304      	str	r3, [sp, #16]
 800048e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000492:	9303      	str	r3, [sp, #12]
 8000494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000498:	9302      	str	r3, [sp, #8]
 800049a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800049e:	9301      	str	r3, [sp, #4]
 80004a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004ae:	2180      	movs	r1, #128	; 0x80
 80004b0:	4808      	ldr	r0, [pc, #32]	; (80004d4 <update_Display+0x1e4>)
 80004b2:	f001 fd25 	bl	8001f00 <DISPLAY_LED_7_SEGMENT>
    break;
 80004b6:	bf00      	nop
}

}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000048 	.word	0x20000048
 80004c4:	20000000 	.word	0x20000000
 80004c8:	20000008 	.word	0x20000008
 80004cc:	20000070 	.word	0x20000070
 80004d0:	20000030 	.word	0x20000030
 80004d4:	40010c00 	.word	0x40010c00
 80004d8:	20000038 	.word	0x20000038
 80004dc:	20000040 	.word	0x20000040
 80004e0:	20000020 	.word	0x20000020
 80004e4:	20000028 	.word	0x20000028

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fa1d 	bl	800092c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f855 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f8db 	bl	80006b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004fa:	f000 f88d 	bl	8000618 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004fe:	4822      	ldr	r0, [pc, #136]	; (8000588 <main+0xa0>)
 8000500:	f001 f972 	bl	80017e8 <HAL_TIM_Base_Start_IT>
  ex4_init();
 8000504:	f7ff fe22 	bl	800014c <ex4_init>
  ex5_init();
 8000508:	f7ff fe2a 	bl	8000160 <ex5_init>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000512:	481e      	ldr	r0, [pc, #120]	; (800058c <main+0xa4>)
 8000514:	f000 fd0b 	bl	8000f2e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800051e:	481b      	ldr	r0, [pc, #108]	; (800058c <main+0xa4>)
 8000520:	f000 fd05 	bl	8000f2e <HAL_GPIO_WritePin>

  setTimer1(3, 500);
 8000524:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000528:	2003      	movs	r0, #3
 800052a:	f002 fbef 	bl	8002d0c <setTimer1>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timer1_flag[3] == 1){
 800052e:	4b18      	ldr	r3, [pc, #96]	; (8000590 <main+0xa8>)
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d10a      	bne.n	800054c <main+0x64>
		  setTimer1(3, 500);
 8000536:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800053a:	2003      	movs	r0, #3
 800053c:	f002 fbe6 	bl	8002d0c <setTimer1>

		  my_index = 1-my_index;
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <main+0xac>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f1c3 0301 	rsb	r3, r3, #1
 8000548:	4a12      	ldr	r2, [pc, #72]	; (8000594 <main+0xac>)
 800054a:	6013      	str	r3, [r2, #0]
	  }
	  update_buffer();
 800054c:	f7ff fe2c 	bl	80001a8 <update_buffer>
	  updateTime();
 8000550:	f7ff fe0c 	bl	800016c <updateTime>
	  update_Display();
 8000554:	f7ff fecc 	bl	80002f0 <update_Display>
	  automatic_run();
 8000558:	f002 fac6 	bl	8002ae8 <automatic_run>
	  manual_run();
 800055c:	f002 fba6 	bl	8002cac <manual_run>
	  traffic_double_display(GPIOA, RED_1_Pin, YELLOW_1_Pin, GREEN_1_Pin, GPIOA, RED_2_Pin, YELLOW_2_Pin, GREEN_2_Pin, status);
 8000560:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <main+0xb0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	9304      	str	r3, [sp, #16]
 8000566:	2340      	movs	r3, #64	; 0x40
 8000568:	9303      	str	r3, [sp, #12]
 800056a:	2380      	movs	r3, #128	; 0x80
 800056c:	9302      	str	r3, [sp, #8]
 800056e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000572:	9301      	str	r3, [sp, #4]
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <main+0xb4>)
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	2302      	movs	r3, #2
 800057a:	2204      	movs	r2, #4
 800057c:	2108      	movs	r1, #8
 800057e:	4807      	ldr	r0, [pc, #28]	; (800059c <main+0xb4>)
 8000580:	f001 fec6 	bl	8002310 <traffic_double_display>
	  if(timer1_flag[3] == 1){
 8000584:	e7d3      	b.n	800052e <main+0x46>
 8000586:	bf00      	nop
 8000588:	200000b4 	.word	0x200000b4
 800058c:	40010c00 	.word	0x40010c00
 8000590:	2000010c 	.word	0x2000010c
 8000594:	20000048 	.word	0x20000048
 8000598:	20000070 	.word	0x20000070
 800059c:	40010800 	.word	0x40010800

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b090      	sub	sp, #64	; 0x40
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0318 	add.w	r3, r7, #24
 80005aa:	2228      	movs	r2, #40	; 0x28
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fc32 	bl	8002e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c2:	2302      	movs	r3, #2
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	2301      	movs	r3, #1
 80005c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ca:	2310      	movs	r3, #16
 80005cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ce:	2300      	movs	r3, #0
 80005d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d2:	f107 0318 	add.w	r3, r7, #24
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fcda 	bl	8000f90 <HAL_RCC_OscConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005e2:	f000 f8e9 	bl	80007b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 ff46 	bl	8001490 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800060a:	f000 f8d5 	bl	80007b8 <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3740      	adds	r7, #64	; 0x40
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061e:	f107 0308 	add.w	r3, r7, #8
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062c:	463b      	mov	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000634:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <MX_TIM2_Init+0x94>)
 8000636:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800063a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_TIM2_Init+0x94>)
 800063e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000642:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <MX_TIM2_Init+0x94>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_TIM2_Init+0x94>)
 800064c:	2209      	movs	r2, #9
 800064e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MX_TIM2_Init+0x94>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_TIM2_Init+0x94>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800065c:	4813      	ldr	r0, [pc, #76]	; (80006ac <MX_TIM2_Init+0x94>)
 800065e:	f001 f873 	bl	8001748 <HAL_TIM_Base_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000668:	f000 f8a6 	bl	80007b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800066c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000670:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	4619      	mov	r1, r3
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <MX_TIM2_Init+0x94>)
 800067a:	f001 f9f1 	bl	8001a60 <HAL_TIM_ConfigClockSource>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000684:	f000 f898 	bl	80007b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000688:	2300      	movs	r3, #0
 800068a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	4619      	mov	r1, r3
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_TIM2_Init+0x94>)
 8000696:	f001 fbc9 	bl	8001e2c <HAL_TIMEx_MasterConfigSynchronization>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006a0:	f000 f88a 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200000b4 	.word	0x200000b4

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 0310 	add.w	r3, r7, #16
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c4:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a2e      	ldr	r2, [pc, #184]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006ca:	f043 0310 	orr.w	r3, r3, #16
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f003 0310 	and.w	r3, r3, #16
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	4b29      	ldr	r3, [pc, #164]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a28      	ldr	r2, [pc, #160]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006e2:	f043 0304 	orr.w	r3, r3, #4
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a22      	ldr	r2, [pc, #136]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006fa:	f043 0308 	orr.w	r3, r3, #8
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_GPIO_Init+0xd4>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0308 	and.w	r3, r3, #8
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin|YELLOW_1_Pin|RED_1_Pin|LED_RED_Pin
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 8000712:	481d      	ldr	r0, [pc, #116]	; (8000788 <MX_GPIO_Init+0xd8>)
 8000714:	f000 fc0b 	bl	8000f2e <HAL_GPIO_WritePin>
                          |GREEN_2_Pin|YELLOW_2_Pin|RED_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEGLED1_0_Pin|SEGLED1_1_Pin|SEGLED1_2_Pin|SEGLED2_3_Pin
 8000718:	2200      	movs	r2, #0
 800071a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800071e:	481b      	ldr	r0, [pc, #108]	; (800078c <MX_GPIO_Init+0xdc>)
 8000720:	f000 fc05 	bl	8000f2e <HAL_GPIO_WritePin>
                          |SEGLED2_4_Pin|SEGLED2_5_Pin|SEGLED2_6_Pin|EN1_Pin
                          |EN2_Pin|SEGLED1_3_Pin|SEGLED1_4_Pin|SEGLED1_5_Pin
                          |SEGLED1_6_Pin|SEGLED2_0_Pin|SEGLED2_1_Pin|SEGLED2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000724:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800072e:	2301      	movs	r3, #1
 8000730:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	4619      	mov	r1, r3
 8000738:	4815      	ldr	r0, [pc, #84]	; (8000790 <MX_GPIO_Init+0xe0>)
 800073a:	f000 fa67 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_1_Pin YELLOW_1_Pin RED_1_Pin LED_RED_Pin
                           GREEN_2_Pin YELLOW_2_Pin RED_2_Pin */
  GPIO_InitStruct.Pin = GREEN_1_Pin|YELLOW_1_Pin|RED_1_Pin|LED_RED_Pin
 800073e:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
 8000742:	613b      	str	r3, [r7, #16]
                          |GREEN_2_Pin|YELLOW_2_Pin|RED_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2302      	movs	r3, #2
 800074e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	4619      	mov	r1, r3
 8000756:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_GPIO_Init+0xd8>)
 8000758:	f000 fa58 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEGLED1_0_Pin SEGLED1_1_Pin SEGLED1_2_Pin SEGLED2_3_Pin
                           SEGLED2_4_Pin SEGLED2_5_Pin SEGLED2_6_Pin EN1_Pin
                           EN2_Pin SEGLED1_3_Pin SEGLED1_4_Pin SEGLED1_5_Pin
                           SEGLED1_6_Pin SEGLED2_0_Pin SEGLED2_1_Pin SEGLED2_2_Pin */
  GPIO_InitStruct.Pin = SEGLED1_0_Pin|SEGLED1_1_Pin|SEGLED1_2_Pin|SEGLED2_3_Pin
 800075c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000760:	613b      	str	r3, [r7, #16]
                          |SEGLED2_4_Pin|SEGLED2_5_Pin|SEGLED2_6_Pin|EN1_Pin
                          |EN2_Pin|SEGLED1_3_Pin|SEGLED1_4_Pin|SEGLED1_5_Pin
                          |SEGLED1_6_Pin|SEGLED2_0_Pin|SEGLED2_1_Pin|SEGLED2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2302      	movs	r3, #2
 800076c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_GPIO_Init+0xdc>)
 8000776:	f000 fa49 	bl	8000c0c <HAL_GPIO_Init>

}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000
 8000788:	40010800 	.word	0x40010800
 800078c:	40010c00 	.word	0x40010c00
 8000790:	40011000 	.word	0x40011000

08000794 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	timerRun();
 800079c:	f002 fae8 	bl	8002d70 <timerRun>
	button_reading(GPIOx, GPIO_Pin);
 80007a0:	4903      	ldr	r1, [pc, #12]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80007a2:	4804      	ldr	r0, [pc, #16]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a4:	f002 f9ce 	bl	8002b44 <button_reading>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000018 	.word	0x20000018
 80007b4:	2000000c 	.word	0x2000000c

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <Error_Handler+0x8>
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <HAL_MspInit+0x5c>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	4a14      	ldr	r2, [pc, #80]	; (8000820 <HAL_MspInit+0x5c>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6193      	str	r3, [r2, #24]
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_MspInit+0x5c>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_MspInit+0x5c>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <HAL_MspInit+0x5c>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <HAL_MspInit+0x5c>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <HAL_MspInit+0x60>)
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <HAL_MspInit+0x60>)
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	40021000 	.word	0x40021000
 8000824:	40010000 	.word	0x40010000

08000828 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000838:	d113      	bne.n	8000862 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <HAL_TIM_Base_MspInit+0x44>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	4a0b      	ldr	r2, [pc, #44]	; (800086c <HAL_TIM_Base_MspInit+0x44>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	61d3      	str	r3, [r2, #28]
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_TIM_Base_MspInit+0x44>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	201c      	movs	r0, #28
 8000858:	f000 f9a1 	bl	8000b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800085c:	201c      	movs	r0, #28
 800085e:	f000 f9ba 	bl	8000bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b6:	f000 f87f 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <TIM2_IRQHandler+0x10>)
 80008c6:	f000 ffdb 	bl	8001880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000b4 	.word	0x200000b4

080008d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e0:	f7ff fff8 	bl	80008d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008e6:	490c      	ldr	r1, [pc, #48]	; (8000918 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008e8:	4a0c      	ldr	r2, [pc, #48]	; (800091c <LoopFillZerobss+0x16>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a09      	ldr	r2, [pc, #36]	; (8000920 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008fc:	4c09      	ldr	r4, [pc, #36]	; (8000924 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090a:	f002 fa61 	bl	8002dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090e:	f7ff fdeb 	bl	80004e8 <main>
  bx lr
 8000912:	4770      	bx	lr
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800091c:	08002e6c 	.word	0x08002e6c
  ldr r2, =_sbss
 8000920:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000924:	2000015c 	.word	0x2000015c

08000928 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC1_2_IRQHandler>
	...

0800092c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_Init+0x28>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_Init+0x28>)
 8000936:	f043 0310 	orr.w	r3, r3, #16
 800093a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f923 	bl	8000b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000942:	200f      	movs	r0, #15
 8000944:	f000 f808 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000948:	f7ff ff3c 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40022000 	.word	0x40022000

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x54>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x58>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f93b 	bl	8000bf2 <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e00e      	b.n	80009a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d80a      	bhi.n	80009a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f000 f903 	bl	8000b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <HAL_InitTick+0x5c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000004c 	.word	0x2000004c
 80009b0:	20000054 	.word	0x20000054
 80009b4:	20000050 	.word	0x20000050

080009b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <HAL_IncTick+0x1c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_IncTick+0x20>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a03      	ldr	r2, [pc, #12]	; (80009d8 <HAL_IncTick+0x20>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	20000054 	.word	0x20000054
 80009d8:	200000fc 	.word	0x200000fc

080009dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b02      	ldr	r3, [pc, #8]	; (80009ec <HAL_GetTick+0x10>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	200000fc 	.word	0x200000fc

080009f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <__NVIC_GetPriorityGrouping+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	f003 0307 	and.w	r3, r3, #7
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	db0b      	blt.n	8000a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	f003 021f 	and.w	r2, r3, #31
 8000a6c:	4906      	ldr	r1, [pc, #24]	; (8000a88 <__NVIC_EnableIRQ+0x34>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	095b      	lsrs	r3, r3, #5
 8000a74:	2001      	movs	r0, #1
 8000a76:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	e000e100 	.word	0xe000e100

08000a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	6039      	str	r1, [r7, #0]
 8000a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	db0a      	blt.n	8000ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	490c      	ldr	r1, [pc, #48]	; (8000ad8 <__NVIC_SetPriority+0x4c>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	0112      	lsls	r2, r2, #4
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	440b      	add	r3, r1
 8000ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab4:	e00a      	b.n	8000acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4908      	ldr	r1, [pc, #32]	; (8000adc <__NVIC_SetPriority+0x50>)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	f003 030f 	and.w	r3, r3, #15
 8000ac2:	3b04      	subs	r3, #4
 8000ac4:	0112      	lsls	r2, r2, #4
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	440b      	add	r3, r1
 8000aca:	761a      	strb	r2, [r3, #24]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000e100 	.word	0xe000e100
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	; 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	f1c3 0307 	rsb	r3, r3, #7
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	bf28      	it	cs
 8000afe:	2304      	movcs	r3, #4
 8000b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3304      	adds	r3, #4
 8000b06:	2b06      	cmp	r3, #6
 8000b08:	d902      	bls.n	8000b10 <NVIC_EncodePriority+0x30>
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3b03      	subs	r3, #3
 8000b0e:	e000      	b.n	8000b12 <NVIC_EncodePriority+0x32>
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	f04f 32ff 	mov.w	r2, #4294967295
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	401a      	ands	r2, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b28:	f04f 31ff 	mov.w	r1, #4294967295
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	43d9      	mvns	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	4313      	orrs	r3, r2
         );
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3724      	adds	r7, #36	; 0x24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b54:	d301      	bcc.n	8000b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00f      	b.n	8000b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <SysTick_Config+0x40>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b62:	210f      	movs	r1, #15
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f7ff ff90 	bl	8000a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <SysTick_Config+0x40>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <SysTick_Config+0x40>)
 8000b74:	2207      	movs	r2, #7
 8000b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	e000e010 	.word	0xe000e010

08000b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff2d 	bl	80009f0 <__NVIC_SetPriorityGrouping>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb0:	f7ff ff42 	bl	8000a38 <__NVIC_GetPriorityGrouping>
 8000bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	6978      	ldr	r0, [r7, #20]
 8000bbc:	f7ff ff90 	bl	8000ae0 <NVIC_EncodePriority>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff5f 	bl	8000a8c <__NVIC_SetPriority>
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff35 	bl	8000a54 <__NVIC_EnableIRQ>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ffa2 	bl	8000b44 <SysTick_Config>
 8000c00:	4603      	mov	r3, r0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b08b      	sub	sp, #44	; 0x2c
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1e:	e148      	b.n	8000eb2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c20:	2201      	movs	r2, #1
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	4013      	ands	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	f040 8137 	bne.w	8000eac <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	4aa3      	ldr	r2, [pc, #652]	; (8000ed0 <HAL_GPIO_Init+0x2c4>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d05e      	beq.n	8000d06 <HAL_GPIO_Init+0xfa>
 8000c48:	4aa1      	ldr	r2, [pc, #644]	; (8000ed0 <HAL_GPIO_Init+0x2c4>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d875      	bhi.n	8000d3a <HAL_GPIO_Init+0x12e>
 8000c4e:	4aa1      	ldr	r2, [pc, #644]	; (8000ed4 <HAL_GPIO_Init+0x2c8>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d058      	beq.n	8000d06 <HAL_GPIO_Init+0xfa>
 8000c54:	4a9f      	ldr	r2, [pc, #636]	; (8000ed4 <HAL_GPIO_Init+0x2c8>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d86f      	bhi.n	8000d3a <HAL_GPIO_Init+0x12e>
 8000c5a:	4a9f      	ldr	r2, [pc, #636]	; (8000ed8 <HAL_GPIO_Init+0x2cc>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d052      	beq.n	8000d06 <HAL_GPIO_Init+0xfa>
 8000c60:	4a9d      	ldr	r2, [pc, #628]	; (8000ed8 <HAL_GPIO_Init+0x2cc>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d869      	bhi.n	8000d3a <HAL_GPIO_Init+0x12e>
 8000c66:	4a9d      	ldr	r2, [pc, #628]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d04c      	beq.n	8000d06 <HAL_GPIO_Init+0xfa>
 8000c6c:	4a9b      	ldr	r2, [pc, #620]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d863      	bhi.n	8000d3a <HAL_GPIO_Init+0x12e>
 8000c72:	4a9b      	ldr	r2, [pc, #620]	; (8000ee0 <HAL_GPIO_Init+0x2d4>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d046      	beq.n	8000d06 <HAL_GPIO_Init+0xfa>
 8000c78:	4a99      	ldr	r2, [pc, #612]	; (8000ee0 <HAL_GPIO_Init+0x2d4>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d85d      	bhi.n	8000d3a <HAL_GPIO_Init+0x12e>
 8000c7e:	2b12      	cmp	r3, #18
 8000c80:	d82a      	bhi.n	8000cd8 <HAL_GPIO_Init+0xcc>
 8000c82:	2b12      	cmp	r3, #18
 8000c84:	d859      	bhi.n	8000d3a <HAL_GPIO_Init+0x12e>
 8000c86:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <HAL_GPIO_Init+0x80>)
 8000c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8c:	08000d07 	.word	0x08000d07
 8000c90:	08000ce1 	.word	0x08000ce1
 8000c94:	08000cf3 	.word	0x08000cf3
 8000c98:	08000d35 	.word	0x08000d35
 8000c9c:	08000d3b 	.word	0x08000d3b
 8000ca0:	08000d3b 	.word	0x08000d3b
 8000ca4:	08000d3b 	.word	0x08000d3b
 8000ca8:	08000d3b 	.word	0x08000d3b
 8000cac:	08000d3b 	.word	0x08000d3b
 8000cb0:	08000d3b 	.word	0x08000d3b
 8000cb4:	08000d3b 	.word	0x08000d3b
 8000cb8:	08000d3b 	.word	0x08000d3b
 8000cbc:	08000d3b 	.word	0x08000d3b
 8000cc0:	08000d3b 	.word	0x08000d3b
 8000cc4:	08000d3b 	.word	0x08000d3b
 8000cc8:	08000d3b 	.word	0x08000d3b
 8000ccc:	08000d3b 	.word	0x08000d3b
 8000cd0:	08000ce9 	.word	0x08000ce9
 8000cd4:	08000cfd 	.word	0x08000cfd
 8000cd8:	4a82      	ldr	r2, [pc, #520]	; (8000ee4 <HAL_GPIO_Init+0x2d8>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d013      	beq.n	8000d06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cde:	e02c      	b.n	8000d3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	623b      	str	r3, [r7, #32]
          break;
 8000ce6:	e029      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	3304      	adds	r3, #4
 8000cee:	623b      	str	r3, [r7, #32]
          break;
 8000cf0:	e024      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	3308      	adds	r3, #8
 8000cf8:	623b      	str	r3, [r7, #32]
          break;
 8000cfa:	e01f      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	330c      	adds	r3, #12
 8000d02:	623b      	str	r3, [r7, #32]
          break;
 8000d04:	e01a      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d102      	bne.n	8000d14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	623b      	str	r3, [r7, #32]
          break;
 8000d12:	e013      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d105      	bne.n	8000d28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	611a      	str	r2, [r3, #16]
          break;
 8000d26:	e009      	b.n	8000d3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	69fa      	ldr	r2, [r7, #28]
 8000d30:	615a      	str	r2, [r3, #20]
          break;
 8000d32:	e003      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
          break;
 8000d38:	e000      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          break;
 8000d3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	2bff      	cmp	r3, #255	; 0xff
 8000d40:	d801      	bhi.n	8000d46 <HAL_GPIO_Init+0x13a>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	e001      	b.n	8000d4a <HAL_GPIO_Init+0x13e>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	2bff      	cmp	r3, #255	; 0xff
 8000d50:	d802      	bhi.n	8000d58 <HAL_GPIO_Init+0x14c>
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	e002      	b.n	8000d5e <HAL_GPIO_Init+0x152>
 8000d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5a:	3b08      	subs	r3, #8
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	210f      	movs	r1, #15
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	401a      	ands	r2, r3
 8000d70:	6a39      	ldr	r1, [r7, #32]
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	fa01 f303 	lsl.w	r3, r1, r3
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 8090 	beq.w	8000eac <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d8c:	4b56      	ldr	r3, [pc, #344]	; (8000ee8 <HAL_GPIO_Init+0x2dc>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a55      	ldr	r2, [pc, #340]	; (8000ee8 <HAL_GPIO_Init+0x2dc>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b53      	ldr	r3, [pc, #332]	; (8000ee8 <HAL_GPIO_Init+0x2dc>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000da4:	4a51      	ldr	r2, [pc, #324]	; (8000eec <HAL_GPIO_Init+0x2e0>)
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	089b      	lsrs	r3, r3, #2
 8000daa:	3302      	adds	r3, #2
 8000dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	220f      	movs	r2, #15
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a49      	ldr	r2, [pc, #292]	; (8000ef0 <HAL_GPIO_Init+0x2e4>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d00d      	beq.n	8000dec <HAL_GPIO_Init+0x1e0>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a48      	ldr	r2, [pc, #288]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d007      	beq.n	8000de8 <HAL_GPIO_Init+0x1dc>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a47      	ldr	r2, [pc, #284]	; (8000ef8 <HAL_GPIO_Init+0x2ec>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d101      	bne.n	8000de4 <HAL_GPIO_Init+0x1d8>
 8000de0:	2302      	movs	r3, #2
 8000de2:	e004      	b.n	8000dee <HAL_GPIO_Init+0x1e2>
 8000de4:	2303      	movs	r3, #3
 8000de6:	e002      	b.n	8000dee <HAL_GPIO_Init+0x1e2>
 8000de8:	2301      	movs	r3, #1
 8000dea:	e000      	b.n	8000dee <HAL_GPIO_Init+0x1e2>
 8000dec:	2300      	movs	r3, #0
 8000dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000df0:	f002 0203 	and.w	r2, r2, #3
 8000df4:	0092      	lsls	r2, r2, #2
 8000df6:	4093      	lsls	r3, r2
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dfe:	493b      	ldr	r1, [pc, #236]	; (8000eec <HAL_GPIO_Init+0x2e0>)
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	3302      	adds	r3, #2
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d006      	beq.n	8000e26 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e18:	4b38      	ldr	r3, [pc, #224]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	4937      	ldr	r1, [pc, #220]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	608b      	str	r3, [r1, #8]
 8000e24:	e006      	b.n	8000e34 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e26:	4b35      	ldr	r3, [pc, #212]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	4933      	ldr	r1, [pc, #204]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e30:	4013      	ands	r3, r2
 8000e32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d006      	beq.n	8000e4e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e40:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	492d      	ldr	r1, [pc, #180]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	60cb      	str	r3, [r1, #12]
 8000e4c:	e006      	b.n	8000e5c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e4e:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e50:	68da      	ldr	r2, [r3, #12]
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	4929      	ldr	r1, [pc, #164]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d006      	beq.n	8000e76 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e68:	4b24      	ldr	r3, [pc, #144]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	4923      	ldr	r1, [pc, #140]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	604b      	str	r3, [r1, #4]
 8000e74:	e006      	b.n	8000e84 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	491f      	ldr	r1, [pc, #124]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e80:	4013      	ands	r3, r2
 8000e82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d006      	beq.n	8000e9e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4919      	ldr	r1, [pc, #100]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	600b      	str	r3, [r1, #0]
 8000e9c:	e006      	b.n	8000eac <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	4915      	ldr	r1, [pc, #84]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	3301      	adds	r3, #1
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f47f aeaf 	bne.w	8000c20 <HAL_GPIO_Init+0x14>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	bf00      	nop
 8000ec6:	372c      	adds	r7, #44	; 0x2c
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	10320000 	.word	0x10320000
 8000ed4:	10310000 	.word	0x10310000
 8000ed8:	10220000 	.word	0x10220000
 8000edc:	10210000 	.word	0x10210000
 8000ee0:	10120000 	.word	0x10120000
 8000ee4:	10110000 	.word	0x10110000
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40010000 	.word	0x40010000
 8000ef0:	40010800 	.word	0x40010800
 8000ef4:	40010c00 	.word	0x40010c00
 8000ef8:	40011000 	.word	0x40011000
 8000efc:	40010400 	.word	0x40010400

08000f00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	887b      	ldrh	r3, [r7, #2]
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e001      	b.n	8000f22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr

08000f2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	460b      	mov	r3, r1
 8000f38:	807b      	strh	r3, [r7, #2]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f3e:	787b      	ldrb	r3, [r7, #1]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f44:	887a      	ldrh	r2, [r7, #2]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f4a:	e003      	b.n	8000f54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f4c:	887b      	ldrh	r3, [r7, #2]
 8000f4e:	041a      	lsls	r2, r3, #16
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	611a      	str	r2, [r3, #16]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr

08000f5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b085      	sub	sp, #20
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f70:	887a      	ldrh	r2, [r7, #2]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4013      	ands	r3, r2
 8000f76:	041a      	lsls	r2, r3, #16
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	887b      	ldrh	r3, [r7, #2]
 8000f7e:	400b      	ands	r3, r1
 8000f80:	431a      	orrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	611a      	str	r2, [r3, #16]
}
 8000f86:	bf00      	nop
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e26c      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 8087 	beq.w	80010be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fb0:	4b92      	ldr	r3, [pc, #584]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 030c 	and.w	r3, r3, #12
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d00c      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fbc:	4b8f      	ldr	r3, [pc, #572]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 030c 	and.w	r3, r3, #12
 8000fc4:	2b08      	cmp	r3, #8
 8000fc6:	d112      	bne.n	8000fee <HAL_RCC_OscConfig+0x5e>
 8000fc8:	4b8c      	ldr	r3, [pc, #560]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd4:	d10b      	bne.n	8000fee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd6:	4b89      	ldr	r3, [pc, #548]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d06c      	beq.n	80010bc <HAL_RCC_OscConfig+0x12c>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d168      	bne.n	80010bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e246      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff6:	d106      	bne.n	8001006 <HAL_RCC_OscConfig+0x76>
 8000ff8:	4b80      	ldr	r3, [pc, #512]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a7f      	ldr	r2, [pc, #508]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	e02e      	b.n	8001064 <HAL_RCC_OscConfig+0xd4>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10c      	bne.n	8001028 <HAL_RCC_OscConfig+0x98>
 800100e:	4b7b      	ldr	r3, [pc, #492]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a7a      	ldr	r2, [pc, #488]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b78      	ldr	r3, [pc, #480]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a77      	ldr	r2, [pc, #476]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e01d      	b.n	8001064 <HAL_RCC_OscConfig+0xd4>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001030:	d10c      	bne.n	800104c <HAL_RCC_OscConfig+0xbc>
 8001032:	4b72      	ldr	r3, [pc, #456]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a71      	ldr	r2, [pc, #452]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	4b6f      	ldr	r3, [pc, #444]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a6e      	ldr	r2, [pc, #440]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	e00b      	b.n	8001064 <HAL_RCC_OscConfig+0xd4>
 800104c:	4b6b      	ldr	r3, [pc, #428]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a6a      	ldr	r2, [pc, #424]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b68      	ldr	r3, [pc, #416]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a67      	ldr	r2, [pc, #412]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 800105e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001062:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d013      	beq.n	8001094 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff fcb6 	bl	80009dc <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001074:	f7ff fcb2 	bl	80009dc <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b64      	cmp	r3, #100	; 0x64
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e1fa      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001086:	4b5d      	ldr	r3, [pc, #372]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f0      	beq.n	8001074 <HAL_RCC_OscConfig+0xe4>
 8001092:	e014      	b.n	80010be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff fca2 	bl	80009dc <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800109c:	f7ff fc9e 	bl	80009dc <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b64      	cmp	r3, #100	; 0x64
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e1e6      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ae:	4b53      	ldr	r3, [pc, #332]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f0      	bne.n	800109c <HAL_RCC_OscConfig+0x10c>
 80010ba:	e000      	b.n	80010be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d063      	beq.n	8001192 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ca:	4b4c      	ldr	r3, [pc, #304]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00b      	beq.n	80010ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010d6:	4b49      	ldr	r3, [pc, #292]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 030c 	and.w	r3, r3, #12
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d11c      	bne.n	800111c <HAL_RCC_OscConfig+0x18c>
 80010e2:	4b46      	ldr	r3, [pc, #280]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d116      	bne.n	800111c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ee:	4b43      	ldr	r3, [pc, #268]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d005      	beq.n	8001106 <HAL_RCC_OscConfig+0x176>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d001      	beq.n	8001106 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e1ba      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001106:	4b3d      	ldr	r3, [pc, #244]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4939      	ldr	r1, [pc, #228]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001116:	4313      	orrs	r3, r2
 8001118:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111a:	e03a      	b.n	8001192 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d020      	beq.n	8001166 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001124:	4b36      	ldr	r3, [pc, #216]	; (8001200 <HAL_RCC_OscConfig+0x270>)
 8001126:	2201      	movs	r2, #1
 8001128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112a:	f7ff fc57 	bl	80009dc <HAL_GetTick>
 800112e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001132:	f7ff fc53 	bl	80009dc <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e19b      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001144:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f0      	beq.n	8001132 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001150:	4b2a      	ldr	r3, [pc, #168]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	4927      	ldr	r1, [pc, #156]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001160:	4313      	orrs	r3, r2
 8001162:	600b      	str	r3, [r1, #0]
 8001164:	e015      	b.n	8001192 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001166:	4b26      	ldr	r3, [pc, #152]	; (8001200 <HAL_RCC_OscConfig+0x270>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fc36 	bl	80009dc <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001174:	f7ff fc32 	bl	80009dc <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e17a      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f0      	bne.n	8001174 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d03a      	beq.n	8001214 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d019      	beq.n	80011da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_RCC_OscConfig+0x274>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ac:	f7ff fc16 	bl	80009dc <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b4:	f7ff fc12 	bl	80009dc <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e15a      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f000 fa9a 	bl	800170c <RCC_Delay>
 80011d8:	e01c      	b.n	8001214 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_RCC_OscConfig+0x274>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e0:	f7ff fbfc 	bl	80009dc <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e6:	e00f      	b.n	8001208 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e8:	f7ff fbf8 	bl	80009dc <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d908      	bls.n	8001208 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e140      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	42420000 	.word	0x42420000
 8001204:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001208:	4b9e      	ldr	r3, [pc, #632]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1e9      	bne.n	80011e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80a6 	beq.w	800136e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001226:	4b97      	ldr	r3, [pc, #604]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10d      	bne.n	800124e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	4b94      	ldr	r3, [pc, #592]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a93      	ldr	r2, [pc, #588]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b91      	ldr	r3, [pc, #580]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800124a:	2301      	movs	r3, #1
 800124c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124e:	4b8e      	ldr	r3, [pc, #568]	; (8001488 <HAL_RCC_OscConfig+0x4f8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001256:	2b00      	cmp	r3, #0
 8001258:	d118      	bne.n	800128c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800125a:	4b8b      	ldr	r3, [pc, #556]	; (8001488 <HAL_RCC_OscConfig+0x4f8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a8a      	ldr	r2, [pc, #552]	; (8001488 <HAL_RCC_OscConfig+0x4f8>)
 8001260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001266:	f7ff fbb9 	bl	80009dc <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800126e:	f7ff fbb5 	bl	80009dc <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b64      	cmp	r3, #100	; 0x64
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e0fd      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001280:	4b81      	ldr	r3, [pc, #516]	; (8001488 <HAL_RCC_OscConfig+0x4f8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d106      	bne.n	80012a2 <HAL_RCC_OscConfig+0x312>
 8001294:	4b7b      	ldr	r3, [pc, #492]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	4a7a      	ldr	r2, [pc, #488]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6213      	str	r3, [r2, #32]
 80012a0:	e02d      	b.n	80012fe <HAL_RCC_OscConfig+0x36e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10c      	bne.n	80012c4 <HAL_RCC_OscConfig+0x334>
 80012aa:	4b76      	ldr	r3, [pc, #472]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	4a75      	ldr	r2, [pc, #468]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012b0:	f023 0301 	bic.w	r3, r3, #1
 80012b4:	6213      	str	r3, [r2, #32]
 80012b6:	4b73      	ldr	r3, [pc, #460]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	4a72      	ldr	r2, [pc, #456]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	f023 0304 	bic.w	r3, r3, #4
 80012c0:	6213      	str	r3, [r2, #32]
 80012c2:	e01c      	b.n	80012fe <HAL_RCC_OscConfig+0x36e>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b05      	cmp	r3, #5
 80012ca:	d10c      	bne.n	80012e6 <HAL_RCC_OscConfig+0x356>
 80012cc:	4b6d      	ldr	r3, [pc, #436]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	4a6c      	ldr	r2, [pc, #432]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012d2:	f043 0304 	orr.w	r3, r3, #4
 80012d6:	6213      	str	r3, [r2, #32]
 80012d8:	4b6a      	ldr	r3, [pc, #424]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	4a69      	ldr	r2, [pc, #420]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6213      	str	r3, [r2, #32]
 80012e4:	e00b      	b.n	80012fe <HAL_RCC_OscConfig+0x36e>
 80012e6:	4b67      	ldr	r3, [pc, #412]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	4a66      	ldr	r2, [pc, #408]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012ec:	f023 0301 	bic.w	r3, r3, #1
 80012f0:	6213      	str	r3, [r2, #32]
 80012f2:	4b64      	ldr	r3, [pc, #400]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	4a63      	ldr	r2, [pc, #396]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012f8:	f023 0304 	bic.w	r3, r3, #4
 80012fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d015      	beq.n	8001332 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001306:	f7ff fb69 	bl	80009dc <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130c:	e00a      	b.n	8001324 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130e:	f7ff fb65 	bl	80009dc <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f241 3288 	movw	r2, #5000	; 0x1388
 800131c:	4293      	cmp	r3, r2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e0ab      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001324:	4b57      	ldr	r3, [pc, #348]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0ee      	beq.n	800130e <HAL_RCC_OscConfig+0x37e>
 8001330:	e014      	b.n	800135c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001332:	f7ff fb53 	bl	80009dc <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001338:	e00a      	b.n	8001350 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800133a:	f7ff fb4f 	bl	80009dc <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	f241 3288 	movw	r2, #5000	; 0x1388
 8001348:	4293      	cmp	r3, r2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e095      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001350:	4b4c      	ldr	r3, [pc, #304]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1ee      	bne.n	800133a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d105      	bne.n	800136e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001362:	4b48      	ldr	r3, [pc, #288]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	4a47      	ldr	r2, [pc, #284]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800136c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 8081 	beq.w	800147a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001378:	4b42      	ldr	r3, [pc, #264]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	2b08      	cmp	r3, #8
 8001382:	d061      	beq.n	8001448 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d146      	bne.n	800141a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138c:	4b3f      	ldr	r3, [pc, #252]	; (800148c <HAL_RCC_OscConfig+0x4fc>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001392:	f7ff fb23 	bl	80009dc <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139a:	f7ff fb1f 	bl	80009dc <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e067      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ac:	4b35      	ldr	r3, [pc, #212]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f0      	bne.n	800139a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c0:	d108      	bne.n	80013d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	492d      	ldr	r1, [pc, #180]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a19      	ldr	r1, [r3, #32]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	430b      	orrs	r3, r1
 80013e6:	4927      	ldr	r1, [pc, #156]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ec:	4b27      	ldr	r3, [pc, #156]	; (800148c <HAL_RCC_OscConfig+0x4fc>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f2:	f7ff faf3 	bl	80009dc <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fa:	f7ff faef 	bl	80009dc <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e037      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x46a>
 8001418:	e02f      	b.n	800147a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <HAL_RCC_OscConfig+0x4fc>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fadc 	bl	80009dc <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001428:	f7ff fad8 	bl	80009dc <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e020      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x498>
 8001446:	e018      	b.n	800147a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e013      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	429a      	cmp	r2, r3
 8001466:	d106      	bne.n	8001476 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001472:	429a      	cmp	r2, r3
 8001474:	d001      	beq.n	800147a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40021000 	.word	0x40021000
 8001488:	40007000 	.word	0x40007000
 800148c:	42420060 	.word	0x42420060

08001490 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0d0      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014a4:	4b6a      	ldr	r3, [pc, #424]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d910      	bls.n	80014d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b2:	4b67      	ldr	r3, [pc, #412]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 0207 	bic.w	r2, r3, #7
 80014ba:	4965      	ldr	r1, [pc, #404]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c2:	4b63      	ldr	r3, [pc, #396]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d001      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e0b8      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d020      	beq.n	8001522 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014ec:	4b59      	ldr	r3, [pc, #356]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	4a58      	ldr	r2, [pc, #352]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 80014f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	2b00      	cmp	r3, #0
 8001502:	d005      	beq.n	8001510 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001504:	4b53      	ldr	r3, [pc, #332]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	4a52      	ldr	r2, [pc, #328]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800150e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001510:	4b50      	ldr	r3, [pc, #320]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	494d      	ldr	r1, [pc, #308]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	4313      	orrs	r3, r2
 8001520:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d040      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d107      	bne.n	8001546 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	4b47      	ldr	r3, [pc, #284]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d115      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e07f      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d107      	bne.n	800155e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154e:	4b41      	ldr	r3, [pc, #260]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d109      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e073      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155e:	4b3d      	ldr	r3, [pc, #244]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e06b      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800156e:	4b39      	ldr	r3, [pc, #228]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f023 0203 	bic.w	r2, r3, #3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4936      	ldr	r1, [pc, #216]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001580:	f7ff fa2c 	bl	80009dc <HAL_GetTick>
 8001584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001586:	e00a      	b.n	800159e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001588:	f7ff fa28 	bl	80009dc <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	; 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e053      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159e:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 020c 	and.w	r2, r3, #12
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d1eb      	bne.n	8001588 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015b0:	4b27      	ldr	r3, [pc, #156]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d210      	bcs.n	80015e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 0207 	bic.w	r2, r3, #7
 80015c6:	4922      	ldr	r1, [pc, #136]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e032      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d008      	beq.n	80015fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4916      	ldr	r1, [pc, #88]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d009      	beq.n	800161e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	490e      	ldr	r1, [pc, #56]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	4313      	orrs	r3, r2
 800161c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800161e:	f000 f821 	bl	8001664 <HAL_RCC_GetSysClockFreq>
 8001622:	4602      	mov	r2, r0
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	490a      	ldr	r1, [pc, #40]	; (8001658 <HAL_RCC_ClockConfig+0x1c8>)
 8001630:	5ccb      	ldrb	r3, [r1, r3]
 8001632:	fa22 f303 	lsr.w	r3, r2, r3
 8001636:	4a09      	ldr	r2, [pc, #36]	; (800165c <HAL_RCC_ClockConfig+0x1cc>)
 8001638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_RCC_ClockConfig+0x1d0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff f98a 	bl	8000958 <HAL_InitTick>

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40022000 	.word	0x40022000
 8001654:	40021000 	.word	0x40021000
 8001658:	08002e40 	.word	0x08002e40
 800165c:	2000004c 	.word	0x2000004c
 8001660:	20000050 	.word	0x20000050

08001664 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800167e:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	2b04      	cmp	r3, #4
 800168c:	d002      	beq.n	8001694 <HAL_RCC_GetSysClockFreq+0x30>
 800168e:	2b08      	cmp	r3, #8
 8001690:	d003      	beq.n	800169a <HAL_RCC_GetSysClockFreq+0x36>
 8001692:	e027      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_RCC_GetSysClockFreq+0x98>)
 8001696:	613b      	str	r3, [r7, #16]
      break;
 8001698:	e027      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	0c9b      	lsrs	r3, r3, #18
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	4a17      	ldr	r2, [pc, #92]	; (8001700 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016a4:	5cd3      	ldrb	r3, [r2, r3]
 80016a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d010      	beq.n	80016d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	0c5b      	lsrs	r3, r3, #17
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	4a11      	ldr	r2, [pc, #68]	; (8001704 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016be:	5cd3      	ldrb	r3, [r2, r3]
 80016c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <HAL_RCC_GetSysClockFreq+0x98>)
 80016c6:	fb02 f203 	mul.w	r2, r2, r3
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	e004      	b.n	80016de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a0c      	ldr	r2, [pc, #48]	; (8001708 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016d8:	fb02 f303 	mul.w	r3, r2, r3
 80016dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	613b      	str	r3, [r7, #16]
      break;
 80016e2:	e002      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_RCC_GetSysClockFreq+0x98>)
 80016e6:	613b      	str	r3, [r7, #16]
      break;
 80016e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ea:	693b      	ldr	r3, [r7, #16]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	371c      	adds	r7, #28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000
 80016fc:	007a1200 	.word	0x007a1200
 8001700:	08002e50 	.word	0x08002e50
 8001704:	08002e60 	.word	0x08002e60
 8001708:	003d0900 	.word	0x003d0900

0800170c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001714:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <RCC_Delay+0x34>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <RCC_Delay+0x38>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0a5b      	lsrs	r3, r3, #9
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	fb02 f303 	mul.w	r3, r2, r3
 8001726:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001728:	bf00      	nop
  }
  while (Delay --);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1e5a      	subs	r2, r3, #1
 800172e:	60fa      	str	r2, [r7, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f9      	bne.n	8001728 <RCC_Delay+0x1c>
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	2000004c 	.word	0x2000004c
 8001744:	10624dd3 	.word	0x10624dd3

08001748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e041      	b.n	80017de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d106      	bne.n	8001774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff f85a 	bl	8000828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2202      	movs	r2, #2
 8001778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3304      	adds	r3, #4
 8001784:	4619      	mov	r1, r3
 8001786:	4610      	mov	r0, r2
 8001788:	f000 fa56 	bl	8001c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d001      	beq.n	8001800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e035      	b.n	800186c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2202      	movs	r2, #2
 8001804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0201 	orr.w	r2, r2, #1
 8001816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a16      	ldr	r2, [pc, #88]	; (8001878 <HAL_TIM_Base_Start_IT+0x90>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d009      	beq.n	8001836 <HAL_TIM_Base_Start_IT+0x4e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800182a:	d004      	beq.n	8001836 <HAL_TIM_Base_Start_IT+0x4e>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a12      	ldr	r2, [pc, #72]	; (800187c <HAL_TIM_Base_Start_IT+0x94>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d111      	bne.n	800185a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2b06      	cmp	r3, #6
 8001846:	d010      	beq.n	800186a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0201 	orr.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001858:	e007      	b.n	800186a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f042 0201 	orr.w	r2, r2, #1
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40012c00 	.word	0x40012c00
 800187c:	40000400 	.word	0x40000400

08001880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d020      	beq.n	80018e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d01b      	beq.n	80018e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f06f 0202 	mvn.w	r2, #2
 80018b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f998 	bl	8001c00 <HAL_TIM_IC_CaptureCallback>
 80018d0:	e005      	b.n	80018de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f98b 	bl	8001bee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f99a 	bl	8001c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d020      	beq.n	8001930 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01b      	beq.n	8001930 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f06f 0204 	mvn.w	r2, #4
 8001900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2202      	movs	r2, #2
 8001906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f972 	bl	8001c00 <HAL_TIM_IC_CaptureCallback>
 800191c:	e005      	b.n	800192a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f965 	bl	8001bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 f974 	bl	8001c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b00      	cmp	r3, #0
 8001938:	d020      	beq.n	800197c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01b      	beq.n	800197c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f06f 0208 	mvn.w	r2, #8
 800194c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2204      	movs	r2, #4
 8001952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f94c 	bl	8001c00 <HAL_TIM_IC_CaptureCallback>
 8001968:	e005      	b.n	8001976 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f93f 	bl	8001bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f94e 	bl	8001c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	2b00      	cmp	r3, #0
 8001984:	d020      	beq.n	80019c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01b      	beq.n	80019c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f06f 0210 	mvn.w	r2, #16
 8001998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2208      	movs	r2, #8
 800199e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f926 	bl	8001c00 <HAL_TIM_IC_CaptureCallback>
 80019b4:	e005      	b.n	80019c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f919 	bl	8001bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f928 	bl	8001c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00c      	beq.n	80019ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d007      	beq.n	80019ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f06f 0201 	mvn.w	r2, #1
 80019e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7fe fed4 	bl	8000794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00c      	beq.n	8001a10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d007      	beq.n	8001a10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 fa6f 	bl	8001eee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00c      	beq.n	8001a34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d007      	beq.n	8001a34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f8f8 	bl	8001c24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f003 0320 	and.w	r3, r3, #32
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00c      	beq.n	8001a58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f003 0320 	and.w	r3, r3, #32
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d007      	beq.n	8001a58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f06f 0220 	mvn.w	r2, #32
 8001a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fa42 	bl	8001edc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_TIM_ConfigClockSource+0x1c>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e0b4      	b.n	8001be6 <HAL_TIM_ConfigClockSource+0x186>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001aa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ab4:	d03e      	beq.n	8001b34 <HAL_TIM_ConfigClockSource+0xd4>
 8001ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aba:	f200 8087 	bhi.w	8001bcc <HAL_TIM_ConfigClockSource+0x16c>
 8001abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ac2:	f000 8086 	beq.w	8001bd2 <HAL_TIM_ConfigClockSource+0x172>
 8001ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aca:	d87f      	bhi.n	8001bcc <HAL_TIM_ConfigClockSource+0x16c>
 8001acc:	2b70      	cmp	r3, #112	; 0x70
 8001ace:	d01a      	beq.n	8001b06 <HAL_TIM_ConfigClockSource+0xa6>
 8001ad0:	2b70      	cmp	r3, #112	; 0x70
 8001ad2:	d87b      	bhi.n	8001bcc <HAL_TIM_ConfigClockSource+0x16c>
 8001ad4:	2b60      	cmp	r3, #96	; 0x60
 8001ad6:	d050      	beq.n	8001b7a <HAL_TIM_ConfigClockSource+0x11a>
 8001ad8:	2b60      	cmp	r3, #96	; 0x60
 8001ada:	d877      	bhi.n	8001bcc <HAL_TIM_ConfigClockSource+0x16c>
 8001adc:	2b50      	cmp	r3, #80	; 0x50
 8001ade:	d03c      	beq.n	8001b5a <HAL_TIM_ConfigClockSource+0xfa>
 8001ae0:	2b50      	cmp	r3, #80	; 0x50
 8001ae2:	d873      	bhi.n	8001bcc <HAL_TIM_ConfigClockSource+0x16c>
 8001ae4:	2b40      	cmp	r3, #64	; 0x40
 8001ae6:	d058      	beq.n	8001b9a <HAL_TIM_ConfigClockSource+0x13a>
 8001ae8:	2b40      	cmp	r3, #64	; 0x40
 8001aea:	d86f      	bhi.n	8001bcc <HAL_TIM_ConfigClockSource+0x16c>
 8001aec:	2b30      	cmp	r3, #48	; 0x30
 8001aee:	d064      	beq.n	8001bba <HAL_TIM_ConfigClockSource+0x15a>
 8001af0:	2b30      	cmp	r3, #48	; 0x30
 8001af2:	d86b      	bhi.n	8001bcc <HAL_TIM_ConfigClockSource+0x16c>
 8001af4:	2b20      	cmp	r3, #32
 8001af6:	d060      	beq.n	8001bba <HAL_TIM_ConfigClockSource+0x15a>
 8001af8:	2b20      	cmp	r3, #32
 8001afa:	d867      	bhi.n	8001bcc <HAL_TIM_ConfigClockSource+0x16c>
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d05c      	beq.n	8001bba <HAL_TIM_ConfigClockSource+0x15a>
 8001b00:	2b10      	cmp	r3, #16
 8001b02:	d05a      	beq.n	8001bba <HAL_TIM_ConfigClockSource+0x15a>
 8001b04:	e062      	b.n	8001bcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	6899      	ldr	r1, [r3, #8]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	f000 f96a 	bl	8001dee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001b28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	609a      	str	r2, [r3, #8]
      break;
 8001b32:	e04f      	b.n	8001bd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	6899      	ldr	r1, [r3, #8]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f000 f953 	bl	8001dee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b56:	609a      	str	r2, [r3, #8]
      break;
 8001b58:	e03c      	b.n	8001bd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6859      	ldr	r1, [r3, #4]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	461a      	mov	r2, r3
 8001b68:	f000 f8ca 	bl	8001d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2150      	movs	r1, #80	; 0x50
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f921 	bl	8001dba <TIM_ITRx_SetConfig>
      break;
 8001b78:	e02c      	b.n	8001bd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	6859      	ldr	r1, [r3, #4]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	461a      	mov	r2, r3
 8001b88:	f000 f8e8 	bl	8001d5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2160      	movs	r1, #96	; 0x60
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f911 	bl	8001dba <TIM_ITRx_SetConfig>
      break;
 8001b98:	e01c      	b.n	8001bd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	6859      	ldr	r1, [r3, #4]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	f000 f8aa 	bl	8001d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2140      	movs	r1, #64	; 0x40
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f901 	bl	8001dba <TIM_ITRx_SetConfig>
      break;
 8001bb8:	e00c      	b.n	8001bd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	f000 f8f8 	bl	8001dba <TIM_ITRx_SetConfig>
      break;
 8001bca:	e003      	b.n	8001bd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
      break;
 8001bd0:	e000      	b.n	8001bd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001bd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
	...

08001c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a2b      	ldr	r2, [pc, #172]	; (8001cf8 <TIM_Base_SetConfig+0xc0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d007      	beq.n	8001c60 <TIM_Base_SetConfig+0x28>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c56:	d003      	beq.n	8001c60 <TIM_Base_SetConfig+0x28>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a28      	ldr	r2, [pc, #160]	; (8001cfc <TIM_Base_SetConfig+0xc4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d108      	bne.n	8001c72 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a20      	ldr	r2, [pc, #128]	; (8001cf8 <TIM_Base_SetConfig+0xc0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d007      	beq.n	8001c8a <TIM_Base_SetConfig+0x52>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c80:	d003      	beq.n	8001c8a <TIM_Base_SetConfig+0x52>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <TIM_Base_SetConfig+0xc4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d108      	bne.n	8001c9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <TIM_Base_SetConfig+0xc0>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d103      	bne.n	8001cd0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f023 0201 	bic.w	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	611a      	str	r2, [r3, #16]
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	40012c00 	.word	0x40012c00
 8001cfc:	40000400 	.word	0x40000400

08001d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b087      	sub	sp, #28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	f023 0201 	bic.w	r2, r3, #1
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f023 030a 	bic.w	r3, r3, #10
 8001d3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	621a      	str	r2, [r3, #32]
}
 8001d52:	bf00      	nop
 8001d54:	371c      	adds	r7, #28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	f023 0210 	bic.w	r2, r3, #16
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	031b      	lsls	r3, r3, #12
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	621a      	str	r2, [r3, #32]
}
 8001db0:	bf00      	nop
 8001db2:	371c      	adds	r7, #28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f043 0307 	orr.w	r3, r3, #7
 8001ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	609a      	str	r2, [r3, #8]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b087      	sub	sp, #28
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	021a      	lsls	r2, r3, #8
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	609a      	str	r2, [r3, #8]
}
 8001e22:	bf00      	nop
 8001e24:	371c      	adds	r7, #28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e041      	b.n	8001ec8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d009      	beq.n	8001e9c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e90:	d004      	beq.n	8001e9c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a10      	ldr	r2, [pc, #64]	; (8001ed8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d10c      	bne.n	8001eb6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ea2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40012c00 	.word	0x40012c00
 8001ed8:	40000400 	.word	0x40000400

08001edc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <DISPLAY_LED_7_SEGMENT>:
 *  Created on: Sep 2, 2024
 *      Author: thuyh
 */
#include "LED7_SEGMENT.h"
void DISPLAY_LED_7_SEGMENT(GPIO_TypeDef* GPIOx,uint16_t LED_7_0,uint16_t LED_7_1,uint16_t LED_7_2,uint16_t LED_7_3,uint16_t LED_7_4
		,uint16_t LED_7_5,uint16_t LED_7_6 ,uint8_t digit){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	4608      	mov	r0, r1
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4603      	mov	r3, r0
 8001f10:	817b      	strh	r3, [r7, #10]
 8001f12:	460b      	mov	r3, r1
 8001f14:	813b      	strh	r3, [r7, #8]
 8001f16:	4613      	mov	r3, r2
 8001f18:	80fb      	strh	r3, [r7, #6]
		switch(digit){
 8001f1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f1e:	2b09      	cmp	r3, #9
 8001f20:	f200 81c6 	bhi.w	80022b0 <DISPLAY_LED_7_SEGMENT+0x3b0>
 8001f24:	a201      	add	r2, pc, #4	; (adr r2, 8001f2c <DISPLAY_LED_7_SEGMENT+0x2c>)
 8001f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2a:	bf00      	nop
 8001f2c:	08001f55 	.word	0x08001f55
 8001f30:	08001fab 	.word	0x08001fab
 8001f34:	08002001 	.word	0x08002001
 8001f38:	08002057 	.word	0x08002057
 8001f3c:	080020ad 	.word	0x080020ad
 8001f40:	08002103 	.word	0x08002103
 8001f44:	08002159 	.word	0x08002159
 8001f48:	080021af 	.word	0x080021af
 8001f4c:	08002205 	.word	0x08002205
 8001f50:	0800225b 	.word	0x0800225b
			case 0:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8001f54:	897b      	ldrh	r3, [r7, #10]
 8001f56:	2200      	movs	r2, #0
 8001f58:	4619      	mov	r1, r3
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f7fe ffe7 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001f60:	893b      	ldrh	r3, [r7, #8]
 8001f62:	2200      	movs	r2, #0
 8001f64:	4619      	mov	r1, r3
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f7fe ffe1 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	4619      	mov	r1, r3
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f7fe ffdb 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8001f78:	8b3b      	ldrh	r3, [r7, #24]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f7fe ffd5 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, RESET);
 8001f84:	8bbb      	ldrh	r3, [r7, #28]
 8001f86:	2200      	movs	r2, #0
 8001f88:	4619      	mov	r1, r3
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f7fe ffcf 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8001f90:	8c3b      	ldrh	r3, [r7, #32]
 8001f92:	2200      	movs	r2, #0
 8001f94:	4619      	mov	r1, r3
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f7fe ffc9 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, SET);
 8001f9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f7fe ffc3 	bl	8000f2e <HAL_GPIO_WritePin>
					break;
 8001fa8:	e1ad      	b.n	8002306 <DISPLAY_LED_7_SEGMENT+0x406>
			case 1:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, SET);
 8001faa:	897b      	ldrh	r3, [r7, #10]
 8001fac:	2201      	movs	r2, #1
 8001fae:	4619      	mov	r1, r3
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f7fe ffbc 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8001fb6:	893b      	ldrh	r3, [r7, #8]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	4619      	mov	r1, r3
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f7fe ffb6 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f7fe ffb0 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, SET);
 8001fce:	8b3b      	ldrh	r3, [r7, #24]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f7fe ffaa 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8001fda:	8bbb      	ldrh	r3, [r7, #28]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4619      	mov	r1, r3
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f7fe ffa4 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 8001fe6:	8c3b      	ldrh	r3, [r7, #32]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	4619      	mov	r1, r3
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f7fe ff9e 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, SET);
 8001ff2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f7fe ff98 	bl	8000f2e <HAL_GPIO_WritePin>
					break;
 8001ffe:	e182      	b.n	8002306 <DISPLAY_LED_7_SEGMENT+0x406>
			case 2:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8002000:	897b      	ldrh	r3, [r7, #10]
 8002002:	2200      	movs	r2, #0
 8002004:	4619      	mov	r1, r3
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f7fe ff91 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 800200c:	893b      	ldrh	r3, [r7, #8]
 800200e:	2200      	movs	r2, #0
 8002010:	4619      	mov	r1, r3
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f7fe ff8b 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, SET);
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	2201      	movs	r2, #1
 800201c:	4619      	mov	r1, r3
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f7fe ff85 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8002024:	8b3b      	ldrh	r3, [r7, #24]
 8002026:	2200      	movs	r2, #0
 8002028:	4619      	mov	r1, r3
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f7fe ff7f 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, RESET);
 8002030:	8bbb      	ldrh	r3, [r7, #28]
 8002032:	2200      	movs	r2, #0
 8002034:	4619      	mov	r1, r3
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f7fe ff79 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 800203c:	8c3b      	ldrh	r3, [r7, #32]
 800203e:	2201      	movs	r2, #1
 8002040:	4619      	mov	r1, r3
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f7fe ff73 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 8002048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800204a:	2200      	movs	r2, #0
 800204c:	4619      	mov	r1, r3
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f7fe ff6d 	bl	8000f2e <HAL_GPIO_WritePin>
				    break;
 8002054:	e157      	b.n	8002306 <DISPLAY_LED_7_SEGMENT+0x406>
			case 3:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8002056:	897b      	ldrh	r3, [r7, #10]
 8002058:	2200      	movs	r2, #0
 800205a:	4619      	mov	r1, r3
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7fe ff66 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8002062:	893b      	ldrh	r3, [r7, #8]
 8002064:	2200      	movs	r2, #0
 8002066:	4619      	mov	r1, r3
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f7fe ff60 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	2200      	movs	r2, #0
 8002072:	4619      	mov	r1, r3
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f7fe ff5a 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 800207a:	8b3b      	ldrh	r3, [r7, #24]
 800207c:	2200      	movs	r2, #0
 800207e:	4619      	mov	r1, r3
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f7fe ff54 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8002086:	8bbb      	ldrh	r3, [r7, #28]
 8002088:	2201      	movs	r2, #1
 800208a:	4619      	mov	r1, r3
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f7fe ff4e 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 8002092:	8c3b      	ldrh	r3, [r7, #32]
 8002094:	2201      	movs	r2, #1
 8002096:	4619      	mov	r1, r3
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f7fe ff48 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 800209e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020a0:	2200      	movs	r2, #0
 80020a2:	4619      	mov	r1, r3
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f7fe ff42 	bl	8000f2e <HAL_GPIO_WritePin>
					break;
 80020aa:	e12c      	b.n	8002306 <DISPLAY_LED_7_SEGMENT+0x406>
			case 4:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, SET);
 80020ac:	897b      	ldrh	r3, [r7, #10]
 80020ae:	2201      	movs	r2, #1
 80020b0:	4619      	mov	r1, r3
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f7fe ff3b 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 80020b8:	893b      	ldrh	r3, [r7, #8]
 80020ba:	2200      	movs	r2, #0
 80020bc:	4619      	mov	r1, r3
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f7fe ff35 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	2200      	movs	r2, #0
 80020c8:	4619      	mov	r1, r3
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f7fe ff2f 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, SET);
 80020d0:	8b3b      	ldrh	r3, [r7, #24]
 80020d2:	2201      	movs	r2, #1
 80020d4:	4619      	mov	r1, r3
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f7fe ff29 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 80020dc:	8bbb      	ldrh	r3, [r7, #28]
 80020de:	2201      	movs	r2, #1
 80020e0:	4619      	mov	r1, r3
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f7fe ff23 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 80020e8:	8c3b      	ldrh	r3, [r7, #32]
 80020ea:	2200      	movs	r2, #0
 80020ec:	4619      	mov	r1, r3
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f7fe ff1d 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 80020f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020f6:	2200      	movs	r2, #0
 80020f8:	4619      	mov	r1, r3
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f7fe ff17 	bl	8000f2e <HAL_GPIO_WritePin>
					break;
 8002100:	e101      	b.n	8002306 <DISPLAY_LED_7_SEGMENT+0x406>
			case 5:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8002102:	897b      	ldrh	r3, [r7, #10]
 8002104:	2200      	movs	r2, #0
 8002106:	4619      	mov	r1, r3
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f7fe ff10 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, SET);
 800210e:	893b      	ldrh	r3, [r7, #8]
 8002110:	2201      	movs	r2, #1
 8002112:	4619      	mov	r1, r3
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f7fe ff0a 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	2200      	movs	r2, #0
 800211e:	4619      	mov	r1, r3
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f7fe ff04 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8002126:	8b3b      	ldrh	r3, [r7, #24]
 8002128:	2200      	movs	r2, #0
 800212a:	4619      	mov	r1, r3
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f7fe fefe 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 8002132:	8bbb      	ldrh	r3, [r7, #28]
 8002134:	2201      	movs	r2, #1
 8002136:	4619      	mov	r1, r3
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f7fe fef8 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 800213e:	8c3b      	ldrh	r3, [r7, #32]
 8002140:	2200      	movs	r2, #0
 8002142:	4619      	mov	r1, r3
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f7fe fef2 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 800214a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800214c:	2200      	movs	r2, #0
 800214e:	4619      	mov	r1, r3
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f7fe feec 	bl	8000f2e <HAL_GPIO_WritePin>
					break;
 8002156:	e0d6      	b.n	8002306 <DISPLAY_LED_7_SEGMENT+0x406>
			case 6:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8002158:	897b      	ldrh	r3, [r7, #10]
 800215a:	2200      	movs	r2, #0
 800215c:	4619      	mov	r1, r3
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f7fe fee5 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, SET);
 8002164:	893b      	ldrh	r3, [r7, #8]
 8002166:	2201      	movs	r2, #1
 8002168:	4619      	mov	r1, r3
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f7fe fedf 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	2200      	movs	r2, #0
 8002174:	4619      	mov	r1, r3
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f7fe fed9 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 800217c:	8b3b      	ldrh	r3, [r7, #24]
 800217e:	2200      	movs	r2, #0
 8002180:	4619      	mov	r1, r3
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f7fe fed3 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, RESET);
 8002188:	8bbb      	ldrh	r3, [r7, #28]
 800218a:	2200      	movs	r2, #0
 800218c:	4619      	mov	r1, r3
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f7fe fecd 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8002194:	8c3b      	ldrh	r3, [r7, #32]
 8002196:	2200      	movs	r2, #0
 8002198:	4619      	mov	r1, r3
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f7fe fec7 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 80021a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021a2:	2200      	movs	r2, #0
 80021a4:	4619      	mov	r1, r3
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f7fe fec1 	bl	8000f2e <HAL_GPIO_WritePin>
					break;
 80021ac:	e0ab      	b.n	8002306 <DISPLAY_LED_7_SEGMENT+0x406>
			case 7:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 80021ae:	897b      	ldrh	r3, [r7, #10]
 80021b0:	2200      	movs	r2, #0
 80021b2:	4619      	mov	r1, r3
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f7fe feba 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 80021ba:	893b      	ldrh	r3, [r7, #8]
 80021bc:	2200      	movs	r2, #0
 80021be:	4619      	mov	r1, r3
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7fe feb4 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	2200      	movs	r2, #0
 80021ca:	4619      	mov	r1, r3
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f7fe feae 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, SET);
 80021d2:	8b3b      	ldrh	r3, [r7, #24]
 80021d4:	2201      	movs	r2, #1
 80021d6:	4619      	mov	r1, r3
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f7fe fea8 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 80021de:	8bbb      	ldrh	r3, [r7, #28]
 80021e0:	2201      	movs	r2, #1
 80021e2:	4619      	mov	r1, r3
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f7fe fea2 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 80021ea:	8c3b      	ldrh	r3, [r7, #32]
 80021ec:	2201      	movs	r2, #1
 80021ee:	4619      	mov	r1, r3
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7fe fe9c 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, SET);
 80021f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021f8:	2201      	movs	r2, #1
 80021fa:	4619      	mov	r1, r3
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f7fe fe96 	bl	8000f2e <HAL_GPIO_WritePin>
					break;
 8002202:	e080      	b.n	8002306 <DISPLAY_LED_7_SEGMENT+0x406>
			case 8:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 8002204:	897b      	ldrh	r3, [r7, #10]
 8002206:	2200      	movs	r2, #0
 8002208:	4619      	mov	r1, r3
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f7fe fe8f 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8002210:	893b      	ldrh	r3, [r7, #8]
 8002212:	2200      	movs	r2, #0
 8002214:	4619      	mov	r1, r3
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f7fe fe89 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	2200      	movs	r2, #0
 8002220:	4619      	mov	r1, r3
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f7fe fe83 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 8002228:	8b3b      	ldrh	r3, [r7, #24]
 800222a:	2200      	movs	r2, #0
 800222c:	4619      	mov	r1, r3
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f7fe fe7d 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, RESET);
 8002234:	8bbb      	ldrh	r3, [r7, #28]
 8002236:	2200      	movs	r2, #0
 8002238:	4619      	mov	r1, r3
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f7fe fe77 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8002240:	8c3b      	ldrh	r3, [r7, #32]
 8002242:	2200      	movs	r2, #0
 8002244:	4619      	mov	r1, r3
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f7fe fe71 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 800224c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800224e:	2200      	movs	r2, #0
 8002250:	4619      	mov	r1, r3
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f7fe fe6b 	bl	8000f2e <HAL_GPIO_WritePin>
					break;
 8002258:	e055      	b.n	8002306 <DISPLAY_LED_7_SEGMENT+0x406>
			case 9:
							HAL_GPIO_WritePin(GPIOx, LED_7_0, RESET);
 800225a:	897b      	ldrh	r3, [r7, #10]
 800225c:	2200      	movs	r2, #0
 800225e:	4619      	mov	r1, r3
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f7fe fe64 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_1, RESET);
 8002266:	893b      	ldrh	r3, [r7, #8]
 8002268:	2200      	movs	r2, #0
 800226a:	4619      	mov	r1, r3
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f7fe fe5e 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_2, RESET);
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	2200      	movs	r2, #0
 8002276:	4619      	mov	r1, r3
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f7fe fe58 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_3, RESET);
 800227e:	8b3b      	ldrh	r3, [r7, #24]
 8002280:	2200      	movs	r2, #0
 8002282:	4619      	mov	r1, r3
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f7fe fe52 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 800228a:	8bbb      	ldrh	r3, [r7, #28]
 800228c:	2201      	movs	r2, #1
 800228e:	4619      	mov	r1, r3
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f7fe fe4c 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_5, RESET);
 8002296:	8c3b      	ldrh	r3, [r7, #32]
 8002298:	2200      	movs	r2, #0
 800229a:	4619      	mov	r1, r3
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f7fe fe46 	bl	8000f2e <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOx, LED_7_6, RESET);
 80022a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022a4:	2200      	movs	r2, #0
 80022a6:	4619      	mov	r1, r3
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f7fe fe40 	bl	8000f2e <HAL_GPIO_WritePin>
					break;
 80022ae:	e02a      	b.n	8002306 <DISPLAY_LED_7_SEGMENT+0x406>
			default:
								HAL_GPIO_WritePin(GPIOx, LED_7_0, SET);
 80022b0:	897b      	ldrh	r3, [r7, #10]
 80022b2:	2201      	movs	r2, #1
 80022b4:	4619      	mov	r1, r3
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f7fe fe39 	bl	8000f2e <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_1, SET);
 80022bc:	893b      	ldrh	r3, [r7, #8]
 80022be:	2201      	movs	r2, #1
 80022c0:	4619      	mov	r1, r3
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f7fe fe33 	bl	8000f2e <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_2, SET);
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	2201      	movs	r2, #1
 80022cc:	4619      	mov	r1, r3
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f7fe fe2d 	bl	8000f2e <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_3, SET);
 80022d4:	8b3b      	ldrh	r3, [r7, #24]
 80022d6:	2201      	movs	r2, #1
 80022d8:	4619      	mov	r1, r3
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f7fe fe27 	bl	8000f2e <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_4, SET);
 80022e0:	8bbb      	ldrh	r3, [r7, #28]
 80022e2:	2201      	movs	r2, #1
 80022e4:	4619      	mov	r1, r3
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f7fe fe21 	bl	8000f2e <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_5, SET);
 80022ec:	8c3b      	ldrh	r3, [r7, #32]
 80022ee:	2201      	movs	r2, #1
 80022f0:	4619      	mov	r1, r3
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f7fe fe1b 	bl	8000f2e <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOx, LED_7_6, SET);
 80022f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022fa:	2201      	movs	r2, #1
 80022fc:	4619      	mov	r1, r3
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f7fe fe15 	bl	8000f2e <HAL_GPIO_WritePin>
				break;
 8002304:	bf00      	nop
			}

}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop

08002310 <traffic_double_display>:
uint8_t redred ;
int time_red_select ;
int time_green_select;
int time_yellow_select = 0;
void traffic_double_display(GPIO_TypeDef * GPIOx1, uint16_t LED_RED1, uint16_t LED_YELLOW1, uint16_t LED_GREEN1,
                            GPIO_TypeDef * GPIOx2, uint16_t LED_RED2, uint16_t LED_YELLOW2, uint16_t LED_GREEN2, int status) {
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af02      	add	r7, sp, #8
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	4608      	mov	r0, r1
 800231a:	4611      	mov	r1, r2
 800231c:	461a      	mov	r2, r3
 800231e:	4603      	mov	r3, r0
 8002320:	817b      	strh	r3, [r7, #10]
 8002322:	460b      	mov	r3, r1
 8002324:	813b      	strh	r3, [r7, #8]
 8002326:	4613      	mov	r3, r2
 8002328:	80fb      	strh	r3, [r7, #6]
 800232a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232c:	3b01      	subs	r3, #1
 800232e:	2b0e      	cmp	r3, #14
 8002330:	f200 8121 	bhi.w	8002576 <traffic_double_display+0x266>
 8002334:	a201      	add	r2, pc, #4	; (adr r2, 800233c <traffic_double_display+0x2c>)
 8002336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233a:	bf00      	nop
 800233c:	08002401 	.word	0x08002401
 8002340:	08002379 	.word	0x08002379
 8002344:	0800239b 	.word	0x0800239b
 8002348:	080023bd 	.word	0x080023bd
 800234c:	080023df 	.word	0x080023df
 8002350:	0800244b 	.word	0x0800244b
 8002354:	08002577 	.word	0x08002577
 8002358:	0800246d 	.word	0x0800246d
 800235c:	080024c7 	.word	0x080024c7
 8002360:	0800251f 	.word	0x0800251f
 8002364:	08002577 	.word	0x08002577
 8002368:	08002379 	.word	0x08002379
 800236c:	0800239b 	.word	0x0800239b
 8002370:	080023bd 	.word	0x080023bd
 8002374:	080023df 	.word	0x080023df
    switch(status) {
        case GREEN_RED:
        case MAN_GREEN_RED:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, GREEN);
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	893a      	ldrh	r2, [r7, #8]
 800237c:	8979      	ldrh	r1, [r7, #10]
 800237e:	2002      	movs	r0, #2
 8002380:	9000      	str	r0, [sp, #0]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f928 	bl	80025d8 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
 8002388:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800238a:	8c3a      	ldrh	r2, [r7, #32]
 800238c:	8bb9      	ldrh	r1, [r7, #28]
 800238e:	2000      	movs	r0, #0
 8002390:	9000      	str	r0, [sp, #0]
 8002392:	69b8      	ldr	r0, [r7, #24]
 8002394:	f000 f920 	bl	80025d8 <traffic_display>
            break;
 8002398:	e117      	b.n	80025ca <traffic_double_display+0x2ba>
        case YELLOW_RED:
        case MAN_YELLOW_RED:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, YELLOW);
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	893a      	ldrh	r2, [r7, #8]
 800239e:	8979      	ldrh	r1, [r7, #10]
 80023a0:	2001      	movs	r0, #1
 80023a2:	9000      	str	r0, [sp, #0]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f917 	bl	80025d8 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
 80023aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023ac:	8c3a      	ldrh	r2, [r7, #32]
 80023ae:	8bb9      	ldrh	r1, [r7, #28]
 80023b0:	2000      	movs	r0, #0
 80023b2:	9000      	str	r0, [sp, #0]
 80023b4:	69b8      	ldr	r0, [r7, #24]
 80023b6:	f000 f90f 	bl	80025d8 <traffic_display>
            break;
 80023ba:	e106      	b.n	80025ca <traffic_double_display+0x2ba>
        case RED_GREEN:
        case MAN_RED_GREEN:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	893a      	ldrh	r2, [r7, #8]
 80023c0:	8979      	ldrh	r1, [r7, #10]
 80023c2:	2000      	movs	r0, #0
 80023c4:	9000      	str	r0, [sp, #0]
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f906 	bl	80025d8 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, GREEN);
 80023cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023ce:	8c3a      	ldrh	r2, [r7, #32]
 80023d0:	8bb9      	ldrh	r1, [r7, #28]
 80023d2:	2002      	movs	r0, #2
 80023d4:	9000      	str	r0, [sp, #0]
 80023d6:	69b8      	ldr	r0, [r7, #24]
 80023d8:	f000 f8fe 	bl	80025d8 <traffic_display>
            break;
 80023dc:	e0f5      	b.n	80025ca <traffic_double_display+0x2ba>
        case RED_YELLOW:
        case MAN_RED_YELLOW:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	893a      	ldrh	r2, [r7, #8]
 80023e2:	8979      	ldrh	r1, [r7, #10]
 80023e4:	2000      	movs	r0, #0
 80023e6:	9000      	str	r0, [sp, #0]
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 f8f5 	bl	80025d8 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, YELLOW);
 80023ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023f0:	8c3a      	ldrh	r2, [r7, #32]
 80023f2:	8bb9      	ldrh	r1, [r7, #28]
 80023f4:	2001      	movs	r0, #1
 80023f6:	9000      	str	r0, [sp, #0]
 80023f8:	69b8      	ldr	r0, [r7, #24]
 80023fa:	f000 f8ed 	bl	80025d8 <traffic_display>
            break;
 80023fe:	e0e4      	b.n	80025ca <traffic_double_display+0x2ba>
        case INIT:
            HAL_GPIO_WritePin(GPIOx1, LED_RED1, RESET);
 8002400:	897b      	ldrh	r3, [r7, #10]
 8002402:	2200      	movs	r2, #0
 8002404:	4619      	mov	r1, r3
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f7fe fd91 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_YELLOW1, RESET);
 800240c:	893b      	ldrh	r3, [r7, #8]
 800240e:	2200      	movs	r2, #0
 8002410:	4619      	mov	r1, r3
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f7fe fd8b 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_GREEN1, RESET);
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	2200      	movs	r2, #0
 800241c:	4619      	mov	r1, r3
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f7fe fd85 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_RED2, RESET);
 8002424:	8bbb      	ldrh	r3, [r7, #28]
 8002426:	2200      	movs	r2, #0
 8002428:	4619      	mov	r1, r3
 800242a:	69b8      	ldr	r0, [r7, #24]
 800242c:	f7fe fd7f 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_YELLOW2, RESET);
 8002430:	8c3b      	ldrh	r3, [r7, #32]
 8002432:	2200      	movs	r2, #0
 8002434:	4619      	mov	r1, r3
 8002436:	69b8      	ldr	r0, [r7, #24]
 8002438:	f7fe fd79 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_GREEN2, RESET);
 800243c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800243e:	2200      	movs	r2, #0
 8002440:	4619      	mov	r1, r3
 8002442:	69b8      	ldr	r0, [r7, #24]
 8002444:	f7fe fd73 	bl	8000f2e <HAL_GPIO_WritePin>
            break;
 8002448:	e0bf      	b.n	80025ca <traffic_double_display+0x2ba>
        case RED_RED1:
    //	    case RED_RED2:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	893a      	ldrh	r2, [r7, #8]
 800244e:	8979      	ldrh	r1, [r7, #10]
 8002450:	2000      	movs	r0, #0
 8002452:	9000      	str	r0, [sp, #0]
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 f8bf 	bl	80025d8 <traffic_display>
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
 800245a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800245c:	8c3a      	ldrh	r2, [r7, #32]
 800245e:	8bb9      	ldrh	r1, [r7, #28]
 8002460:	2000      	movs	r0, #0
 8002462:	9000      	str	r0, [sp, #0]
 8002464:	69b8      	ldr	r0, [r7, #24]
 8002466:	f000 f8b7 	bl	80025d8 <traffic_display>
            break;
 800246a:	e0ae      	b.n	80025ca <traffic_double_display+0x2ba>
        case SET_TIME_RED:
            HAL_GPIO_WritePin(GPIOx1, LED_YELLOW1, SET);
 800246c:	893b      	ldrh	r3, [r7, #8]
 800246e:	2201      	movs	r2, #1
 8002470:	4619      	mov	r1, r3
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f7fe fd5b 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_GREEN1, SET);
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	2201      	movs	r2, #1
 800247c:	4619      	mov	r1, r3
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f7fe fd55 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_YELLOW2, SET);
 8002484:	8c3b      	ldrh	r3, [r7, #32]
 8002486:	2201      	movs	r2, #1
 8002488:	4619      	mov	r1, r3
 800248a:	69b8      	ldr	r0, [r7, #24]
 800248c:	f7fe fd4f 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_GREEN2, SET);
 8002490:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002492:	2201      	movs	r2, #1
 8002494:	4619      	mov	r1, r3
 8002496:	69b8      	ldr	r0, [r7, #24]
 8002498:	f7fe fd49 	bl	8000f2e <HAL_GPIO_WritePin>
        	if(timer1_flag[2] == 1){
 800249c:	4b4d      	ldr	r3, [pc, #308]	; (80025d4 <traffic_double_display+0x2c4>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	f040 808d 	bne.w	80025c0 <traffic_double_display+0x2b0>
        		HAL_GPIO_TogglePin(GPIOx1, LED_RED1);
 80024a6:	897b      	ldrh	r3, [r7, #10]
 80024a8:	4619      	mov	r1, r3
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f7fe fd57 	bl	8000f5e <HAL_GPIO_TogglePin>
        		HAL_GPIO_TogglePin(GPIOx2, LED_RED2);
 80024b0:	8bbb      	ldrh	r3, [r7, #28]
 80024b2:	4619      	mov	r1, r3
 80024b4:	69b8      	ldr	r0, [r7, #24]
 80024b6:	f7fe fd52 	bl	8000f5e <HAL_GPIO_TogglePin>
        		setTimer1(2, 500);
 80024ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80024be:	2002      	movs	r0, #2
 80024c0:	f000 fc24 	bl	8002d0c <setTimer1>
        	}
            break;
 80024c4:	e07c      	b.n	80025c0 <traffic_double_display+0x2b0>

        case SET_TIME_YELLOW:
            HAL_GPIO_WritePin(GPIOx1, LED_RED1, SET);
 80024c6:	897b      	ldrh	r3, [r7, #10]
 80024c8:	2201      	movs	r2, #1
 80024ca:	4619      	mov	r1, r3
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f7fe fd2e 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_GREEN1, SET);
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	2201      	movs	r2, #1
 80024d6:	4619      	mov	r1, r3
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f7fe fd28 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_RED2, SET);
 80024de:	8bbb      	ldrh	r3, [r7, #28]
 80024e0:	2201      	movs	r2, #1
 80024e2:	4619      	mov	r1, r3
 80024e4:	69b8      	ldr	r0, [r7, #24]
 80024e6:	f7fe fd22 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_GREEN2, SET);
 80024ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024ec:	2201      	movs	r2, #1
 80024ee:	4619      	mov	r1, r3
 80024f0:	69b8      	ldr	r0, [r7, #24]
 80024f2:	f7fe fd1c 	bl	8000f2e <HAL_GPIO_WritePin>
        	if(timer1_flag[2] == 1){
 80024f6:	4b37      	ldr	r3, [pc, #220]	; (80025d4 <traffic_double_display+0x2c4>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d162      	bne.n	80025c4 <traffic_double_display+0x2b4>
        		HAL_GPIO_TogglePin(GPIOx1, LED_YELLOW1);
 80024fe:	893b      	ldrh	r3, [r7, #8]
 8002500:	4619      	mov	r1, r3
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f7fe fd2b 	bl	8000f5e <HAL_GPIO_TogglePin>
        		HAL_GPIO_TogglePin(GPIOx2, LED_YELLOW2);
 8002508:	8c3b      	ldrh	r3, [r7, #32]
 800250a:	4619      	mov	r1, r3
 800250c:	69b8      	ldr	r0, [r7, #24]
 800250e:	f7fe fd26 	bl	8000f5e <HAL_GPIO_TogglePin>
        		setTimer1(2, 500);
 8002512:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002516:	2002      	movs	r0, #2
 8002518:	f000 fbf8 	bl	8002d0c <setTimer1>
        	}
            break;
 800251c:	e052      	b.n	80025c4 <traffic_double_display+0x2b4>

        case SET_TIME_GREEN:
            HAL_GPIO_WritePin(GPIOx1, LED_RED1, SET);
 800251e:	897b      	ldrh	r3, [r7, #10]
 8002520:	2201      	movs	r2, #1
 8002522:	4619      	mov	r1, r3
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f7fe fd02 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_YELLOW1, SET);
 800252a:	893b      	ldrh	r3, [r7, #8]
 800252c:	2201      	movs	r2, #1
 800252e:	4619      	mov	r1, r3
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f7fe fcfc 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_RED2, SET);
 8002536:	8bbb      	ldrh	r3, [r7, #28]
 8002538:	2201      	movs	r2, #1
 800253a:	4619      	mov	r1, r3
 800253c:	69b8      	ldr	r0, [r7, #24]
 800253e:	f7fe fcf6 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_YELLOW2, SET);
 8002542:	8c3b      	ldrh	r3, [r7, #32]
 8002544:	2201      	movs	r2, #1
 8002546:	4619      	mov	r1, r3
 8002548:	69b8      	ldr	r0, [r7, #24]
 800254a:	f7fe fcf0 	bl	8000f2e <HAL_GPIO_WritePin>
        	if(timer1_flag[2] == 1){
 800254e:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <traffic_double_display+0x2c4>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d138      	bne.n	80025c8 <traffic_double_display+0x2b8>
        		HAL_GPIO_TogglePin(GPIOx1, LED_GREEN1);
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	4619      	mov	r1, r3
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f7fe fcff 	bl	8000f5e <HAL_GPIO_TogglePin>
        		HAL_GPIO_TogglePin(GPIOx2, LED_GREEN2);
 8002560:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002562:	4619      	mov	r1, r3
 8002564:	69b8      	ldr	r0, [r7, #24]
 8002566:	f7fe fcfa 	bl	8000f5e <HAL_GPIO_TogglePin>
        		setTimer1(2, 500);
 800256a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800256e:	2002      	movs	r0, #2
 8002570:	f000 fbcc 	bl	8002d0c <setTimer1>
        	}
            break;
 8002574:	e028      	b.n	80025c8 <traffic_double_display+0x2b8>
        default:
            HAL_GPIO_WritePin(GPIOx1, LED_RED1, GPIO_PIN_SET);
 8002576:	897b      	ldrh	r3, [r7, #10]
 8002578:	2201      	movs	r2, #1
 800257a:	4619      	mov	r1, r3
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f7fe fcd6 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_YELLOW1, GPIO_PIN_SET);
 8002582:	893b      	ldrh	r3, [r7, #8]
 8002584:	2201      	movs	r2, #1
 8002586:	4619      	mov	r1, r3
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f7fe fcd0 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx1, LED_GREEN1, GPIO_PIN_SET);
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	2201      	movs	r2, #1
 8002592:	4619      	mov	r1, r3
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f7fe fcca 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_RED2, GPIO_PIN_SET);
 800259a:	8bbb      	ldrh	r3, [r7, #28]
 800259c:	2201      	movs	r2, #1
 800259e:	4619      	mov	r1, r3
 80025a0:	69b8      	ldr	r0, [r7, #24]
 80025a2:	f7fe fcc4 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_YELLOW2, GPIO_PIN_SET);
 80025a6:	8c3b      	ldrh	r3, [r7, #32]
 80025a8:	2201      	movs	r2, #1
 80025aa:	4619      	mov	r1, r3
 80025ac:	69b8      	ldr	r0, [r7, #24]
 80025ae:	f7fe fcbe 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx2, LED_GREEN2, GPIO_PIN_SET);
 80025b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025b4:	2201      	movs	r2, #1
 80025b6:	4619      	mov	r1, r3
 80025b8:	69b8      	ldr	r0, [r7, #24]
 80025ba:	f7fe fcb8 	bl	8000f2e <HAL_GPIO_WritePin>
        	break;
 80025be:	e004      	b.n	80025ca <traffic_double_display+0x2ba>
            break;
 80025c0:	bf00      	nop
 80025c2:	e002      	b.n	80025ca <traffic_double_display+0x2ba>
            break;
 80025c4:	bf00      	nop
 80025c6:	e000      	b.n	80025ca <traffic_double_display+0x2ba>
            break;
 80025c8:	bf00      	nop
    }
}
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000010c 	.word	0x2000010c

080025d8 <traffic_display>:
void traffic_display(GPIO_TypeDef * GPIOx, uint16_t LED_RED, uint16_t LED_YELLOW, uint16_t LED_GREEN, State type) {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	4608      	mov	r0, r1
 80025e2:	4611      	mov	r1, r2
 80025e4:	461a      	mov	r2, r3
 80025e6:	4603      	mov	r3, r0
 80025e8:	817b      	strh	r3, [r7, #10]
 80025ea:	460b      	mov	r3, r1
 80025ec:	813b      	strh	r3, [r7, #8]
 80025ee:	4613      	mov	r3, r2
 80025f0:	80fb      	strh	r3, [r7, #6]
    switch(type) {
 80025f2:	7e3b      	ldrb	r3, [r7, #24]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d02c      	beq.n	8002652 <traffic_display+0x7a>
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	dc3d      	bgt.n	8002678 <traffic_display+0xa0>
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <traffic_display+0x2e>
 8002600:	2b01      	cmp	r3, #1
 8002602:	d013      	beq.n	800262c <traffic_display+0x54>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_RESET);
            break;
        default:
            break;
 8002604:	e038      	b.n	8002678 <traffic_display+0xa0>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_RESET);
 8002606:	897b      	ldrh	r3, [r7, #10]
 8002608:	2200      	movs	r2, #0
 800260a:	4619      	mov	r1, r3
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f7fe fc8e 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_SET);
 8002612:	893b      	ldrh	r3, [r7, #8]
 8002614:	2201      	movs	r2, #1
 8002616:	4619      	mov	r1, r3
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f7fe fc88 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_SET);
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	2201      	movs	r2, #1
 8002622:	4619      	mov	r1, r3
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f7fe fc82 	bl	8000f2e <HAL_GPIO_WritePin>
            break;
 800262a:	e026      	b.n	800267a <traffic_display+0xa2>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_SET);
 800262c:	897b      	ldrh	r3, [r7, #10]
 800262e:	2201      	movs	r2, #1
 8002630:	4619      	mov	r1, r3
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f7fe fc7b 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_RESET);
 8002638:	893b      	ldrh	r3, [r7, #8]
 800263a:	2200      	movs	r2, #0
 800263c:	4619      	mov	r1, r3
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f7fe fc75 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_SET);
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	2201      	movs	r2, #1
 8002648:	4619      	mov	r1, r3
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f7fe fc6f 	bl	8000f2e <HAL_GPIO_WritePin>
            break;
 8002650:	e013      	b.n	800267a <traffic_display+0xa2>
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_SET);
 8002652:	897b      	ldrh	r3, [r7, #10]
 8002654:	2201      	movs	r2, #1
 8002656:	4619      	mov	r1, r3
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f7fe fc68 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_SET);
 800265e:	893b      	ldrh	r3, [r7, #8]
 8002660:	2201      	movs	r2, #1
 8002662:	4619      	mov	r1, r3
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f7fe fc62 	bl	8000f2e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_RESET);
 800266a:	88fb      	ldrh	r3, [r7, #6]
 800266c:	2200      	movs	r2, #0
 800266e:	4619      	mov	r1, r3
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f7fe fc5c 	bl	8000f2e <HAL_GPIO_WritePin>
            break;
 8002676:	e000      	b.n	800267a <traffic_display+0xa2>
            break;
 8002678:	bf00      	nop
    }
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <traffic_init>:
void traffic_init() {
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	 redred = (time_yellow_set + time_green_set) == time_red_set ? 0 : 1;
 8002688:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <traffic_init+0x60>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <traffic_init+0x64>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	441a      	add	r2, r3
 8002692:	4b16      	ldr	r3, [pc, #88]	; (80026ec <traffic_init+0x68>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	bf14      	ite	ne
 800269a:	2301      	movne	r3, #1
 800269c:	2300      	moveq	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <traffic_init+0x6c>)
 80026a4:	701a      	strb	r2, [r3, #0]
	if (time_1 <= 0 || time_2<=0) {
 80026a6:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <traffic_init+0x70>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	dd03      	ble.n	80026b6 <traffic_init+0x32>
 80026ae:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <traffic_init+0x74>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	dc0a      	bgt.n	80026cc <traffic_init+0x48>
		time_1 = time_green_set;
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <traffic_init+0x64>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a0e      	ldr	r2, [pc, #56]	; (80026f4 <traffic_init+0x70>)
 80026bc:	6013      	str	r3, [r2, #0]
		time_2 = time_red_set;
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <traffic_init+0x68>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a0d      	ldr	r2, [pc, #52]	; (80026f8 <traffic_init+0x74>)
 80026c4:	6013      	str	r3, [r2, #0]
		status = GREEN_RED;
 80026c6:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <traffic_init+0x78>)
 80026c8:	2202      	movs	r2, #2
 80026ca:	601a      	str	r2, [r3, #0]
	}
	if (is_button_pressed(0)) {
 80026cc:	2000      	movs	r0, #0
 80026ce:	f000 facf 	bl	8002c70 <is_button_pressed>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <traffic_init+0x5a>
		status = SET_TIME_RED;
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <traffic_init+0x78>)
 80026da:	2208      	movs	r2, #8
 80026dc:	601a      	str	r2, [r3, #0]
	}



}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	2000005c 	.word	0x2000005c
 80026e8:	20000058 	.word	0x20000058
 80026ec:	20000060 	.word	0x20000060
 80026f0:	20000108 	.word	0x20000108
 80026f4:	20000068 	.word	0x20000068
 80026f8:	2000006c 	.word	0x2000006c
 80026fc:	20000070 	.word	0x20000070

08002700 <traffic_green_red>:

void traffic_green_red() {
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0

    if (time_1 <= 0) {
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <traffic_green_red+0x30>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	dc06      	bgt.n	800271a <traffic_green_red+0x1a>
        time_1 = time_yellow_set;
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <traffic_green_red+0x34>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a07      	ldr	r2, [pc, #28]	; (8002730 <traffic_green_red+0x30>)
 8002712:	6013      	str	r3, [r2, #0]
        status = YELLOW_RED;
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <traffic_green_red+0x38>)
 8002716:	2203      	movs	r2, #3
 8002718:	601a      	str	r2, [r3, #0]
    }
    if (is_button_pressed(0)) {
 800271a:	2000      	movs	r0, #0
 800271c:	f000 faa8 	bl	8002c70 <is_button_pressed>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <traffic_green_red+0x2c>
        status = SET_TIME_RED;
 8002726:	4b04      	ldr	r3, [pc, #16]	; (8002738 <traffic_green_red+0x38>)
 8002728:	2208      	movs	r2, #8
 800272a:	601a      	str	r2, [r3, #0]
    }

}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000068 	.word	0x20000068
 8002734:	2000005c 	.word	0x2000005c
 8002738:	20000070 	.word	0x20000070

0800273c <traffic_yellow_red>:

void traffic_yellow_red() {
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0

    if (redred == 1) {
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <traffic_yellow_red+0x58>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d10b      	bne.n	8002760 <traffic_yellow_red+0x24>
        if (time_1 <= 0) {
 8002748:	4b13      	ldr	r3, [pc, #76]	; (8002798 <traffic_yellow_red+0x5c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	dc16      	bgt.n	800277e <traffic_yellow_red+0x42>
            time_1 = time_red_set;
 8002750:	4b12      	ldr	r3, [pc, #72]	; (800279c <traffic_yellow_red+0x60>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a10      	ldr	r2, [pc, #64]	; (8002798 <traffic_yellow_red+0x5c>)
 8002756:	6013      	str	r3, [r2, #0]
            status = RED_RED1;
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <traffic_yellow_red+0x64>)
 800275a:	2206      	movs	r2, #6
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	e00e      	b.n	800277e <traffic_yellow_red+0x42>
        }
    } else {
        if (time_2 <= 0) {
 8002760:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <traffic_yellow_red+0x68>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	dc0a      	bgt.n	800277e <traffic_yellow_red+0x42>
            time_1 = time_red_set;
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <traffic_yellow_red+0x60>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <traffic_yellow_red+0x5c>)
 800276e:	6013      	str	r3, [r2, #0]
            time_2 = time_green_set;
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <traffic_yellow_red+0x6c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0b      	ldr	r2, [pc, #44]	; (80027a4 <traffic_yellow_red+0x68>)
 8002776:	6013      	str	r3, [r2, #0]
            status = RED_GREEN;
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <traffic_yellow_red+0x64>)
 800277a:	2204      	movs	r2, #4
 800277c:	601a      	str	r2, [r3, #0]
        }
    }
    if (is_button_pressed(0)) {
 800277e:	2000      	movs	r0, #0
 8002780:	f000 fa76 	bl	8002c70 <is_button_pressed>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <traffic_yellow_red+0x54>
        status = SET_TIME_RED;
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <traffic_yellow_red+0x64>)
 800278c:	2208      	movs	r2, #8
 800278e:	601a      	str	r2, [r3, #0]
    }

}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000108 	.word	0x20000108
 8002798:	20000068 	.word	0x20000068
 800279c:	20000060 	.word	0x20000060
 80027a0:	20000070 	.word	0x20000070
 80027a4:	2000006c 	.word	0x2000006c
 80027a8:	20000058 	.word	0x20000058

080027ac <traffic_red_red1>:

void traffic_red_red1() {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0

    if (time_2 <= 0) {
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <traffic_red_red1+0x30>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	dc06      	bgt.n	80027c6 <traffic_red_red1+0x1a>
    	// time_1 = time_red_set;
        time_2 = time_green_set;
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <traffic_red_red1+0x34>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a07      	ldr	r2, [pc, #28]	; (80027dc <traffic_red_red1+0x30>)
 80027be:	6013      	str	r3, [r2, #0]
        status = RED_GREEN;
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <traffic_red_red1+0x38>)
 80027c2:	2204      	movs	r2, #4
 80027c4:	601a      	str	r2, [r3, #0]
    }
    if (is_button_pressed(0)) {
 80027c6:	2000      	movs	r0, #0
 80027c8:	f000 fa52 	bl	8002c70 <is_button_pressed>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <traffic_red_red1+0x2c>
        status = SET_TIME_RED;
 80027d2:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <traffic_red_red1+0x38>)
 80027d4:	2208      	movs	r2, #8
 80027d6:	601a      	str	r2, [r3, #0]
    }

}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	2000006c 	.word	0x2000006c
 80027e0:	20000058 	.word	0x20000058
 80027e4:	20000070 	.word	0x20000070

080027e8 <traffic_red_green>:

void traffic_red_green() {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0

    if (time_2 <= 0) {
 80027ec:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <traffic_red_green+0x30>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	dc06      	bgt.n	8002802 <traffic_red_green+0x1a>
        time_2 = time_yellow_set;
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <traffic_red_green+0x34>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a07      	ldr	r2, [pc, #28]	; (8002818 <traffic_red_green+0x30>)
 80027fa:	6013      	str	r3, [r2, #0]
        status = RED_YELLOW;
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <traffic_red_green+0x38>)
 80027fe:	2205      	movs	r2, #5
 8002800:	601a      	str	r2, [r3, #0]
    }
    if (is_button_pressed(0)) {
 8002802:	2000      	movs	r0, #0
 8002804:	f000 fa34 	bl	8002c70 <is_button_pressed>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <traffic_red_green+0x2c>
        status = SET_TIME_RED;
 800280e:	4b04      	ldr	r3, [pc, #16]	; (8002820 <traffic_red_green+0x38>)
 8002810:	2208      	movs	r2, #8
 8002812:	601a      	str	r2, [r3, #0]
    }

}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}
 8002818:	2000006c 	.word	0x2000006c
 800281c:	2000005c 	.word	0x2000005c
 8002820:	20000070 	.word	0x20000070

08002824 <traffic_red_yellow>:

void traffic_red_yellow() {
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0

	if (time_1 <= 0) {
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <traffic_red_yellow+0x38>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	dc0a      	bgt.n	8002846 <traffic_red_yellow+0x22>
		time_1 = time_green_set;
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <traffic_red_yellow+0x3c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a09      	ldr	r2, [pc, #36]	; (800285c <traffic_red_yellow+0x38>)
 8002836:	6013      	str	r3, [r2, #0]
		time_2 = time_red_set;
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <traffic_red_yellow+0x40>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <traffic_red_yellow+0x44>)
 800283e:	6013      	str	r3, [r2, #0]
		status = GREEN_RED;
 8002840:	4b0a      	ldr	r3, [pc, #40]	; (800286c <traffic_red_yellow+0x48>)
 8002842:	2202      	movs	r2, #2
 8002844:	601a      	str	r2, [r3, #0]
	}
    if (is_button_pressed(0)) {
 8002846:	2000      	movs	r0, #0
 8002848:	f000 fa12 	bl	8002c70 <is_button_pressed>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <traffic_red_yellow+0x34>
        status = SET_TIME_RED;
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <traffic_red_yellow+0x48>)
 8002854:	2208      	movs	r2, #8
 8002856:	601a      	str	r2, [r3, #0]
    }

}
 8002858:	bf00      	nop
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000068 	.word	0x20000068
 8002860:	20000058 	.word	0x20000058
 8002864:	20000060 	.word	0x20000060
 8002868:	2000006c 	.word	0x2000006c
 800286c:	20000070 	.word	0x20000070

08002870 <traffic_mannual_green_red>:
}
*/



void traffic_mannual_green_red(){
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
	if(timer1_flag[1]  == 1){
 8002874:	4b08      	ldr	r3, [pc, #32]	; (8002898 <traffic_mannual_green_red+0x28>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d102      	bne.n	8002882 <traffic_mannual_green_red+0x12>
		status = GREEN_RED;
 800287c:	4b07      	ldr	r3, [pc, #28]	; (800289c <traffic_mannual_green_red+0x2c>)
 800287e:	2202      	movs	r2, #2
 8002880:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(0)){
 8002882:	2000      	movs	r0, #0
 8002884:	f000 f9f4 	bl	8002c70 <is_button_pressed>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <traffic_mannual_green_red+0x24>
		status = SET_TIME_RED;
 800288e:	4b03      	ldr	r3, [pc, #12]	; (800289c <traffic_mannual_green_red+0x2c>)
 8002890:	2208      	movs	r2, #8
 8002892:	601a      	str	r2, [r3, #0]
	}
}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}
 8002898:	2000010c 	.word	0x2000010c
 800289c:	20000070 	.word	0x20000070

080028a0 <traffic_mannual_yellow_red>:
void traffic_mannual_yellow_red(){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
	if(timer1_flag[1]  == 1){
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <traffic_mannual_yellow_red+0x28>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d102      	bne.n	80028b2 <traffic_mannual_yellow_red+0x12>
		status = YELLOW_RED;
 80028ac:	4b07      	ldr	r3, [pc, #28]	; (80028cc <traffic_mannual_yellow_red+0x2c>)
 80028ae:	2203      	movs	r2, #3
 80028b0:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(0)){
 80028b2:	2000      	movs	r0, #0
 80028b4:	f000 f9dc 	bl	8002c70 <is_button_pressed>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <traffic_mannual_yellow_red+0x24>
		status = SET_TIME_RED;
 80028be:	4b03      	ldr	r3, [pc, #12]	; (80028cc <traffic_mannual_yellow_red+0x2c>)
 80028c0:	2208      	movs	r2, #8
 80028c2:	601a      	str	r2, [r3, #0]
	}
}
 80028c4:	bf00      	nop
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	2000010c 	.word	0x2000010c
 80028cc:	20000070 	.word	0x20000070

080028d0 <traffic_mannual_red_green>:
void traffic_mannual_red_green(){
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
	if(timer1_flag[1]  == 1){
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <traffic_mannual_red_green+0x28>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d102      	bne.n	80028e2 <traffic_mannual_red_green+0x12>
		status = RED_GREEN;
 80028dc:	4b07      	ldr	r3, [pc, #28]	; (80028fc <traffic_mannual_red_green+0x2c>)
 80028de:	2204      	movs	r2, #4
 80028e0:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(0)){
 80028e2:	2000      	movs	r0, #0
 80028e4:	f000 f9c4 	bl	8002c70 <is_button_pressed>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <traffic_mannual_red_green+0x24>
		status = SET_TIME_RED;
 80028ee:	4b03      	ldr	r3, [pc, #12]	; (80028fc <traffic_mannual_red_green+0x2c>)
 80028f0:	2208      	movs	r2, #8
 80028f2:	601a      	str	r2, [r3, #0]
	}
}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	2000010c 	.word	0x2000010c
 80028fc:	20000070 	.word	0x20000070

08002900 <traffic_mannual_red_yellow>:
void traffic_mannual_red_yellow(){
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
	if(timer1_flag[1]  == 1){
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <traffic_mannual_red_yellow+0x28>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d102      	bne.n	8002912 <traffic_mannual_red_yellow+0x12>
		status = RED_YELLOW;
 800290c:	4b07      	ldr	r3, [pc, #28]	; (800292c <traffic_mannual_red_yellow+0x2c>)
 800290e:	2205      	movs	r2, #5
 8002910:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(0)){
 8002912:	2000      	movs	r0, #0
 8002914:	f000 f9ac 	bl	8002c70 <is_button_pressed>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <traffic_mannual_red_yellow+0x24>
		status = SET_TIME_RED;
 800291e:	4b03      	ldr	r3, [pc, #12]	; (800292c <traffic_mannual_red_yellow+0x2c>)
 8002920:	2208      	movs	r2, #8
 8002922:	601a      	str	r2, [r3, #0]
	}
}
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2000010c 	.word	0x2000010c
 800292c:	20000070 	.word	0x20000070

08002930 <traffic_set_time_red>:
void traffic_set_time_red(){
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0

	if(time_red_select< time_red_set){
 8002934:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <traffic_set_time_red+0x78>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <traffic_set_time_red+0x7c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	da03      	bge.n	8002948 <traffic_set_time_red+0x18>
		time_red_select = time_red_set;
 8002940:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <traffic_set_time_red+0x7c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <traffic_set_time_red+0x78>)
 8002946:	6013      	str	r3, [r2, #0]
	}
	if(is_button_pressed(1)){
 8002948:	2001      	movs	r0, #1
 800294a:	f000 f991 	bl	8002c70 <is_button_pressed>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d010      	beq.n	8002976 <traffic_set_time_red+0x46>
		// Tang gia tri
		if(time_red_select<100)
 8002954:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <traffic_set_time_red+0x78>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b63      	cmp	r3, #99	; 0x63
 800295a:	dc05      	bgt.n	8002968 <traffic_set_time_red+0x38>
		{
			time_red_select ++;
 800295c:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <traffic_set_time_red+0x78>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	3301      	adds	r3, #1
 8002962:	4a11      	ldr	r2, [pc, #68]	; (80029a8 <traffic_set_time_red+0x78>)
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	e006      	b.n	8002976 <traffic_set_time_red+0x46>
		}
		else {
			time_red_select = time_green_set + time_yellow_set;
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <traffic_set_time_red+0x80>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <traffic_set_time_red+0x84>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4413      	add	r3, r2
 8002972:	4a0d      	ldr	r2, [pc, #52]	; (80029a8 <traffic_set_time_red+0x78>)
 8002974:	6013      	str	r3, [r2, #0]
		}
	}
	if(is_button_pressed(2)){
 8002976:	2002      	movs	r0, #2
 8002978:	f000 f97a 	bl	8002c70 <is_button_pressed>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <traffic_set_time_red+0x5a>
		// Chon gia tri
		time_red_set = time_red_select;
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <traffic_set_time_red+0x78>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a09      	ldr	r2, [pc, #36]	; (80029ac <traffic_set_time_red+0x7c>)
 8002988:	6013      	str	r3, [r2, #0]
	}
	if(is_button_pressed(0)){
 800298a:	2000      	movs	r0, #0
 800298c:	f000 f970 	bl	8002c70 <is_button_pressed>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d006      	beq.n	80029a4 <traffic_set_time_red+0x74>
		time_yellow_select = time_yellow_set;
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <traffic_set_time_red+0x84>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a07      	ldr	r2, [pc, #28]	; (80029b8 <traffic_set_time_red+0x88>)
 800299c:	6013      	str	r3, [r2, #0]
		status = SET_TIME_YELLOW;
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <traffic_set_time_red+0x8c>)
 80029a0:	2209      	movs	r2, #9
 80029a2:	601a      	str	r2, [r3, #0]
	}
}
 80029a4:	bf00      	nop
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20000104 	.word	0x20000104
 80029ac:	20000060 	.word	0x20000060
 80029b0:	20000058 	.word	0x20000058
 80029b4:	2000005c 	.word	0x2000005c
 80029b8:	20000098 	.word	0x20000098
 80029bc:	20000070 	.word	0x20000070

080029c0 <traffic_set_time_yellow>:

void traffic_set_time_yellow() {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0

    if (time_yellow_select < 1) {
 80029c4:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <traffic_set_time_yellow+0x70>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	dc02      	bgt.n	80029d2 <traffic_set_time_yellow+0x12>
        time_yellow_select = 1;
 80029cc:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <traffic_set_time_yellow+0x70>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]
    }

    if (is_button_pressed(1)) {
 80029d2:	2001      	movs	r0, #1
 80029d4:	f000 f94c 	bl	8002c70 <is_button_pressed>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00e      	beq.n	80029fc <traffic_set_time_yellow+0x3c>
        // Tăng giá trị
        if (time_yellow_select < time_green_set) {
 80029de:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <traffic_set_time_yellow+0x70>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <traffic_set_time_yellow+0x74>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	da05      	bge.n	80029f6 <traffic_set_time_yellow+0x36>
            time_yellow_select++;
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <traffic_set_time_yellow+0x70>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	3301      	adds	r3, #1
 80029f0:	4a0f      	ldr	r2, [pc, #60]	; (8002a30 <traffic_set_time_yellow+0x70>)
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	e002      	b.n	80029fc <traffic_set_time_yellow+0x3c>
        } else {
            time_yellow_select = 0;
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <traffic_set_time_yellow+0x70>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
        }
    }

    if (is_button_pressed(2)) {
 80029fc:	2002      	movs	r0, #2
 80029fe:	f000 f937 	bl	8002c70 <is_button_pressed>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <traffic_set_time_yellow+0x50>
        // Chọn giá trị
        time_yellow_set = time_yellow_select;
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <traffic_set_time_yellow+0x70>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <traffic_set_time_yellow+0x78>)
 8002a0e:	6013      	str	r3, [r2, #0]
    }
    if (is_button_pressed(0)) {
 8002a10:	2000      	movs	r0, #0
 8002a12:	f000 f92d 	bl	8002c70 <is_button_pressed>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d006      	beq.n	8002a2a <traffic_set_time_yellow+0x6a>
    	time_green_select = time_green_set;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <traffic_set_time_yellow+0x74>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a06      	ldr	r2, [pc, #24]	; (8002a3c <traffic_set_time_yellow+0x7c>)
 8002a22:	6013      	str	r3, [r2, #0]
        status = SET_TIME_GREEN;
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <traffic_set_time_yellow+0x80>)
 8002a26:	220a      	movs	r2, #10
 8002a28:	601a      	str	r2, [r3, #0]
    }

}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000098 	.word	0x20000098
 8002a34:	20000058 	.word	0x20000058
 8002a38:	2000005c 	.word	0x2000005c
 8002a3c:	20000100 	.word	0x20000100
 8002a40:	20000070 	.word	0x20000070

08002a44 <traffic_set_time_green>:

void traffic_set_time_green() {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0

    if (time_green_select < time_yellow_set) {
 8002a48:	4b1f      	ldr	r3, [pc, #124]	; (8002ac8 <traffic_set_time_green+0x84>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b1f      	ldr	r3, [pc, #124]	; (8002acc <traffic_set_time_green+0x88>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	da03      	bge.n	8002a5c <traffic_set_time_green+0x18>
        time_green_select = time_yellow_set;
 8002a54:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <traffic_set_time_green+0x88>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1b      	ldr	r2, [pc, #108]	; (8002ac8 <traffic_set_time_green+0x84>)
 8002a5a:	6013      	str	r3, [r2, #0]
    }

    if (is_button_pressed(1)) {
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	f000 f907 	bl	8002c70 <is_button_pressed>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d012      	beq.n	8002a8e <traffic_set_time_green+0x4a>
        // Tăng giá trị
        if (time_green_select + time_yellow_set < time_red_set) {
 8002a68:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <traffic_set_time_green+0x84>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b17      	ldr	r3, [pc, #92]	; (8002acc <traffic_set_time_green+0x88>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	441a      	add	r2, r3
 8002a72:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <traffic_set_time_green+0x8c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	da05      	bge.n	8002a86 <traffic_set_time_green+0x42>
            time_green_select++;
 8002a7a:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <traffic_set_time_green+0x84>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	4a11      	ldr	r2, [pc, #68]	; (8002ac8 <traffic_set_time_green+0x84>)
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	e003      	b.n	8002a8e <traffic_set_time_green+0x4a>
        } else {
            time_green_select = time_yellow_set;
 8002a86:	4b11      	ldr	r3, [pc, #68]	; (8002acc <traffic_set_time_green+0x88>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a0f      	ldr	r2, [pc, #60]	; (8002ac8 <traffic_set_time_green+0x84>)
 8002a8c:	6013      	str	r3, [r2, #0]
        }
    }

    if (is_button_pressed(2)) {
 8002a8e:	2002      	movs	r0, #2
 8002a90:	f000 f8ee 	bl	8002c70 <is_button_pressed>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <traffic_set_time_green+0x5e>
        // Chọn giá trị
        time_green_set = time_green_select;
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <traffic_set_time_green+0x84>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a0d      	ldr	r2, [pc, #52]	; (8002ad4 <traffic_set_time_green+0x90>)
 8002aa0:	6013      	str	r3, [r2, #0]
    }

    if (is_button_pressed(0)) {
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f000 f8e4 	bl	8002c70 <is_button_pressed>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <traffic_set_time_green+0x80>
        time_1 = time_init;
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <traffic_set_time_green+0x94>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <traffic_set_time_green+0x98>)
 8002ab4:	6013      	str	r3, [r2, #0]
        time_2 = time_init;
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <traffic_set_time_green+0x94>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a09      	ldr	r2, [pc, #36]	; (8002ae0 <traffic_set_time_green+0x9c>)
 8002abc:	6013      	str	r3, [r2, #0]
        status = INIT;
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <traffic_set_time_green+0xa0>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
    }
}
 8002ac4:	bf00      	nop
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20000100 	.word	0x20000100
 8002acc:	2000005c 	.word	0x2000005c
 8002ad0:	20000060 	.word	0x20000060
 8002ad4:	20000058 	.word	0x20000058
 8002ad8:	20000064 	.word	0x20000064
 8002adc:	20000068 	.word	0x20000068
 8002ae0:	2000006c 	.word	0x2000006c
 8002ae4:	20000070 	.word	0x20000070

08002ae8 <automatic_run>:
void automatic_init(){
	if(status == INIT){
		setTimer1(1, 1000);
	}
}
void automatic_run(){
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
 	switch(status)
 8002aec:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <automatic_run+0x58>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	2b05      	cmp	r3, #5
 8002af4:	d820      	bhi.n	8002b38 <automatic_run+0x50>
 8002af6:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <automatic_run+0x14>)
 8002af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afc:	08002b15 	.word	0x08002b15
 8002b00:	08002b1b 	.word	0x08002b1b
 8002b04:	08002b21 	.word	0x08002b21
 8002b08:	08002b2d 	.word	0x08002b2d
 8002b0c:	08002b33 	.word	0x08002b33
 8002b10:	08002b27 	.word	0x08002b27
	{
	case (INIT):
				traffic_init();
 8002b14:	f7ff fdb6 	bl	8002684 <traffic_init>
			break;
 8002b18:	e00f      	b.n	8002b3a <automatic_run+0x52>
	case (GREEN_RED):
			// TODO
				traffic_green_red();
 8002b1a:	f7ff fdf1 	bl	8002700 <traffic_green_red>
			break;
 8002b1e:	e00c      	b.n	8002b3a <automatic_run+0x52>
	case (YELLOW_RED):
				traffic_yellow_red();
 8002b20:	f7ff fe0c 	bl	800273c <traffic_yellow_red>
			break;
 8002b24:	e009      	b.n	8002b3a <automatic_run+0x52>
	case RED_RED1:
				traffic_red_red1();
 8002b26:	f7ff fe41 	bl	80027ac <traffic_red_red1>
			break;
 8002b2a:	e006      	b.n	8002b3a <automatic_run+0x52>
	case (RED_GREEN):
				traffic_red_green();
 8002b2c:	f7ff fe5c 	bl	80027e8 <traffic_red_green>
			break;
 8002b30:	e003      	b.n	8002b3a <automatic_run+0x52>
	case (RED_YELLOW):
				traffic_red_yellow();
 8002b32:	f7ff fe77 	bl	8002824 <traffic_red_yellow>
			break;
 8002b36:	e000      	b.n	8002b3a <automatic_run+0x52>
	//case RED_RED2:
		//		traffic_red_red2();
			//break;
	default:
		break;
 8002b38:	bf00      	nop
	}

}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000070 	.word	0x20000070

08002b44 <button_reading>:
static GPIO_PinState debounceButtonBuffer3[N0_OF_BUTTONS];
static GPIO_PinState debounceButtonBuffer4[N0_OF_BUTTONS];
static uint8_t flagForButtonPress[N0_OF_BUTTONS]; // flag for button pressed (AN) hon 1 giay
static uint8_t flagForButton_longPress[N0_OF_BUTTONS];
int time_out_input = 500;
void button_reading ( GPIO_TypeDef* GPIOx[] , uint16_t GPIO_Pin[] ) {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
	for (int i = 0 ; i< N0_OF_BUTTONS ; i ++ ){
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	e077      	b.n	8002c44 <button_reading+0x100>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8002b54:	4a3f      	ldr	r2, [pc, #252]	; (8002c54 <button_reading+0x110>)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4413      	add	r3, r2
 8002b5a:	7819      	ldrb	r1, [r3, #0]
 8002b5c:	4a3e      	ldr	r2, [pc, #248]	; (8002c58 <button_reading+0x114>)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4413      	add	r3, r2
 8002b62:	460a      	mov	r2, r1
 8002b64:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8002b66:	4a3d      	ldr	r2, [pc, #244]	; (8002c5c <button_reading+0x118>)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	7819      	ldrb	r1, [r3, #0]
 8002b6e:	4a39      	ldr	r2, [pc, #228]	; (8002c54 <button_reading+0x110>)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4413      	add	r3, r2
 8002b74:	460a      	mov	r2, r1
 8002b76:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOx[i], GPIO_Pin[i]);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	4413      	add	r3, r2
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	4413      	add	r3, r2
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f7fe f9b7 	bl	8000f00 <HAL_GPIO_ReadPin>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4619      	mov	r1, r3
 8002b96:	4a31      	ldr	r2, [pc, #196]	; (8002c5c <button_reading+0x118>)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	460a      	mov	r2, r1
 8002b9e:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer3[i] == debounceButtonBuffer2[i] && debounceButtonBuffer2[i] == debounceButtonBuffer1[i]){
 8002ba0:	4a2d      	ldr	r2, [pc, #180]	; (8002c58 <button_reading+0x114>)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	781a      	ldrb	r2, [r3, #0]
 8002ba8:	492a      	ldr	r1, [pc, #168]	; (8002c54 <button_reading+0x110>)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	440b      	add	r3, r1
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d144      	bne.n	8002c3e <button_reading+0xfa>
 8002bb4:	4a27      	ldr	r2, [pc, #156]	; (8002c54 <button_reading+0x110>)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4413      	add	r3, r2
 8002bba:	781a      	ldrb	r2, [r3, #0]
 8002bbc:	4927      	ldr	r1, [pc, #156]	; (8002c5c <button_reading+0x118>)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	440b      	add	r3, r1
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d13a      	bne.n	8002c3e <button_reading+0xfa>
			// Het Rung
			if(debounceButtonBuffer4[i]!=debounceButtonBuffer3[i]){
 8002bc8:	4a25      	ldr	r2, [pc, #148]	; (8002c60 <button_reading+0x11c>)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4413      	add	r3, r2
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	4921      	ldr	r1, [pc, #132]	; (8002c58 <button_reading+0x114>)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	440b      	add	r3, r1
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d018      	beq.n	8002c0e <button_reading+0xca>
				// Dong bo lai tin hieu
				debounceButtonBuffer4[i]=debounceButtonBuffer3[i];
 8002bdc:	4a1e      	ldr	r2, [pc, #120]	; (8002c58 <button_reading+0x114>)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4413      	add	r3, r2
 8002be2:	7819      	ldrb	r1, [r3, #0]
 8002be4:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <button_reading+0x11c>)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4413      	add	r3, r2
 8002bea:	460a      	mov	r2, r1
 8002bec:	701a      	strb	r2, [r3, #0]
				if(debounceButtonBuffer4[i] == BUTTON_IS_PRESSED){
 8002bee:	4a1c      	ldr	r2, [pc, #112]	; (8002c60 <button_reading+0x11c>)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d121      	bne.n	8002c3e <button_reading+0xfa>
					// Vua chuyen sang trang thai nhan
					flagForButtonPress[i] = 1;
 8002bfa:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <button_reading+0x120>)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
					time_out_input = 500;
 8002c04:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <button_reading+0x124>)
 8002c06:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	e017      	b.n	8002c3e <button_reading+0xfa>
				}
			}
			else{
				// Dang trong qua trinh nhan de hoac nha
				time_out_input -- ;
 8002c0e:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <button_reading+0x124>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <button_reading+0x124>)
 8002c16:	6013      	str	r3, [r2, #0]
				if(time_out_input <= 0 ){
 8002c18:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <button_reading+0x124>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	dc0e      	bgt.n	8002c3e <button_reading+0xfa>
					// Nhan du 5s hoac tha 5s
					time_out_input = 500;
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <button_reading+0x124>)
 8002c22:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c26:	601a      	str	r2, [r3, #0]
					if(debounceButtonBuffer4[i] == BUTTON_IS_PRESSED){
 8002c28:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <button_reading+0x11c>)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d104      	bne.n	8002c3e <button_reading+0xfa>
						// Truong hop la nhan de
						flagForButton_longPress[i] = 1;
 8002c34:	4a0d      	ldr	r2, [pc, #52]	; (8002c6c <button_reading+0x128>)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4413      	add	r3, r2
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i< N0_OF_BUTTONS ; i ++ ){
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3301      	adds	r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	dd84      	ble.n	8002b54 <button_reading+0x10>
					}
				}
			}
		}
	}
}
 8002c4a:	bf00      	nop
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	200000a0 	.word	0x200000a0
 8002c58:	200000a4 	.word	0x200000a4
 8002c5c:	2000009c 	.word	0x2000009c
 8002c60:	200000a8 	.word	0x200000a8
 8002c64:	200000ac 	.word	0x200000ac
 8002c68:	20000074 	.word	0x20000074
 8002c6c:	200000b0 	.word	0x200000b0

08002c70 <is_button_pressed>:
unsigned int is_button_pressed ( unsigned int index ){
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	// Tra ve trang thai nut nhan co dang bat hay khong
	if(index>= N0_OF_BUTTONS){
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <is_button_pressed+0x12>
		return 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e00d      	b.n	8002c9e <is_button_pressed+0x2e>
	}
	if(flagForButtonPress[index] == 1){
 8002c82:	4a09      	ldr	r2, [pc, #36]	; (8002ca8 <is_button_pressed+0x38>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4413      	add	r3, r2
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d106      	bne.n	8002c9c <is_button_pressed+0x2c>
		flagForButtonPress[index] = 0;
 8002c8e:	4a06      	ldr	r2, [pc, #24]	; (8002ca8 <is_button_pressed+0x38>)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4413      	add	r3, r2
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
		return 1;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <is_button_pressed+0x2e>
	}
	return 0;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr
 8002ca8:	200000ac 	.word	0x200000ac

08002cac <manual_run>:
 */
#include "manual.h"
void manual_init(){
	setTimer1(2, 500); // Danh cho nhap nhay den khi set thoi gian
}
void manual_run(){
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
	switch(status){
 8002cb0:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <manual_run+0x5c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	3b08      	subs	r3, #8
 8002cb6:	2b07      	cmp	r3, #7
 8002cb8:	d823      	bhi.n	8002d02 <manual_run+0x56>
 8002cba:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <manual_run+0x14>)
 8002cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc0:	08002ce1 	.word	0x08002ce1
 8002cc4:	08002ce7 	.word	0x08002ce7
 8002cc8:	08002ced 	.word	0x08002ced
 8002ccc:	08002d03 	.word	0x08002d03
 8002cd0:	08002cf3 	.word	0x08002cf3
 8002cd4:	08002cf7 	.word	0x08002cf7
 8002cd8:	08002cfb 	.word	0x08002cfb
 8002cdc:	08002cff 	.word	0x08002cff
	case SET_TIME_RED:
		traffic_set_time_red();
 8002ce0:	f7ff fe26 	bl	8002930 <traffic_set_time_red>
		break;
 8002ce4:	e00e      	b.n	8002d04 <manual_run+0x58>
	case SET_TIME_YELLOW:
		traffic_set_time_yellow();
 8002ce6:	f7ff fe6b 	bl	80029c0 <traffic_set_time_yellow>
		break;
 8002cea:	e00b      	b.n	8002d04 <manual_run+0x58>
	case SET_TIME_GREEN:
		traffic_set_time_green();
 8002cec:	f7ff feaa 	bl	8002a44 <traffic_set_time_green>
		break;
 8002cf0:	e008      	b.n	8002d04 <manual_run+0x58>
	case MAN_GREEN_RED:
		traffic_mannual_green_red();
 8002cf2:	f7ff fdbd 	bl	8002870 <traffic_mannual_green_red>
	case MAN_YELLOW_RED:
		traffic_mannual_yellow_red();
 8002cf6:	f7ff fdd3 	bl	80028a0 <traffic_mannual_yellow_red>
	case MAN_RED_GREEN:
		traffic_mannual_red_green();
 8002cfa:	f7ff fde9 	bl	80028d0 <traffic_mannual_red_green>
	case MAN_RED_YELLOW:
		traffic_mannual_red_yellow();
 8002cfe:	f7ff fdff 	bl	8002900 <traffic_mannual_red_yellow>
	default :
		break;
 8002d02:	bf00      	nop
	}

}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20000070 	.word	0x20000070

08002d0c <setTimer1>:
#include "software_timer.h"
	int time_cycle = 10;
	int timer1_counter[10];
	int timer1_flag[10];

	void setTimer1(int index,int duration){
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
		timer1_counter[index]=duration / time_cycle;
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <setTimer1+0x30>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	fb92 f2f3 	sdiv	r2, r2, r3
 8002d20:	4907      	ldr	r1, [pc, #28]	; (8002d40 <setTimer1+0x34>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		timer1_flag[index] = 0;
 8002d28:	4a06      	ldr	r2, [pc, #24]	; (8002d44 <setTimer1+0x38>)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	20000078 	.word	0x20000078
 8002d40:	20000134 	.word	0x20000134
 8002d44:	2000010c 	.word	0x2000010c

08002d48 <SetTimerForTimerSet>:
	void SetTimerForTimerSet(int index,int duration,int timer_set){
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
		time_cycle = timer_set;
 8002d54:	4a05      	ldr	r2, [pc, #20]	; (8002d6c <SetTimerForTimerSet+0x24>)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6013      	str	r3, [r2, #0]
		setTimer1(index, duration);
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f7ff ffd5 	bl	8002d0c <setTimer1>
	}
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000078 	.word	0x20000078

08002d70 <timerRun>:
	void timerRun(){
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
		for (int i = 0 ; i <10 ; i++){
 8002d76:	2300      	movs	r3, #0
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	e01c      	b.n	8002db6 <timerRun+0x46>
			if(timer1_counter[i] >  0 ){
 8002d7c:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <timerRun+0x58>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	dd08      	ble.n	8002d9a <timerRun+0x2a>
					timer1_counter[i]--;
 8002d88:	4a0f      	ldr	r2, [pc, #60]	; (8002dc8 <timerRun+0x58>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d90:	1e5a      	subs	r2, r3, #1
 8002d92:	490d      	ldr	r1, [pc, #52]	; (8002dc8 <timerRun+0x58>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 }
			if(timer1_counter[i]<=0){
 8002d9a:	4a0b      	ldr	r2, [pc, #44]	; (8002dc8 <timerRun+0x58>)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	dc04      	bgt.n	8002db0 <timerRun+0x40>
					timer1_flag[i]=1;
 8002da6:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <timerRun+0x5c>)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2101      	movs	r1, #1
 8002dac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0 ; i <10 ; i++){
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3301      	adds	r3, #1
 8002db4:	607b      	str	r3, [r7, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b09      	cmp	r3, #9
 8002dba:	dddf      	ble.n	8002d7c <timerRun+0xc>
			}
		}


	}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr
 8002dc8:	20000134 	.word	0x20000134
 8002dcc:	2000010c 	.word	0x2000010c

08002dd0 <__libc_init_array>:
 8002dd0:	b570      	push	{r4, r5, r6, lr}
 8002dd2:	2600      	movs	r6, #0
 8002dd4:	4d0c      	ldr	r5, [pc, #48]	; (8002e08 <__libc_init_array+0x38>)
 8002dd6:	4c0d      	ldr	r4, [pc, #52]	; (8002e0c <__libc_init_array+0x3c>)
 8002dd8:	1b64      	subs	r4, r4, r5
 8002dda:	10a4      	asrs	r4, r4, #2
 8002ddc:	42a6      	cmp	r6, r4
 8002dde:	d109      	bne.n	8002df4 <__libc_init_array+0x24>
 8002de0:	f000 f822 	bl	8002e28 <_init>
 8002de4:	2600      	movs	r6, #0
 8002de6:	4d0a      	ldr	r5, [pc, #40]	; (8002e10 <__libc_init_array+0x40>)
 8002de8:	4c0a      	ldr	r4, [pc, #40]	; (8002e14 <__libc_init_array+0x44>)
 8002dea:	1b64      	subs	r4, r4, r5
 8002dec:	10a4      	asrs	r4, r4, #2
 8002dee:	42a6      	cmp	r6, r4
 8002df0:	d105      	bne.n	8002dfe <__libc_init_array+0x2e>
 8002df2:	bd70      	pop	{r4, r5, r6, pc}
 8002df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df8:	4798      	blx	r3
 8002dfa:	3601      	adds	r6, #1
 8002dfc:	e7ee      	b.n	8002ddc <__libc_init_array+0xc>
 8002dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e02:	4798      	blx	r3
 8002e04:	3601      	adds	r6, #1
 8002e06:	e7f2      	b.n	8002dee <__libc_init_array+0x1e>
 8002e08:	08002e64 	.word	0x08002e64
 8002e0c:	08002e64 	.word	0x08002e64
 8002e10:	08002e64 	.word	0x08002e64
 8002e14:	08002e68 	.word	0x08002e68

08002e18 <memset>:
 8002e18:	4603      	mov	r3, r0
 8002e1a:	4402      	add	r2, r0
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d100      	bne.n	8002e22 <memset+0xa>
 8002e20:	4770      	bx	lr
 8002e22:	f803 1b01 	strb.w	r1, [r3], #1
 8002e26:	e7f9      	b.n	8002e1c <memset+0x4>

08002e28 <_init>:
 8002e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2a:	bf00      	nop
 8002e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e2e:	bc08      	pop	{r3}
 8002e30:	469e      	mov	lr, r3
 8002e32:	4770      	bx	lr

08002e34 <_fini>:
 8002e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e36:	bf00      	nop
 8002e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3a:	bc08      	pop	{r3}
 8002e3c:	469e      	mov	lr, r3
 8002e3e:	4770      	bx	lr

/*
 * Traffic_light.c
 *
 *  Created on: Sep 2, 2024
 *      Author: thuyh
 */

#include "Traffic_light.h"
int time_green_set = 3;
int time_yellow_set = 2;
int time_red_set = 5;
int time_init = 5;
int time_1 = 5;
int	time_2 = 5;
uint8_t redred ;

void traffic_double_display(GPIO_TypeDef * GPIOx1, uint16_t LED_RED1, uint16_t LED_YELLOW1, uint16_t LED_GREEN1,
                            GPIO_TypeDef * GPIOx2, uint16_t LED_RED2, uint16_t LED_YELLOW2, uint16_t LED_GREEN2, int status) {
    switch(status) {
        case GREEN_RED:
        case MAN_GREEN_RED:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, GREEN);
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
            break;
        case YELLOW_RED:
        case MAN_YELLOW_RED:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, YELLOW);
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
            break;
        case RED_GREEN:
        case MAN_RED_GREEN:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, GREEN);
            break;
        case RED_YELLOW:
        case MAN_RED_YELLOW:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, YELLOW);
            break;
        case INIT:
            HAL_GPIO_WritePin(GPIOx1, LED_RED1, RESET);
            HAL_GPIO_WritePin(GPIOx1, LED_YELLOW1, RESET);
            HAL_GPIO_WritePin(GPIOx1, LED_GREEN1, RESET);
            HAL_GPIO_WritePin(GPIOx2, LED_RED2, RESET);
            HAL_GPIO_WritePin(GPIOx2, LED_YELLOW2, RESET);
            HAL_GPIO_WritePin(GPIOx2, LED_GREEN2, RESET);
            break;
        case RED_RED1:
        case RED_RED2:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
            break;
        case SET_TIME_RED:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, RED);
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, RED);
            break;

        case SET_TIME_YELLOW:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, YELLOW);
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, YELLOW);
            break;

        case SET_TIME_GREEN:
            traffic_display(GPIOx1, LED_RED1, LED_YELLOW1, LED_GREEN1, GREEN);
            traffic_display(GPIOx2, LED_RED2, LED_YELLOW2, LED_GREEN2, GREEN);
            break;
        default:
            HAL_GPIO_WritePin(GPIOx1, LED_RED1, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOx1, LED_YELLOW1, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOx1, LED_GREEN1, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOx2, LED_RED2, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOx2, LED_YELLOW2, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOx2, LED_GREEN2, GPIO_PIN_SET);
        	break;
    }
}
void traffic_display(GPIO_TypeDef * GPIOx, uint16_t LED_RED, uint16_t LED_YELLOW, uint16_t LED_GREEN, State type) {
    switch(type) {
        case RED:
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_SET);
            break;
        case YELLOW:
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_SET);
            break;
        case GREEN:
            HAL_GPIO_WritePin(GPIOx, LED_RED, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOx, LED_YELLOW, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIOx, LED_GREEN, GPIO_PIN_RESET);
            break;
        default:
            break;
    }
}
void traffic_init() {
	redred = (time_yellow_set + time_green_set) == time_red_set ? 0 : 1;
	 update_timers();
	 display_times();
}

void traffic_green_red() {
    update_timers();
    if (time_1 <= 0) {
        time_1 = time_yellow_set;
        status = YELLOW_RED;
    }
    if (is_button_pressed(0)) {
        status = SET_TIME_RED;
    }
    display_times();
}

void traffic_yellow_red() {
    update_timers();
    if (redred == 1) {
        if (time_1 <= 0) {
            time_1 = time_red_set;
            status = RED_RED1;
        }
    } else {
        if (time_2 <= 0) {
            time_1 = time_red_set;
            time_2 = time_green_set;
            status = RED_GREEN;
        }
    }
    if (is_button_pressed(0)) {
        status = SET_TIME_RED;
    }
    display_times();
}

void traffic_red_red1() {
    update_timers();
    if (time_2 <= 0) {
        time_1 = time_red_set;
        time_2 = time_green_set;
        status = RED_GREEN;
    }
    if (is_button_pressed(0)) {
        status = SET_TIME_RED;
    }
    display_times();
}

void traffic_red_green() {
    update_timers();
    if (time_2 <= 0) {
        time_2 = time_yellow_set;
        status = RED_YELLOW;
    }
    if (is_button_pressed(0)) {
        status = SET_TIME_RED;
    }
    display_times();
}

void traffic_red_yellow() {
    update_timers();
    if (redred == 1) {
        if (time_2 <= 0) {
            time_2 = time_red_set;
            status = RED_RED2;
        }
    } else {
        if (time_1 <= 0) {
            time_1 = time_green_set;
            time_2 = time_red_set;
            status = GREEN_RED;
        }
    }
    if (is_button_pressed(0)) {
        status = SET_TIME_RED;
    }
    display_times();
}

void traffic_red_red2() {
    update_timers();
    if (time_2 <= 0) {
        time_1 = time_green_set;
        time_2 = time_red_set;
        status = GREEN_RED;
    }
    if (is_button_pressed(0)) {
        status = SET_TIME_RED;
    }
    display_times();
}

void update_timers() {
    if (timer1_flag[1] == 1) {
        time_1--;
        time_2--;
        setTimer1(1, 1000);
    }
}

void display_times() {
	DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED1_0_Pin, SEGLED1_1_Pin, SEGLED1_2_Pin, SEGLED1_3_Pin, SEGLED1_4_Pin, SEGLED1_5_Pin, SEGLED1_6_Pin, time_1-1);
    DISPLAY_LED_7_SEGMENT(GPIOB, SEGLED2_0_Pin, SEGLED2_1_Pin, SEGLED2_2_Pin, SEGLED2_3_Pin, SEGLED2_4_Pin, SEGLED2_5_Pin, SEGLED2_6_Pin, time_2-1);
}


void traffic_mannual_green_red(){
	if(timer1_flag[1]  == 1){
		status = GREEN_RED;
	}
	if(is_button_pressed(0)){
		status = SET_TIME_RED;
	}
}
void traffic_mannual_yellow_red(){
	if(timer1_flag[1]  == 1){
		status = YELLOW_RED;
	}
	if(is_button_pressed(0)){
		status = SET_TIME_RED;
	}
}
void traffic_mannual_red_green(){
	if(timer1_flag[1]  == 1){
		status = RED_GREEN;
	}
	if(is_button_pressed(0)){
		status = SET_TIME_RED;
	}
}
void traffic_mannual_red_yellow(){
	if(timer1_flag[1]  == 1){
		status = RED_YELLOW;
	}
	if(is_button_pressed(0)){
		status = SET_TIME_RED;
	}
}
void traffic_set_time_red(){
	if(is_button_pressed(0)){
		status = SET_TIME_YELLOW;
	}
}
void traffic_set_time_yellow(){
	if(is_button_pressed(0)){
		status = SET_TIME_GREEN;
	}
}
void traffic_set_time_green(){
	if(is_button_pressed(0)){
		status = INIT;
	}
}
